import{_ as p,c as l,b as n,a as o,d as s,e as t,w as i,r,o as c}from"./app-D67BBu3k.js";const d="/assets/Library-Maven-SpringBoot2.excalidraw-DggtCUgt.svg",g={},h={class:"hint-container info"};function u(b,a){const e=r("RouteLink");return c(),l("div",null,[a[8]||(a[8]=n("p",null,[n("strong",null,"文章摘要："),s(" spring boot 是一个快速整合框架，利用自动配置原理简化各种配置，比如SSM配置。")],-1)),a[9]||(a[9]=n("div",{class:"hint-container important"},[n("p",{class:"hint-container-title"},"重要"),n("p",null,"前置条件"),n("ul",null,[n("li",null,"^ Java 8"),n("li",null,"Spring Framework 5")])],-1)),n("div",h,[a[4]||(a[4]=n("p",{class:"hint-container-title"},"相关信息",-1)),a[5]||(a[5]=n("p",null,"外部相关文章",-1)),a[6]||(a[6]=n("ul",null,[n("li")],-1)),a[7]||(a[7]=n("p",null,"内部相关文章",-1)),n("ul",null,[n("li",null,[a[1]||(a[1]=s("SpringBoot 2 官方Starter：")),t(e,{to:"/software/Library-Maven-SpringBoot2-%E5%AE%98%E6%96%B9%E5%90%AF%E5%8A%A8%E5%99%A8%EF%BC%88Starter%EF%BC%89.html"},{default:i(()=>a[0]||(a[0]=[s("Library-Maven-SpringBoot2-官方启动器（Starter）")])),_:1,__:[0]})]),n("li",null,[a[3]||(a[3]=s("SpringBoot 2 注解：")),t(e,{to:"/software/Library-Maven-SpringBoot2-%E6%B3%A8%E8%A7%A3.html"},{default:i(()=>a[2]||(a[2]=[s("Library-Maven-SpringBoot2-注解")])),_:1,__:[2]})])])]),a[10]||(a[10]=o('<blockquote><p><img src="'+d+`" alt=""></p></blockquote><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><blockquote><p><strong>简化配置</strong></p><ul><li>Spring Boot通过提供一系列的“starter”依赖项来简化配置。</li><li>这些starters包含了开发特定类型应用所需的所有Spring和相关库的依赖。</li><li>例如，<code>spring-boot-starter-web</code>包含了创建Web应用程序所需的所有依赖。</li><li>开发者无需手动添加和管理大量的依赖项。</li><li>Spring Boot 中包含了大量的 starter 启动器，启动器根据使用场景来分类，定义了当前项目使用的所有依赖坐标和版本号，管理依赖关系，整合成一个新的依赖，统一管理，称之为<code>启动器</code>。<code>spring-boot-starter-&lt;场景&gt;</code>。</li></ul><p><strong>独立运行</strong></p><ul><li>Spring Boot应用可以打包成一个独立的Java可执行jar包，这个jar包包含了应用的所有依赖项以及嵌入的Web服务器（如Tomcat）。</li><li>可以通过<code>java -jar</code>命令直接运行你的应用程序，无需部署到外部的应用服务器。</li></ul><p><strong>自动配置</strong></p><ul><li>Spring Boot 的自动配置功能会根据添加到项目中的jar依赖自动配置 Spring 框架。</li><li>例如，如果类路径下存在HSQLDB，并且没有手动配置任何数据库连接 beans，Spring Boot会自动配置内存数据库。</li><li>自动配置是通过<code>@EnableAutoConfiguration</code>注解启用的，它会尝试根据添加的jar依赖推断出你想如何配置 Spring。</li></ul><p><strong>生产就绪特性</strong></p><ul><li>Spring Boot 提供了一系列有助于生产环境的应用特性，如应用监控、度量、健康检查和安全管理。</li><li>例如，它提供了actuator模块，该模块可以通过HTTP或JMX端点暴露应用程序的内部状态，这对于运维人员监控和管理应用程序非常有用。</li></ul><p><strong>无代码生成和XML配置</strong></p><ul><li>Spring Boot 提倡使用Java配置来代替传统的XML配置文件。</li><li>通过使用<code>@Configuration</code>和<code>@Bean</code>注解，实现以Java代码的方式配置 Spring 容器。</li><li>无需编写和维护XML配置文件，减少了配置的复杂性。</li></ul><p><strong>微服务支持</strong></p><ul><li>Spring Boot非常适合构建微服务架构中的独立服务。</li><li>它的轻量级和易于部署的特性使得它成为微服务开发的首选框架。</li><li>结合 Spring Cloud 之后，Spring Boot 可以提供完整的微服务解决方案，包括服务发现、配置管理、负载均衡等。</li><li>方便构建微服务架构，支持Spring Cloud。</li></ul></blockquote><h2 id="maven坐标" tabindex="-1"><a class="header-anchor" href="#maven坐标"><span>Maven坐标</span></a></h2><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token comment">&lt;!-- 继承父级项目 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 引入并继承spring boot提供的父级pom.xml --&gt;</span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 请自行查找合适版本 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建"><span>环境搭建</span></a></h2><p>引导类，在pom.xml中通过<code>&lt;parent&gt;&lt;/parent&gt;</code>引入springboot的父级项目。解决依赖版本统一管理。</p><h2 id="启动器" tabindex="-1"><a class="header-anchor" href="#启动器"><span>启动器</span></a></h2><h2 id="配置类" tabindex="-1"><a class="header-anchor" href="#配置类"><span>配置类</span></a></h2><p>Spring Boot 支持基于 Java 的配置。尽管可以将 <code>SpringApplication</code> 与 XML 源一起使用，但我们通常建议主源是单个 <code>@Configuration</code> 类。通常，定义 <code>main</code> 方法的类是主<code>@Configuration</code>的不错候选者。</p><h2 id="配置和自动配置原理" tabindex="-1"><a class="header-anchor" href="#配置和自动配置原理"><span>配置和自动配置原理</span></a></h2><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h2><h3 id="application-properties配置文件" tabindex="-1"><a class="header-anchor" href="#application-properties配置文件"><span><code>application.properties</code>配置文件</span></a></h3><blockquote><ul><li>配置文件名称必须是：application.properties</li><li>存储位置在：scr/main/resources</li></ul></blockquote><p>设置基本信息</p><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt"><pre><code class="language-txt"><span class="line"># 端口号</span>
<span class="line">server.port=8080</span>
<span class="line"></span>
<span class="line"># 项目虚拟路径（web项目名）</span>
<span class="line">server.servlet.context-path=/agent</span>
<span class="line"></span>
<span class="line"># 设置懒加载</span>
<span class="line">spring.main.lazy-initialization=true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件上传</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line">  <span class="token key atrule">servlet</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">multipart</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">max-file-size</span><span class="token punctuation">:</span> 100MB     <span class="token comment"># 每个文件大小最大限制</span></span>
<span class="line">      <span class="token key atrule">max-request-size</span><span class="token punctuation">:</span> 200MB  <span class="token comment"># 每次传输文件大小最大限制</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义springapplication" tabindex="-1"><a class="header-anchor" href="#自定义springapplication"><span>自定义SpringApplication</span></a></h3><h3 id="后台命令行启动图标" tabindex="-1"><a class="header-anchor" href="#后台命令行启动图标"><span>后台命令行启动图标</span></a></h3><p>在<code>resources</code>目录下创建<code>banner</code>的图片，或者创建一个<code>banner.txt</code>的文本文件，就能在启动时显示一个以字符构成的图标。</p><h3 id="配置文件优先级" tabindex="-1"><a class="header-anchor" href="#配置文件优先级"><span>配置文件优先级</span></a></h3><p>文件格式</p><blockquote><ul><li><code>yml</code> &gt; <code>yaml</code> &gt; <code>properties</code>配置文件。</li></ul></blockquote><p>文件位置</p><table><thead><tr><th style="text-align:left;">配置文件位置</th><th style="text-align:left;">说明</th><th style="text-align:center;">优先级</th></tr></thead><tbody><tr><td style="text-align:left;"><code>classpath:/</code></td><td style="text-align:left;">资源根路径</td><td style="text-align:center;">最低</td></tr><tr><td style="text-align:left;"><code>classpath:/config/*/</code></td><td style="text-align:left;">资源根路径下的config目录</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;"><code>classpath:/config/</code></td><td style="text-align:left;">资源根路径下的config目录</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;"><code>file:./</code></td><td style="text-align:left;">项目根路径</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;"><code>file:./config/*/</code></td><td style="text-align:left;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;"><code>file:./config/</code></td><td style="text-align:left;">项目根路径下的config目录</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;"><code>java -jar &lt;项目名&gt;.jar --spring.config.location=&lt;配置文件位置&gt;</code></td><td style="text-align:left;">命令行指定文件</td><td style="text-align:center;">最大</td></tr></tbody></table><h3 id="profile文件的加载" tabindex="-1"><a class="header-anchor" href="#profile文件的加载"><span>Profile文件的加载</span></a></h3><p>对于应用程序来说，不同的环境需要不同的配置。</p><h3 id="外部配置文件读取" tabindex="-1"><a class="header-anchor" href="#外部配置文件读取"><span>外部配置文件读取</span></a></h3><h3 id="springboot启动器的概念" tabindex="-1"><a class="header-anchor" href="#springboot启动器的概念"><span>springboot启动器的概念</span></a></h3><p><code>autoconfiguration</code>启动器</p><p>启动器的作用：实现模块化和依赖封装</p><p>打包成jar包</p><h3 id="自定义启动器" tabindex="-1"><a class="header-anchor" href="#自定义启动器"><span>自定义启动器</span></a></h3><p>有默认的配置文件，写在META-INF目录下、 写个类去读取默认的配置文件，构建spring.factories</p><ol><li>创建一个模块（父子工程）</li><li>编写配置文件、配置验证码的一些默认信息</li><li>写一下实体类，映射配置信息，来存储读取出来的配置信息</li><li>写业务，写验证码的工具类</li><li>创建配置类，将验证码工具类加入到ioc容器中</li></ol><h2 id="热部署" tabindex="-1"><a class="header-anchor" href="#热部署"><span>热部署</span></a></h2><blockquote><ul><li>实现在修改代码或配置文件后，能够不需要每次重启使修改生效。</li></ul></blockquote><h3 id="开启热部署" tabindex="-1"><a class="header-anchor" href="#开启热部署"><span>开启热部署</span></a></h3><ol><li>引入依赖</li></ol><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--devtools热部署--&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h2><p>java日志体系</p><h2 id="web开发" tabindex="-1"><a class="header-anchor" href="#web开发"><span>Web开发</span></a></h2><h2 id="集成mybatis" tabindex="-1"><a class="header-anchor" href="#集成mybatis"><span>集成MyBatis</span></a></h2><h2 id="启动原理源码" tabindex="-1"><a class="header-anchor" href="#启动原理源码"><span>启动原理源码</span></a></h2><h2 id="自定义starters" tabindex="-1"><a class="header-anchor" href="#自定义starters"><span>自定义starters</span></a></h2><h2 id="集成中间件" tabindex="-1"><a class="header-anchor" href="#集成中间件"><span>集成中间件</span></a></h2><p>整合第三方技术的方式</p><blockquote><ul><li>导入对应的starter</li><li>根据提供的配置格式，配置非默认值对应的配置项。</li></ul></blockquote><h2 id="ioc容器" tabindex="-1"><a class="header-anchor" href="#ioc容器"><span>IOC容器</span></a></h2><h2 id="aop面向切面编程" tabindex="-1"><a class="header-anchor" href="#aop面向切面编程"><span>AOP面向切面编程</span></a></h2><blockquote><p>提供了面向切面编程的实现，允许开发者通过分离横切关注点来增加模块化。</p><p>在面向对象编程（OOP）中，我们通常通过封装、继承和多态来提高代码的模块化，但有些横切关注点（如日志、事务管理和安全）往往跨越多个模块，这可能导致代码分散和重复。AOP就是为了解决这类问题而设计的。</p><p>Spring AOP主要用于处理Spring管理的beans，它不如AspectJ强大，AspectJ是另一种更为通用的AOP实现，它能够处理非Spring托管的类，甚至可以在编译时进行织入。</p></blockquote><h2 id="resoures资源" tabindex="-1"><a class="header-anchor" href="#resoures资源"><span>Resoures资源</span></a></h2><h2 id="web-mvc" tabindex="-1"><a class="header-anchor" href="#web-mvc"><span>Web MVC</span></a></h2><h2 id="web-clients" tabindex="-1"><a class="header-anchor" href="#web-clients"><span>Web Clients</span></a></h2><h2 id="定时任务" tabindex="-1"><a class="header-anchor" href="#定时任务"><span>定时任务</span></a></h2><h2 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span>缓存</span></a></h2><h2 id="spring底层核心原理" tabindex="-1"><a class="header-anchor" href="#spring底层核心原理"><span>spring底层核心原理</span></a></h2><h2 id="spring的bean生命周期" tabindex="-1"><a class="header-anchor" href="#spring的bean生命周期"><span>spring的Bean生命周期</span></a></h2><h2 id="spring的依赖注入" tabindex="-1"><a class="header-anchor" href="#spring的依赖注入"><span>spring的依赖注入</span></a></h2><h2 id="spring的启动过程" tabindex="-1"><a class="header-anchor" href="#spring的启动过程"><span>spring的启动过程</span></a></h2><h2 id="spring的配置类" tabindex="-1"><a class="header-anchor" href="#spring的配置类"><span>spring的配置类</span></a></h2><h2 id="spring的整合第三方依赖" tabindex="-1"><a class="header-anchor" href="#spring的整合第三方依赖"><span>spring的整合第三方依赖</span></a></h2><h2 id="spring的aop" tabindex="-1"><a class="header-anchor" href="#spring的aop"><span>spring的AOP</span></a></h2><h2 id="spring的事务" tabindex="-1"><a class="header-anchor" href="#spring的事务"><span>spring的事务</span></a></h2><h2 id="博主提示" tabindex="-1"><a class="header-anchor" href="#博主提示"><span>博主提示</span></a></h2><p>总结</p><blockquote><ul><li>建议将springboot的启动类/配置类，放置在外层，这样在自动扫描包路径时能将全部的对象进行扫描，进行添加bean对象。</li></ul></blockquote><blockquote><p>更多参考资料请参考：<a href="https://sca.aliyun.com/learn/spring/" target="_blank" rel="noopener noreferrer">Spring Cloud Alibaba</a>，阿里巴巴提供的教学文档。</p></blockquote>`,70))])}const k=p(g,[["render",u]]),f=JSON.parse('{"path":"/software/Library-Maven-SpringBoot2.html","title":"Library - Maven - SpringBoot 2","lang":"zh-CN","frontmatter":{"title":"Library - Maven - SpringBoot 2","author":"魔术桌","cover":"","category":["软件程序/类库"],"date":"2024-09-01T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： spring boot 是一个快速整合框架，利用自动配置原理简化各种配置，比如SSM配置。 重要 前置条件 ^ Java 8 Spring Framework 5 相关信息 外部相关文章 内部相关文章 SpringBoot 2 官方Starter： SpringBoot 2 注解： 简介 简化配置 Spring Boot通过提供一系列的“s...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Library - Maven - SpringBoot 2\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-03T09:56:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Library-Maven-SpringBoot2.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Library - Maven - SpringBoot 2"}],["meta",{"property":"og:description","content":"文章摘要： spring boot 是一个快速整合框架，利用自动配置原理简化各种配置，比如SSM配置。 重要 前置条件 ^ Java 8 Spring Framework 5 相关信息 外部相关文章 内部相关文章 SpringBoot 2 官方Starter： SpringBoot 2 注解： 简介 简化配置 Spring Boot通过提供一系列的“s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T09:56:57.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-09-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-03T09:56:57.000Z"}]]},"git":{"updatedTime":1759485417000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Library-Maven-SpringBoot2.md","excerpt":"<p><strong>文章摘要：</strong> spring boot 是一个快速整合框架，利用自动配置原理简化各种配置，比如SSM配置。</p>\\n"}');export{k as comp,f as data};
