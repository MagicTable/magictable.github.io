import{_ as e,c as l,a as d,o as a}from"./app-D67BBu3k.js";const n={};function s(i,t){return a(),l("div",null,t[0]||(t[0]=[d(`<p><strong>文章摘要：</strong> 关键字是Java编程语言中的语法规则语句，具有特殊含义，用于定义程序的基本结构和元素。</p><h2 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符"><span>访问修饰符</span></a></h2><table><thead><tr><th style="text-align:left;">标识符</th><th style="text-align:left;">说明</th><th style="text-align:left;">详情</th><th style="text-align:left;">最早版本</th><th style="text-align:left;">最后版本</th></tr></thead><tbody><tr><td style="text-align:left;">private</td><td style="text-align:left;">当前类访问级别</td><td style="text-align:left;">私有的，<code>本类</code>可见</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">default</td><td style="text-align:left;">包访问级别</td><td style="text-align:left;">默认（可不写），<code>本类</code>、<code>同包</code>可见</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">protected</td><td style="text-align:left;">子类访问级别</td><td style="text-align:left;">受保护的，<code>本类</code>、<code>同包</code>、<code>子类</code>可见</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">public</td><td style="text-align:left;">公共访问级别</td><td style="text-align:left;">公共的，<code>本类</code>、<code>同包</code>、<code>子类</code>、<code>任何地方</code>对任何类可见</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><h2 id="类、接口、方法、抽象、变量、代码块" tabindex="-1"><a class="header-anchor" href="#类、接口、方法、抽象、变量、代码块"><span>类、接口、方法、抽象、变量、代码块</span></a></h2><table><thead><tr><th style="text-align:left;">标识符</th><th style="text-align:left;">说明</th><th style="text-align:left;">详情</th><th style="text-align:left;">最早版本</th><th style="text-align:left;">最后版本</th></tr></thead><tbody><tr><td style="text-align:left;">class</td><td style="text-align:left;">定义类</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">abstract</td><td style="text-align:left;">定义抽象类</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">extends</td><td style="text-align:left;">类继承抽象类/实现类</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">interface</td><td style="text-align:left;">定义接口类</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">implements</td><td style="text-align:left;">类继承接口类</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">static</td><td style="text-align:left;">声明静态</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">final</td><td style="text-align:left;">最终，不可改变的</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">synchronized</td><td style="text-align:left;">线程、同步</td><td style="text-align:left;">线程安全</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">volatile</td><td style="text-align:left;">修饰变量</td><td style="text-align:left;">表示该变量的值可能会被多个线程同时修改</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">transient</td><td style="text-align:left;">修饰变量</td><td style="text-align:left;">表示该变量不需要被序列化</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">native</td><td style="text-align:left;">本地、原生方法（非java实现）</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">strictfp</td><td style="text-align:left;">严格浮点、精准浮点</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">enum</td><td style="text-align:left;">枚举类型</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制"><span>流程控制</span></a></h2><table><thead><tr><th style="text-align:left;">标识符</th><th style="text-align:left;">说明</th><th style="text-align:left;">详情</th><th style="text-align:left;">最早版本</th><th style="text-align:left;">最后版本</th></tr></thead><tbody><tr><td style="text-align:left;">if</td><td style="text-align:left;">如果</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">else</td><td style="text-align:left;">否则</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">switch</td><td style="text-align:left;">根据值选择执行</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">case</td><td style="text-align:left;">定义一个值以供switch选择</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">default</td><td style="text-align:left;">在switch语句中定义默认分支</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">while</td><td style="text-align:left;">循环</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">do</td><td style="text-align:left;">运行</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">for</td><td style="text-align:left;">循环</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">break</td><td style="text-align:left;">跳出本层整个循环</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">continue</td><td style="text-align:left;">跳出本层当前循环</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">return</td><td style="text-align:left;">返回</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">assert</td><td style="text-align:left;">断言表达式是否为真</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">instanceof</td><td style="text-align:left;">判断某一个对象的类型是否继承自另一个类型中</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><p><strong>instanceof</strong></p><ul><li><code>instanceof</code>运算符的前一个操作数通常是一个引用类型变量，后一个操作数通常是一个类。</li><li>用于判断运算符前面的引用变量是否是运算符后面的类型，即是否是其自类型的实例。</li><li>判断类型：<code>boolean</code></li></ul><p><strong>案例</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 定义一个字符串类型的变量。</span></span>
<span class="line"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;字符串类型&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 判断变量\`s\`是否是\`String\`字符串类型</span></span>
<span class="line"><span class="token keyword">boolean</span> bool <span class="token operator">=</span> s <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果是：true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h2><table><thead><tr><th style="text-align:left;">标识符</th><th style="text-align:left;">说明</th><th style="text-align:left;">详情</th><th style="text-align:left;">最早版本</th><th style="text-align:left;">最后版本</th></tr></thead><tbody><tr><td style="text-align:left;">try</td><td style="text-align:left;">抛出异常</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">catch</td><td style="text-align:left;">捕获异常</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">finally</td><td style="text-align:left;">垃圾回收器</td><td style="text-align:left;">有没有异常都执行</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">throw</td><td style="text-align:left;">手动抛出异常对象</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">throws</td><td style="text-align:left;">声明一个方法中可能会抛出异常</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><h2 id="包相关" tabindex="-1"><a class="header-anchor" href="#包相关"><span>包相关</span></a></h2><table><thead><tr><th style="text-align:left;">标识符</th><th style="text-align:left;">说明</th><th style="text-align:left;">详情</th><th style="text-align:left;">最早版本</th><th style="text-align:left;">最后版本</th></tr></thead><tbody><tr><td style="text-align:left;">package</td><td style="text-align:left;">定义包</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">import</td><td style="text-align:left;">引入包</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h2><table><thead><tr><th style="text-align:left;">标识符</th><th style="text-align:left;">说明</th><th style="text-align:left;">详情</th><th style="text-align:left;">最早版本</th><th style="text-align:left;">最后版本</th></tr></thead><tbody><tr><td style="text-align:left;">byte</td><td style="text-align:left;">字节型</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">short</td><td style="text-align:left;">短整型</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">int</td><td style="text-align:left;">整型</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">long</td><td style="text-align:left;">长整型</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">float</td><td style="text-align:left;">单精度浮点</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">double</td><td style="text-align:left;">双精度浮点</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">char</td><td style="text-align:left;">字符型</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">boolean</td><td style="text-align:left;">布尔型</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><h2 id="变量引用" tabindex="-1"><a class="header-anchor" href="#变量引用"><span>变量引用</span></a></h2><table><thead><tr><th style="text-align:left;">标识符</th><th style="text-align:left;">说明</th><th style="text-align:left;">详情</th><th style="text-align:left;">最早版本</th><th style="text-align:left;">最后版本</th></tr></thead><tbody><tr><td style="text-align:left;">new</td><td style="text-align:left;">实例化对象</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">this</td><td style="text-align:left;">当前对象</td><td style="text-align:left;">本身调用者当前对象</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">super</td><td style="text-align:left;">引用基类（父类、超类）</td><td style="text-align:left;">父类对象的引用</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">void</td><td style="text-align:left;">无返回值</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">null</td><td style="text-align:left;">空值</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">true</td><td style="text-align:left;">真</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">false</td><td style="text-align:left;">假</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table>`,19)]))}const f=e(n,[["render",s]]),y=JSON.parse('{"path":"/software/Language-Java-JavaSE-%E5%85%B3%E9%94%AE%E5%AD%97.html","title":"Language - Java - Java SE - 关键字","lang":"zh-CN","frontmatter":{"title":"Language - Java - Java SE - 关键字","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2024-03-18T00:00:00.000Z","tag":["进度-已完成","知识总结"],"description":"文章摘要： 关键字是Java编程语言中的语法规则语句，具有特殊含义，用于定义程序的基本结构和元素。 访问修饰符 类、接口、方法、抽象、变量、代码块 流程控制 instanceof instanceof运算符的前一个操作数通常是一个引用类型变量，后一个操作数通常是一个类。 用于判断运算符前面的引用变量是否是运算符后面的类型，即是否是其自类型的实例。 判断...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Java - Java SE - 关键字\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Java-JavaSE-%E5%85%B3%E9%94%AE%E5%AD%97.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Java - Java SE - 关键字"}],["meta",{"property":"og:description","content":"文章摘要： 关键字是Java编程语言中的语法规则语句，具有特殊含义，用于定义程序的基本结构和元素。 访问修饰符 类、接口、方法、抽象、变量、代码块 流程控制 instanceof instanceof运算符的前一个操作数通常是一个引用类型变量，后一个操作数通常是一个类。 用于判断运算符前面的引用变量是否是运算符后面的类型，即是否是其自类型的实例。 判断..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Java-JavaSE-关键字.md","excerpt":"<p><strong>文章摘要：</strong> 关键字是Java编程语言中的语法规则语句，具有特殊含义，用于定义程序的基本结构和元素。</p>\\n"}');export{f as comp,y as data};
