import{_ as t,c as a,a as n,o as s}from"./app-D67BBu3k.js";const l={};function i(p,e){return s(),a("div",null,e[0]||(e[0]=[n(`<p><strong>文章摘要：</strong> 内置函数是python解释器在编写代码时自动导入的一些功能代码模块（即函数或方法），无需导入即可直接使用，默认导入到代码中的API。</p><ul><li>共有69个内置函数。</li></ul><h2 id="总览" tabindex="-1"><a class="header-anchor" href="#总览"><span>总览</span></a></h2><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"></th><th style="text-align:left;"></th><th style="text-align:left;"></th><th style="text-align:left;"></th></tr></thead><tbody><tr><td style="text-align:left;">abs()</td><td style="text-align:left;">delattr()</td><td style="text-align:left;">hash()</td><td style="text-align:left;">memoryview()</td><td style="text-align:left;">set()</td></tr><tr><td style="text-align:left;">all()</td><td style="text-align:left;">dict()</td><td style="text-align:left;">help()</td><td style="text-align:left;">min()</td><td style="text-align:left;">setattr()</td></tr><tr><td style="text-align:left;">any()</td><td style="text-align:left;">dir()</td><td style="text-align:left;">hex()</td><td style="text-align:left;">next()</td><td style="text-align:left;">slice()</td></tr><tr><td style="text-align:left;">ascii()</td><td style="text-align:left;">divmod()</td><td style="text-align:left;">id()</td><td style="text-align:left;">object()</td><td style="text-align:left;">sorted()</td></tr><tr><td style="text-align:left;">bin()</td><td style="text-align:left;">enumerate()</td><td style="text-align:left;">input()</td><td style="text-align:left;">oct()</td><td style="text-align:left;">staticmethod()</td></tr><tr><td style="text-align:left;">bool()</td><td style="text-align:left;">eval()</td><td style="text-align:left;">int()</td><td style="text-align:left;">open()</td><td style="text-align:left;">str()</td></tr><tr><td style="text-align:left;">breakpoint()</td><td style="text-align:left;">exec()</td><td style="text-align:left;">isinstance()</td><td style="text-align:left;">ord()</td><td style="text-align:left;">sum()</td></tr><tr><td style="text-align:left;">bytearray()</td><td style="text-align:left;">filter()</td><td style="text-align:left;">issubclass()</td><td style="text-align:left;">pow()</td><td style="text-align:left;">super()</td></tr><tr><td style="text-align:left;">bytes()</td><td style="text-align:left;">float()</td><td style="text-align:left;">iter()</td><td style="text-align:left;">print()</td><td style="text-align:left;">tuple()</td></tr><tr><td style="text-align:left;">callable()</td><td style="text-align:left;">format()</td><td style="text-align:left;">len()</td><td style="text-align:left;">property()</td><td style="text-align:left;">type()</td></tr><tr><td style="text-align:left;">chr()</td><td style="text-align:left;">frozenset()</td><td style="text-align:left;">list()</td><td style="text-align:left;">range()</td><td style="text-align:left;">vars()</td></tr><tr><td style="text-align:left;">classmethod()</td><td style="text-align:left;">getattr()</td><td style="text-align:left;">locals()</td><td style="text-align:left;">repr()</td><td style="text-align:left;">zip()</td></tr><tr><td style="text-align:left;">compile()</td><td style="text-align:left;">globals()</td><td style="text-align:left;">map()</td><td style="text-align:left;">reversed()</td><td style="text-align:left;">__import__()</td></tr><tr><td style="text-align:left;">complex()</td><td style="text-align:left;">hasattr()</td><td style="text-align:left;">max()</td><td style="text-align:left;">round()</td><td style="text-align:left;"></td></tr></tbody></table><p><strong>整数类型相关</strong></p><table><thead><tr><th style="text-align:left;">内置函数名</th><th style="text-align:left;">介绍</th></tr></thead><tbody><tr><td style="text-align:left;">abs(x)</td><td style="text-align:left;">将数值对象x转换成绝对值</td></tr><tr><td style="text-align:left;">pow(x,y)</td><td style="text-align:left;">输出x的y次方，求幂（指数）运算</td></tr><tr><td style="text-align:left;">int(x)</td><td style="text-align:left;">将x转换成整数</td></tr><tr><td style="text-align:left;">float(x)</td><td style="text-align:left;">将x转换成浮点数</td></tr><tr><td style="text-align:left;">complex(re,im)</td><td style="text-align:left;">输出一个带有实部re和虚部im的复数</td></tr><tr><td style="text-align:left;">round(x[,n])</td><td style="text-align:left;">x舍入到n位小数，半数值会舍入到偶数</td></tr></tbody></table><p><strong>序列类型</strong></p><table><thead><tr><th style="text-align:left;">内置函数名</th><th style="text-align:left;">介绍</th></tr></thead><tbody><tr><td style="text-align:left;">len(s)</td><td style="text-align:left;">获取对象s所拥有的元素个数</td></tr><tr><td style="text-align:left;">min(s)</td><td style="text-align:left;">获取对象s的最小的元素</td></tr><tr><td style="text-align:left;">max(s)</td><td style="text-align:left;">获取对象s的最大的元素</td></tr><tr><td style="text-align:left;">s.count(s)</td><td style="text-align:left;">获取x在对象s中出现的总次数</td></tr><tr><td style="text-align:left;">s.index(x[,i[,j]])</td><td style="text-align:left;">获取x在对象s首次出现的元素索引号（索引号在i到j区间之内）</td></tr><tr><td style="text-align:left;">s.sort(key=None,reverse=False)</td><td style="text-align:left;">排序，key的参数str.lower是全部字母小写，reverse是默认增序排序</td></tr><tr><td style="text-align:left;">s1=s.copy()</td><td style="text-align:left;">创建对象s的硬拷贝赋值给s1，等同于（s[:]）（创建重新赋值变量）</td></tr></tbody></table><h2 id="abs" tabindex="-1"><a class="header-anchor" href="#abs"><span>abs()</span></a></h2><blockquote><p>返回数的绝对值</p></blockquote><h2 id="all" tabindex="-1"><a class="header-anchor" href="#all"><span>all()</span></a></h2><blockquote><p>如果可迭代对象中的所有项均为 true，则返回 True。</p></blockquote><h2 id="any" tabindex="-1"><a class="header-anchor" href="#any"><span>any()</span></a></h2><blockquote><p>如果可迭代对象中的任何项为 true，则返回 True。</p></blockquote><h2 id="ascii" tabindex="-1"><a class="header-anchor" href="#ascii"><span>ascii()</span></a></h2><blockquote><p>返回对象的可读版本。用转义字符替换 none-ascii 字符。</p></blockquote><h2 id="bin" tabindex="-1"><a class="header-anchor" href="#bin"><span>bin()</span></a></h2><blockquote><p>返回数的二进制版本。</p></blockquote><h2 id="bool" tabindex="-1"><a class="header-anchor" href="#bool"><span>bool()</span></a></h2><blockquote><p>返回指定对象的布尔值。</p></blockquote><h2 id="breakpoint" tabindex="-1"><a class="header-anchor" href="#breakpoint"><span>breakpoint()</span></a></h2><p>==待完善==</p><h2 id="bytearray" tabindex="-1"><a class="header-anchor" href="#bytearray"><span>bytearray()</span></a></h2><blockquote><p>返回字节数组。</p></blockquote><h2 id="bytes" tabindex="-1"><a class="header-anchor" href="#bytes"><span>bytes()</span></a></h2><blockquote><p>返回字节对象。</p></blockquote><h2 id="callable" tabindex="-1"><a class="header-anchor" href="#callable"><span>callable()</span></a></h2><blockquote><p>如果指定的对象是可调用的，则返回 True，否则返回 False。</p></blockquote><h2 id="chr" tabindex="-1"><a class="header-anchor" href="#chr"><span>chr()</span></a></h2><blockquote><p>返回指定 Unicode 代码中的字符。</p></blockquote><h2 id="classmethod" tabindex="-1"><a class="header-anchor" href="#classmethod"><span>classmethod()</span></a></h2><blockquote><p>把方法转换为类方法。</p></blockquote><h2 id="compile" tabindex="-1"><a class="header-anchor" href="#compile"><span>compile()</span></a></h2><blockquote><p>把指定的源作为对象返回，准备执行。</p></blockquote><h2 id="complex" tabindex="-1"><a class="header-anchor" href="#complex"><span>complex()</span></a></h2><blockquote><p>返回复数。</p></blockquote><h2 id="delattr" tabindex="-1"><a class="header-anchor" href="#delattr"><span>delattr()</span></a></h2><blockquote><p>从指定的对象中删除指定的属性（属性或方法）。</p></blockquote><h2 id="dict" tabindex="-1"><a class="header-anchor" href="#dict"><span>dict()</span></a></h2><blockquote><p>返回字典（数组）。</p></blockquote><h2 id="dir" tabindex="-1"><a class="header-anchor" href="#dir"><span>dir()</span></a></h2><blockquote><p>返回指定对象的属性和方法的列表。</p></blockquote><h2 id="divmod" tabindex="-1"><a class="header-anchor" href="#divmod"><span>divmod()</span></a></h2><blockquote><p>当参数1除以参数2时，返回商和余数。</p></blockquote><h2 id="enumerate" tabindex="-1"><a class="header-anchor" href="#enumerate"><span>enumerate()</span></a></h2><blockquote><p>获取集合（例如元组）并将其作为枚举对象返回。</p></blockquote><h2 id="eval" tabindex="-1"><a class="header-anchor" href="#eval"><span>eval()</span></a></h2><blockquote><p>评估并执行表达式。</p></blockquote><h2 id="exec" tabindex="-1"><a class="header-anchor" href="#exec"><span>exec()</span></a></h2><blockquote><p>执行指定的代码（或对象）。</p></blockquote><h2 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>filter()</span></a></h2><blockquote><p>使用过滤器函数排除可迭代对象中的项目。</p></blockquote><h2 id="float" tabindex="-1"><a class="header-anchor" href="#float"><span>float()</span></a></h2><blockquote><p>返回浮点数。</p></blockquote><h2 id="format" tabindex="-1"><a class="header-anchor" href="#format"><span>format()</span></a></h2><blockquote><p>格式化指定值。</p></blockquote><h2 id="frozenset" tabindex="-1"><a class="header-anchor" href="#frozenset"><span>frozenset()</span></a></h2><blockquote><p>返回 frozenset 对象。</p></blockquote><h2 id="getattr" tabindex="-1"><a class="header-anchor" href="#getattr"><span>getattr()</span></a></h2><blockquote><p>返回指定属性的值（属性或方法）。</p></blockquote><h2 id="globals" tabindex="-1"><a class="header-anchor" href="#globals"><span>globals()</span></a></h2><blockquote><p>以字典返回当前全局符号表。</p></blockquote><h2 id="hasattr" tabindex="-1"><a class="header-anchor" href="#hasattr"><span>hasattr()</span></a></h2><blockquote><p>如果指定的对象拥有指定的属性（属性/方法），则返回 True。</p></blockquote><h2 id="hash" tabindex="-1"><a class="header-anchor" href="#hash"><span>hash()</span></a></h2><blockquote><p>返回指定对象的哈希值。</p></blockquote><h2 id="help" tabindex="-1"><a class="header-anchor" href="#help"><span>help()</span></a></h2><blockquote><p>执行内建的帮助系统。</p></blockquote><h2 id="hex" tabindex="-1"><a class="header-anchor" href="#hex"><span>hex()</span></a></h2><blockquote><p>把数字转换为十六进制值。</p></blockquote><h2 id="id" tabindex="-1"><a class="header-anchor" href="#id"><span>id()</span></a></h2><blockquote><p>返回对象的 id。</p></blockquote><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input"><span>input()</span></a></h2><blockquote><p><strong>说明</strong>：允许用户输入。</p><p><strong>注意</strong>：</p><ul><li>在输入之前程序会停在那里。</li><li>此输入语句需要提前编写提示，否则用户不知道要输入什么。</li></ul></blockquote><h2 id="int" tabindex="-1"><a class="header-anchor" href="#int"><span>int()</span></a></h2><blockquote><p>返回整数。</p></blockquote><h2 id="isinstance" tabindex="-1"><a class="header-anchor" href="#isinstance"><span>isinstance()</span></a></h2><blockquote><p>如果指定的对象是指定对象的实例，则返回 True。</p></blockquote><h2 id="issubclass" tabindex="-1"><a class="header-anchor" href="#issubclass"><span>issubclass()</span></a></h2><blockquote><p>如果指定的类是指定对象的子类，则返回 True。</p></blockquote><h2 id="iter" tabindex="-1"><a class="header-anchor" href="#iter"><span>iter()</span></a></h2><blockquote><p>返回迭代器对象。</p></blockquote><h2 id="len" tabindex="-1"><a class="header-anchor" href="#len"><span>len()</span></a></h2><blockquote><p>返回对象的长度。</p></blockquote><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>list()</span></a></h2><blockquote><p>返回列表。</p></blockquote><h2 id="locals" tabindex="-1"><a class="header-anchor" href="#locals"><span>locals()</span></a></h2><blockquote><p>返回当前本地符号表的更新字典。</p></blockquote><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>map()</span></a></h2><h2 id="max" tabindex="-1"><a class="header-anchor" href="#max"><span>max()</span></a></h2><h2 id="memoryview" tabindex="-1"><a class="header-anchor" href="#memoryview"><span>memoryview()</span></a></h2><h2 id="min" tabindex="-1"><a class="header-anchor" href="#min"><span>min()</span></a></h2><h2 id="next" tabindex="-1"><a class="header-anchor" href="#next"><span>next()</span></a></h2><h2 id="object" tabindex="-1"><a class="header-anchor" href="#object"><span>object()</span></a></h2><h2 id="oct" tabindex="-1"><a class="header-anchor" href="#oct"><span>oct()</span></a></h2><h2 id="open" tabindex="-1"><a class="header-anchor" href="#open"><span>open()</span></a></h2><blockquote><p><strong>打开文件</strong></p></blockquote><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># file参数是指定需要操作的文件名(可以指定文件路径)</span></span>
<span class="line"><span class="token comment"># mode参数是指定需要操作的方式</span></span>
<span class="line"><span class="token comment"># mode参数值:</span></span>
<span class="line"><span class="token comment"># &#39;r&#39;   只读  以只读方式打开已经存在的文件</span></span>
<span class="line"><span class="token comment"># &#39;w&#39;  只写  以可写方式打开文件，若指定文件不存在，则建立新文件</span></span>
<span class="line"><span class="token comment"># &#39;x&#39;  新建  以可写方式建立一个新文件</span></span>
<span class="line"><span class="token comment"># &#39;a&#39;  追加  以追加写入方式打开一个文件，若指定的文件不存在，则建立新文件，再追加写入</span></span>
<span class="line"><span class="token comment"># &#39;b&#39;  二进制  二进制模式</span></span>
<span class="line"><span class="token comment"># &#39;t&#39;  文本  文本模式</span></span>
<span class="line"><span class="token comment"># &#39;+&#39;  读写  以读写方式打开一个文件</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>关闭文件</strong></p></blockquote><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token builtin">open</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># close()方法可以关闭打开的文件</span></span>
<span class="line"><span class="token comment"># 如果文件不关闭会占电脑内存，无法保存到硬盘，导致断电后会数据丢失</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>写入文件</strong></p></blockquote><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token builtin">open</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># write(x)是open内置函数中的方法之一</span></span>
<span class="line"><span class="token comment"># f代表以可写方式打开的文件对象</span></span>
<span class="line"><span class="token comment"># write()方法把x内容写入文件后，返回写入的字节数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>读取文件</strong></p></blockquote><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token builtin">open</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span>size<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># size是可选参数，若指定读取字节数，则读取指定大小字节的内容，若没有指定，则读取全部内容</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>一次读取一行</strong></p></blockquote><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token builtin">open</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># s为可选参数，若设置指定大小的字节，则返回相应大小的字符串，若没有设定，则以行为单位返回一行字符串</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>以列表格式读取多行</strong></p></blockquote><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token builtin">open</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 把f文件中的所有文件变成以一行为一个元素，返回结果为一个列表</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>指定位置</strong></p></blockquote><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token builtin">open</span><span class="token punctuation">.</span>tell<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># x为文件中字节的下标</span></span>
<span class="line"><span class="token comment"># tell()方法返回当前文件可读的位置(字节数)</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">open</span><span class="token punctuation">.</span>seek<span class="token punctuation">(</span>offset<span class="token punctuation">[</span><span class="token punctuation">,</span>whence<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># seek()方法从新指定将要读写的的当前位置</span></span>
<span class="line"><span class="token comment"># offset参数设置位置的偏移量的字节数</span></span>
<span class="line"><span class="token comment"># whence参数可选，确定文件起计位置。默认值为SEEK_SET或者0，代表从文件的开始位置+偏移量来确定当前位置</span></span>
<span class="line"><span class="token comment">#   - SEEK_CUR或者1，代表当前位置起计</span></span>
<span class="line"><span class="token comment">#   - SEEK_END或者2，代表从文件的结尾起计。   </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>写入文件</strong></p></blockquote><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token builtin">open</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># s参数是需要写入的字符串</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">open</span><span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># s参数是一组可迭代数据类型，如列表</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ord" tabindex="-1"><a class="header-anchor" href="#ord"><span>ord()</span></a></h2><h2 id="pow" tabindex="-1"><a class="header-anchor" href="#pow"><span>pow()</span></a></h2><h2 id="print" tabindex="-1"><a class="header-anchor" href="#print"><span>print()</span></a></h2><blockquote><p><strong>说明</strong>：</p><ul><li>Python编程语言中用“print（）”内置函数进行输出内容。</li></ul></blockquote><blockquote><p>使用方法：</p><ul><li>输出字符串类型需要将其放在引号中间（单、双、三引号都可以）。</li><li>三引号可把编写代码分行编写，但依旧输出成一行。</li><li>此函数也可通过输出变量，通过变量输出不同的结果。</li><li>若使用逗号输出多个字符串，逗号实际输出时空格。</li><li>都为字符串时可以使用加号进行合并。</li></ul></blockquote><blockquote><p>参数：</p><ul><li>end=”内容”，可以输出在一行，并让下一个print()输出在同一行后面。</li><li>sep=”内容”，会以指定的字符来链接print中的内容。</li></ul></blockquote><h2 id="property" tabindex="-1"><a class="header-anchor" href="#property"><span>property()</span></a></h2><h2 id="range" tabindex="-1"><a class="header-anchor" href="#range"><span>range()</span></a></h2><h2 id="repr" tabindex="-1"><a class="header-anchor" href="#repr"><span>repr()</span></a></h2><h2 id="reversed" tabindex="-1"><a class="header-anchor" href="#reversed"><span>reversed()</span></a></h2><h2 id="round" tabindex="-1"><a class="header-anchor" href="#round"><span>round()</span></a></h2><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>set()</span></a></h2><h2 id="setattr" tabindex="-1"><a class="header-anchor" href="#setattr"><span>setattr()</span></a></h2><h2 id="slice" tabindex="-1"><a class="header-anchor" href="#slice"><span>slice()</span></a></h2><h2 id="sorted" tabindex="-1"><a class="header-anchor" href="#sorted"><span>sorted()</span></a></h2><h2 id="staticmethod" tabindex="-1"><a class="header-anchor" href="#staticmethod"><span>staticmethod()</span></a></h2><h2 id="str" tabindex="-1"><a class="header-anchor" href="#str"><span>str()</span></a></h2><h2 id="sum" tabindex="-1"><a class="header-anchor" href="#sum"><span>sum()</span></a></h2><h2 id="super" tabindex="-1"><a class="header-anchor" href="#super"><span>super()</span></a></h2><h2 id="tuple" tabindex="-1"><a class="header-anchor" href="#tuple"><span>tuple()</span></a></h2><h2 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>type()</span></a></h2><h2 id="vars" tabindex="-1"><a class="header-anchor" href="#vars"><span>vars()</span></a></h2><h2 id="zip" tabindex="-1"><a class="header-anchor" href="#zip"><span>zip()</span></a></h2><h2 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>__import__()</span></a></h2><h2 id="博主提示" tabindex="-1"><a class="header-anchor" href="#博主提示"><span>博主提示</span></a></h2><p>暂无</p>`,138)]))}const d=t(l,[["render",i]]),r=JSON.parse('{"path":"/software/Language-Python3-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html","title":"Language - Python 3 - 内置函数","lang":"zh-CN","frontmatter":{"title":"Language - Python 3 - 内置函数","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2023-08-10T00:00:00.000Z","tag":["进度-已停滞","查询手册"],"description":"文章摘要： 内置函数是python解释器在编写代码时自动导入的一些功能代码模块（即函数或方法），无需导入即可直接使用，默认导入到代码中的API。 共有69个内置函数。 总览 整数类型相关 序列类型 abs() 返回数的绝对值 all() 如果可迭代对象中的所有项均为 true，则返回 True。 any() 如果可迭代对象中的任何项为 true，则返回...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Python 3 - 内置函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Python3-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Python 3 - 内置函数"}],["meta",{"property":"og:description","content":"文章摘要： 内置函数是python解释器在编写代码时自动导入的一些功能代码模块（即函数或方法），无需导入即可直接使用，默认导入到代码中的API。 共有69个内置函数。 总览 整数类型相关 序列类型 abs() 返回数的绝对值 all() 如果可迭代对象中的所有项均为 true，则返回 True。 any() 如果可迭代对象中的任何项为 true，则返回..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"查询手册"}],["meta",{"property":"article:tag","content":"进度-已停滞"}],["meta",{"property":"article:published_time","content":"2023-08-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Python3-内置函数.md","excerpt":"<p><strong>文章摘要：</strong> 内置函数是python解释器在编写代码时自动导入的一些功能代码模块（即函数或方法），无需导入即可直接使用，默认导入到代码中的API。</p>\\n<ul>\\n<li>共有69个内置函数。</li>\\n</ul>\\n"}');export{d as comp,r as data};
