import{_ as t,c as o,a as i,o as l}from"./app-D67BBu3k.js";const r={};function a(n,e){return l(),o("div",null,e[0]||(e[0]=[i('<p><strong>文章摘要：</strong> MVVM（Model-View-ViewModel）软件架构，通过数据绑定和命令绑定将视图逻辑与业务逻辑分离，提高了代码的可测试性和可维护性。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>MVVM（Model-View-ViewModel）软件架构。</li><li>将应用程序分为三个核心部分：模型（Model）、视图（View）和视图模型（ViewModel）。</li><li>通过数据绑定和命令绑定将视图逻辑与业务逻辑分离，提高了代码的可测试性和可维护性。</li></ul><p>主要功能</p><p><strong>模型（Model）</strong></p><ul><li>表示应用程序的数据和业务逻辑。</li><li>管理数据的持久化和访问。</li></ul><p><strong>视图（View）</strong></p><ul><li>定义用户界面和用户交互。</li><li>通过数据绑定显示来自 ViewModel 的数据。</li><li>触发命令来通知 ViewModel 用户操作。</li></ul><p><strong>视图模型（ViewModel）</strong></p><ul><li>作为视图和模型之间的中介。</li><li>暴露数据和命令给视图。</li><li>处理用户输入和业务逻辑。</li></ul><p>注意事项</p><ul><li><strong>数据绑定</strong>：确保 ViewModel 和 View 之间的数据绑定是双向的，以便自动更新 UI。</li><li><strong>命令绑定</strong>：ViewModel 应该提供命令，视图可以通过这些命令触发操作。</li><li><strong>可测试性</strong>：ViewModel 应该设计成不依赖于视图，以便可以独立测试。</li><li><strong>内存管理</strong>：在 ViewModel 中管理数据上下文和资源，以避免内存泄漏。</li><li><strong>界面逻辑分离</strong>：保持视图尽可能简单，所有业务逻辑应该在 ViewModel 中处理。</li></ul><p>应用场景</p><ul><li><strong>富客户端应用</strong>：如使用WPF, Silverlight, 或 UWP的桌面应用。</li><li><strong>Web应用</strong>：现代JavaScript框架（如Knockout.js, Vue.js）支持MVVM模式。</li><li><strong>移动应用</strong>：使用MVVM Light或MVVM Cross的Xamarin.Forms应用。</li></ul><h2 id="技术架构图" tabindex="-1"><a class="header-anchor" href="#技术架构图"><span>技术架构图</span></a></h2><blockquote><p><img src="" alt=""></p></blockquote>',17)]))}const s=t(r,[["render",a]]),d=JSON.parse('{"path":"/software/Architecture-%E6%A8%A1%E5%9E%8B_%E8%A7%86%E5%9B%BE_ViewModel%E6%9E%B6%E6%9E%84.html","title":"Architecture - 模型&视图&ViewModel架构","lang":"zh-CN","frontmatter":{"title":"Architecture - 模型&视图&ViewModel架构","author":"魔术桌","cover":"","category":["软件程序/软件架构"],"date":"2024-12-02T00:00:00.000Z","tag":["进度-已完成","知识总结"],"description":"文章摘要： MVVM（Model-View-ViewModel）软件架构，通过数据绑定和命令绑定将视图逻辑与业务逻辑分离，提高了代码的可测试性和可维护性。 简介 简要说明 MVVM（Model-View-ViewModel）软件架构。 将应用程序分为三个核心部分：模型（Model）、视图（View）和视图模型（ViewModel）。 通过数据绑定和命令...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Architecture - 模型&视图&ViewModel架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Architecture-%E6%A8%A1%E5%9E%8B_%E8%A7%86%E5%9B%BE_ViewModel%E6%9E%B6%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Architecture - 模型&视图&ViewModel架构"}],["meta",{"property":"og:description","content":"文章摘要： MVVM（Model-View-ViewModel）软件架构，通过数据绑定和命令绑定将视图逻辑与业务逻辑分离，提高了代码的可测试性和可维护性。 简介 简要说明 MVVM（Model-View-ViewModel）软件架构。 将应用程序分为三个核心部分：模型（Model）、视图（View）和视图模型（ViewModel）。 通过数据绑定和命令..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-12-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Architecture-模型&视图&ViewModel架构.md","excerpt":"<p><strong>文章摘要：</strong> MVVM（Model-View-ViewModel）软件架构，通过数据绑定和命令绑定将视图逻辑与业务逻辑分离，提高了代码的可测试性和可维护性。</p>\\n"}');export{s as comp,d as data};
