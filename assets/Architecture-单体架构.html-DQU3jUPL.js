import{_ as e,c as o,a as r,o as a}from"./app-D67BBu3k.js";const i={};function n(l,t){return a(),o("div",null,t[0]||(t[0]=[r('<p><strong>文章摘要：</strong> 将所有的功能模块（如用户界面、业务逻辑、数据访问层等）集中在一个单一的代码库中，这些模块被打包成一个独立的单元进行部署。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>单体（Monolithic）软件架构。</li><li>将所有的功能模块（如用户界面、业务逻辑、数据访问层等）集中在一个单一的代码库中，这些模块被打包成一个独立的单元进行部署。</li><li>在单体架构中，所有的组件都运行在同一个进程中，通常部署在同一个服务器上。</li></ul><p>主要特点</p><ul><li><strong>集中管理</strong>：所有的功能模块都在一个代码库中，便于集中管理和维护。</li><li><strong>简化部署</strong>：整个应用作为一个单一的单元进行部署，简化了部署过程。</li><li><strong>易于开发</strong>：在项目初期，由于所有功能都在一个项目中，开发相对简单，不需要处理复杂的模块间通信问题。</li><li><strong>资源共享</strong>：所有模块共享同一个数据库和资源，易于实现资源共享和事务管理。</li></ul><p>注意事项</p><ul><li><strong>代码库膨胀</strong>：随着项目的发展，代码库可能会变得非常庞大，难以维护。</li><li><strong>耦合度高</strong>：模块之间可能存在高度耦合，修改一个模块可能会影响到其他模块。</li><li><strong>扩展性差</strong>：单体应用难以水平扩展，当需要处理更多请求时，可能需要更强的服务器资源。</li><li><strong>部署风险</strong>：每次更新都需要重新部署整个应用，可能会引入新的错误。</li><li><strong>技术栈受限</strong>：整个应用通常使用相同的技术栈，难以引入新的技术或框架。</li></ul><p>适用场景</p><ul><li><strong>小型项目</strong>：对于规模较小、需求明确且不太可能快速发展的项目，单体架构是一个简单有效的选择。</li><li><strong>初创公司</strong>：在初创公司中，快速推向市场是关键，单体架构可以快速实现和部署。</li><li><strong>资源有限</strong>：当团队资源有限，无法支持复杂的分布式系统时，单体架构可以简化开发和运维工作。</li><li><strong>简单应用</strong>：对于业务逻辑不复杂、用户量不大的应用，单体架构足以满足需求。</li></ul><h2 id="技术框架图" tabindex="-1"><a class="header-anchor" href="#技术框架图"><span>技术框架图</span></a></h2><blockquote><p><img src="" alt=""></p></blockquote>',12)]))}const s=e(i,[["render",n]]),p=JSON.parse('{"path":"/software/Architecture-%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84.html","title":"Architecture - 单体架构","lang":"zh-CN","frontmatter":{"title":"Architecture - 单体架构","author":"魔术桌","cover":"","category":["软件程序/软件架构"],"date":"2024-11-08T00:00:00.000Z","tag":["进度-已完成","知识总结"],"description":"文章摘要： 将所有的功能模块（如用户界面、业务逻辑、数据访问层等）集中在一个单一的代码库中，这些模块被打包成一个独立的单元进行部署。 简介 简要说明 单体（Monolithic）软件架构。 将所有的功能模块（如用户界面、业务逻辑、数据访问层等）集中在一个单一的代码库中，这些模块被打包成一个独立的单元进行部署。 在单体架构中，所有的组件都运行在同一个进程...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Architecture - 单体架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Architecture-%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Architecture - 单体架构"}],["meta",{"property":"og:description","content":"文章摘要： 将所有的功能模块（如用户界面、业务逻辑、数据访问层等）集中在一个单一的代码库中，这些模块被打包成一个独立的单元进行部署。 简介 简要说明 单体（Monolithic）软件架构。 将所有的功能模块（如用户界面、业务逻辑、数据访问层等）集中在一个单一的代码库中，这些模块被打包成一个独立的单元进行部署。 在单体架构中，所有的组件都运行在同一个进程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-11-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Architecture-单体架构.md","excerpt":"<p><strong>文章摘要：</strong> 将所有的功能模块（如用户界面、业务逻辑、数据访问层等）集中在一个单一的代码库中，这些模块被打包成一个独立的单元进行部署。</p>\\n"}');export{s as comp,p as data};
