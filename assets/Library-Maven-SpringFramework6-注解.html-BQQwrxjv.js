import{_ as n,c as e,a as s,o}from"./app-D67BBu3k.js";const t={};function l(c,a){return o(),e("div",null,a[0]||(a[0]=[s(`<p><strong>文章摘要：</strong> 摘要内容。</p><h2 id="标记为bean对象-在class上定义" tabindex="-1"><a class="header-anchor" href="#标记为bean对象-在class上定义"><span>标记为Bean对象 - 在class上定义</span></a></h2><h3 id="component" tabindex="-1"><a class="header-anchor" href="#component"><span><code>@Component</code></span></a></h3><blockquote><ul><li>标记为普通的类，并注册为Bean。可手动设置注册（添加）到IoC容器中时的名字，例如：<code>@Component(&quot;userDao&quot;)</code></li></ul></blockquote><h3 id="controller" tabindex="-1"><a class="header-anchor" href="#controller"><span><code>@Controller</code></span></a></h3><blockquote><ul><li>标记为“控制层”的类，并注册为Bean。例如：<code>@Controller(&quot;userDao&quot;)</code></li></ul></blockquote><h3 id="service" tabindex="-1"><a class="header-anchor" href="#service"><span><code>@Service</code></span></a></h3><blockquote><ul><li>标记为“业务逻辑层”的类，并注册为Bean。例如：<code>@Service(&quot;userDao&quot;)</code></li></ul></blockquote><h3 id="repository" tabindex="-1"><a class="header-anchor" href="#repository"><span><code>@Repository</code></span></a></h3><blockquote><ul><li>标记为“数据访问层”的类，并注册为Bean。例如：<code>@Repository(&quot;userDao&quot;)</code></li></ul></blockquote><h3 id="dependson" tabindex="-1"><a class="header-anchor" href="#dependson"><span><code>@DependsOn</code></span></a></h3><blockquote><ul><li>修改注册顺序，例如：<code>@DependsOn(&quot;userDao&quot;)</code>，将会在该对象后面加载（即依赖该对象）</li></ul></blockquote><h3 id="lazy" tabindex="-1"><a class="header-anchor" href="#lazy"><span><code>@Lazy</code></span></a></h3><blockquote><ul><li>懒加载，是否在被调用时才将bean加载到IoC容器中。</li></ul></blockquote><h2 id="注册对象-在java配置类中使用" tabindex="-1"><a class="header-anchor" href="#注册对象-在java配置类中使用"><span>注册对象 - 在Java配置类中使用</span></a></h2><h3 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span><code>@Configuration</code></span></a></h3><blockquote><ul><li></li></ul></blockquote><h3 id="bean" tabindex="-1"><a class="header-anchor" href="#bean"><span><code>@Bean</code></span></a></h3><blockquote><ul><li></li></ul></blockquote><h3 id="inport" tabindex="-1"><a class="header-anchor" href="#inport"><span><code>@Inport</code></span></a></h3><blockquote><ul><li></li></ul></blockquote><h2 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入"><span>依赖注入</span></a></h2><h3 id="autowired" tabindex="-1"><a class="header-anchor" href="#autowired"><span><code>@Autowired</code></span></a></h3><blockquote><ul><li>注入对象类型，告诉通过构造方法实例化时使用哪个构造方法，默认会根据类型去容器中找（byType），如果找到了多个会在根据名字找（byName）。</li></ul></blockquote><h3 id="qualifier" tabindex="-1"><a class="header-anchor" href="#qualifier"><span><code>@Qualifier</code></span></a></h3><blockquote><ul><li>手动指定在IoC容器中bean对象的名字，作为传入的数据，例如：<code>@Qualifier(&quot;userDao&quot;)</code></li></ul></blockquote><h2 id="请求url路径映射" tabindex="-1"><a class="header-anchor" href="#请求url路径映射"><span>请求URL路径映射</span></a></h2><blockquote><ul><li>在类和方法上使用。</li><li>指定请求的URL路径绑定到该“类”或“方法”上。</li></ul></blockquote><h3 id="requestmapping" tabindex="-1"><a class="header-anchor" href="#requestmapping"><span><code>@RequestMapping()</code></span></a></h3><blockquote><ul><li>请求路径映射，写在Controller的类名上或方法上</li></ul></blockquote><p>参数</p><blockquote><ul><li><code>value</code>：请求URL映射。</li><li><code>method</code>：请求方式。</li><li><code>params</code>：设置请求参数，是否“必须传值”和“默认值”。<code>params={&quot;&lt;参数名&gt;=123&quot;, !&quot;&lt;参数名&gt;&quot;, ...}</code>。</li><li><code>headers</code>：设置请求头参数。</li><li><code>consumes</code>：请求的内容类型必须为指定值。</li></ul></blockquote><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>   <span class="token comment">// 指定请求的URL路径绑定到该“类对象”或“方法”上。</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>   <span class="token comment">// 指定请求的URL路径绑定到该“类对象”或“方法”上。</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;/logon&quot;</span><span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name=小明&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// 指定请求的URL路径绑定到该“类对象”或“方法”上。</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logon</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="请求参数映射" tabindex="-1"><a class="header-anchor" href="#请求参数映射"><span>请求参数映射</span></a></h2><blockquote><ul><li>在方法/函数上使用。</li></ul></blockquote><h3 id="requestparam" tabindex="-1"><a class="header-anchor" href="#requestparam"><span><code>@RequestParam</code></span></a></h3><blockquote><ul><li><code>@RequestParam(value, required, defaultValue)</code>：GET请求，接收普通的URL中的数据。</li></ul></blockquote><h3 id="pathvariable" tabindex="-1"><a class="header-anchor" href="#pathvariable"><span><code>@PathVariable</code></span></a></h3><blockquote><ul><li><code>@PathVariable(value, required, defaultValue)</code>：GET请求，接收REST风格的URL中的数据。</li></ul></blockquote><h3 id="requestbody" tabindex="-1"><a class="header-anchor" href="#requestbody"><span><code>@RequestBody</code></span></a></h3><blockquote><ul><li><code>@RequestBody</code>：POST请求，body请求体里面的数据，如JSON。</li></ul></blockquote><h3 id="requestheader" tabindex="-1"><a class="header-anchor" href="#requestheader"><span><code>@RequestHeader</code></span></a></h3><blockquote><ul><li><code>@RequestHeader(value, required, defaultValue)</code>：获取HTTP协议的请求头中的参数。</li></ul></blockquote><h3 id="cookievalue" tabindex="-1"><a class="header-anchor" href="#cookievalue"><span><code>@CookieValue</code></span></a></h3><blockquote><ul><li><code>@CookieValue(value, required, defaultValue)</code>：获取cookie中的值。</li></ul></blockquote><p>参数</p><blockquote><ul><li><code>value</code>：手动指定传入的实参名称，默认值是Java形参名称一样。</li><li><code>required</code>：是否必须传入值，<code>true</code>必须传值&lt;默认&gt;、<code>false</code>允许为空。</li><li><code>defaultValue</code>：默认值，当参数为null时自动设置为默认值。建议使用包装类。</li></ul></blockquote><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminController</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 普通的URL</span></span>
<span class="line">    <span class="token comment">// URL：http://127.0.0.1:8080/web/logon?id=123&amp;name=小明</span></span>
<span class="line">    <span class="token comment">// 手动指定请求url绑定到该方法</span></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/logon&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// GET请求，接收普通的URL中的数据，并手动指定传入的实参名称与java形参名称绑定</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logon</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// REST风格的URL</span></span>
<span class="line">    <span class="token comment">// URL：http://127.0.0.1:8080/web/logon/123/小明</span></span>
<span class="line">    <span class="token comment">// 手动指定请求url绑定到该方法，通过\`{}\`占位符绑定</span></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/login/{id}/{name}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// GET请求，接收REST风格的URL中的数据，并手动指定传入的实参名称与java形参名称绑定</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="请求数据" tabindex="-1"><a class="header-anchor" href="#请求数据"><span>请求数据</span></a></h2><blockquote><ul><li>在成员变量和方法上定义。</li></ul></blockquote><h3 id="value" tabindex="-1"><a class="header-anchor" href="#value"><span><code>@Value</code></span></a></h3><blockquote><ul><li>注入基本类型，一般用于读取配置文件、手动传入具体参数。例如：<code>@Value(&quot;小明&quot;)</code>、<code>@Value(&quot;\${mysql.password}&quot;)</code></li></ul></blockquote><h3 id="required" tabindex="-1"><a class="header-anchor" href="#required"><span><code>@Required</code></span></a></h3><blockquote><ul><li>适用于bean属性setter方法显式赋值或自动注入值。</li></ul></blockquote><h2 id="响应数据" tabindex="-1"><a class="header-anchor" href="#响应数据"><span>响应数据</span></a></h2><blockquote><ul><li>写在方法上。</li></ul></blockquote><h3 id="responsebody" tabindex="-1"><a class="header-anchor" href="#responsebody"><span><code>@ResponseBody</code></span></a></h3><p>响应数据</p><h2 id="bean对象的回调函数" tabindex="-1"><a class="header-anchor" href="#bean对象的回调函数"><span>bean对象的回调函数</span></a></h2><blockquote><ul><li>在方法上定义。</li></ul></blockquote><h3 id="postconstruct" tabindex="-1"><a class="header-anchor" href="#postconstruct"><span><code>@PostConstruct</code></span></a></h3><blockquote><ul><li>初始化回调，创建时执行方法。</li></ul></blockquote><h3 id="predestroy" tabindex="-1"><a class="header-anchor" href="#predestroy"><span><code>@PreDestroy</code></span></a></h3><blockquote><ul><li>销毁时回调，销毁前执行该方法。</li></ul></blockquote>`,66)]))}const i=n(t,[["render",l]]),u=JSON.parse('{"path":"/software/Library-Maven-SpringFramework6-%E6%B3%A8%E8%A7%A3.html","title":"Library - Maven - SpringFramework 6 - 注解","lang":"zh-CN","frontmatter":{"title":"Library - Maven - SpringFramework 6 - 注解","author":"魔术桌","cover":"","category":["软件程序/类库"],"date":"2024-12-04T00:00:00.000Z","tag":["进度-待完善","查询手册"],"description":"文章摘要： 摘要内容。 标记为Bean对象 - 在class上定义 @Component 标记为普通的类，并注册为Bean。可手动设置注册（添加）到IoC容器中时的名字，例如：@Component(\\"userDao\\") @Controller 标记为“控制层”的类，并注册为Bean。例如：@Controller(\\"userDao\\") @Service ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Library - Maven - SpringFramework 6 - 注解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Library-Maven-SpringFramework6-%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Library - Maven - SpringFramework 6 - 注解"}],["meta",{"property":"og:description","content":"文章摘要： 摘要内容。 标记为Bean对象 - 在class上定义 @Component 标记为普通的类，并注册为Bean。可手动设置注册（添加）到IoC容器中时的名字，例如：@Component(\\"userDao\\") @Controller 标记为“控制层”的类，并注册为Bean。例如：@Controller(\\"userDao\\") @Service ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"查询手册"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-12-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Library-Maven-SpringFramework6-注解.md","excerpt":"<p><strong>文章摘要：</strong> 摘要内容。</p>\\n"}');export{i as comp,u as data};
