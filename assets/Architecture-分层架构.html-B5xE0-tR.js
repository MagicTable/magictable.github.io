import{_ as t,c as o,a as i,o as a}from"./app-D67BBu3k.js";const r={};function l(n,e){return a(),o("div",null,e[0]||(e[0]=[i('<p><strong>文章摘要：</strong> 摘要内容。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>分层（Layered）软件架构。</li><li>将系统划分为几个层次，每个层次负责不同的功能。</li></ul><p>通常包括以下几层：</p><ul><li><strong>表示层（Presentation Layer）</strong>：负责与用户交互，展示数据和接收用户输入。</li><li><strong>业务逻辑层（Business Logic Layer）</strong>：包含应用程序的核心功能，处理业务规则和逻辑。</li><li><strong>数据访问层（Data Access Layer）</strong>：负责与数据库或其他数据源交互，进行数据持久化操作。</li><li><strong>数据层（Data Layer）</strong>：存储数据的层，通常是数据库或文件系统。</li></ul><p>主要功能</p><ul><li><strong>分离关注点</strong>：每一层专注于特定的功能，使得系统更易于理解和维护。</li><li><strong>可复用性</strong>：各层可以独立开发和测试，提高了代码的复用性。</li><li><strong>易于替换</strong>：由于各层的独立性，可以在不影响其他层的情况下替换某一层的技术或实现。</li><li><strong>易于扩展</strong>：可以单独扩展某一层以应对系统负载的增加。</li></ul><p>注意事项</p><ul><li><strong>避免跨层调用</strong>：应严格遵守分层架构的规则，避免跨层直接调用，以保持层的独立性。</li><li><strong>控制层间依赖</strong>：通常上层依赖于下层，但下层不应依赖于上层。</li><li><strong>性能考虑</strong>：过多的层次可能会导致性能下降，因为每次请求都需要通过所有层。</li><li><strong>事务管理</strong>：跨层的事务管理需要谨慎处理，以确保数据的一致性。</li></ul><p>适用场景</p><ul><li><strong>中等规模到大型项目</strong>：分层架构适合于规模较大、需要长期维护的项目。</li><li><strong>需求明确的项目</strong>：当项目的需求和业务流程相对稳定时，分层架构能够提供良好的结构和支持。</li><li><strong>多种客户端访问</strong>：当系统需要支持多种客户端（如Web、移动端等）时，分层架构能够很好地分离用户界面和业务逻辑。</li><li><strong>需要高度模块化的系统</strong>：分层架构有助于实现模块化，使得系统更易于管理和维护。</li></ul><h2 id="技术框架图" tabindex="-1"><a class="header-anchor" href="#技术框架图"><span>技术框架图</span></a></h2><blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d161e80eeb0b89db8c9272cb2594263e.png" alt=""></p></blockquote><h2 id="规范要求" tabindex="-1"><a class="header-anchor" href="#规范要求"><span>规范要求</span></a></h2><p>在实际的工作之中，针对与简单java类的开发给出如下的要求：</p><ol><li>考虑到日后程序有可能出现的分布式应用问题，因此简单java类必须要实现<code>java.io.Serializable</code>接口。</li><li>简单java类的名称必须与表名称保持一致。</li></ol><ul><li>例如：表名是user，则类名称为User。</li></ul><ol start="3"><li>类中的属性不允许使用基本数据类型，都必须使用基本数据类型的包装类。</li></ol><ul><li>基本数据类型的数值默认值是<code>0</code>,而包装类的默认值是<code>null</code>。</li></ul><ol start="4"><li>类中的属性必须使用<code>private</code>关键字进行封装，封装后的属性必须提供有<code>getter</code>和<code>setter</code>方法。</li><li>类中可以定义有多个构造方法，但必须保留有一个无参构造方法。</li></ol><p>对于数据层的接口给出如下的开发要求：</p><ol><li>数据层用于操作数据，因此需要将代码保存到dao包目录下。</li><li>不同的数据表的操作有可能使用不同的数据层开发，因此数据层的文件名要针对于数据表进行命名。</li></ol><ul><li>例如：user表，数据层的接口应该命名为<code>IUserDAO</code>。</li></ul><ol start="3"><li>对于整个数据层的开发严格来讲就只有两类功能：数据更新、数据查询。</li></ol><ul><li>数据更新：该类方法要以<code>do</code>开头的形式命名，如：doUpdate()、doUser()。</li><li>查询表中数据：该类方法要以<code>find</code>开头的形式命名，如：findById()、findByName()、findAll()。</li><li>统计表中数据：该类方法要以<code>get</code>开头的形式命名，如：getAllCount()、</li></ul>',26)]))}const s=t(r,[["render",l]]),d=JSON.parse('{"path":"/software/Architecture-%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84.html","title":"Architecture - 分层架构","lang":"zh-CN","frontmatter":{"title":"Architecture - 分层架构","author":"魔术桌","cover":"","category":["软件程序/软件架构"],"date":"2024-06-25T00:00:00.000Z","tag":["进度-已完成","知识总结"],"description":"文章摘要： 摘要内容。 简介 简要说明 分层（Layered）软件架构。 将系统划分为几个层次，每个层次负责不同的功能。 通常包括以下几层： 表示层（Presentation Layer）：负责与用户交互，展示数据和接收用户输入。 业务逻辑层（Business Logic Layer）：包含应用程序的核心功能，处理业务规则和逻辑。 数据访问层（Data...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Architecture - 分层架构\\",\\"image\\":[\\"https://i-blog.csdnimg.cn/blog_migrate/d161e80eeb0b89db8c9272cb2594263e.png\\"],\\"datePublished\\":\\"2024-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Architecture-%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Architecture - 分层架构"}],["meta",{"property":"og:description","content":"文章摘要： 摘要内容。 简介 简要说明 分层（Layered）软件架构。 将系统划分为几个层次，每个层次负责不同的功能。 通常包括以下几层： 表示层（Presentation Layer）：负责与用户交互，展示数据和接收用户输入。 业务逻辑层（Business Logic Layer）：包含应用程序的核心功能，处理业务规则和逻辑。 数据访问层（Data..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i-blog.csdnimg.cn/blog_migrate/d161e80eeb0b89db8c9272cb2594263e.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Architecture-分层架构.md","excerpt":"<p><strong>文章摘要：</strong> 摘要内容。</p>\\n"}');export{s as comp,d as data};
