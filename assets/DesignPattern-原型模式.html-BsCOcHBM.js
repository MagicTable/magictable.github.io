import{_ as s,c as a,a as e,o as t}from"./app-D67BBu3k.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<p><strong>文章摘要：</strong> 创建型设计模式，通过复制现有的对象来创建新的对象，而不是通过传统的构造函数来创建。。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要总结</p><ul><li>原型模式（Prototype Pattern）是一种创建型设计模式。</li><li>通过复制现有的对象来创建新的对象，而不是通过传统的构造函数来创建。</li><li>可以绕过构造函数的约束，并允许动态地创建对象，即使它们的类型在编译时未知。</li></ul><p>主要功能</p><ul><li><strong>创建新对象</strong>：原型模式允许通过复制现有的对象（原型）来创建新的对象，而不是通过传统的构造函数。</li><li><strong>避免构造函数约束</strong>：使用原型模式，可以绕过构造函数的约束，例如，当构造函数的参数复杂或者创建对象的过程需要很多初始化步骤时。</li><li><strong>减少创建成本</strong>：如果创建一个对象是一个高成本的操作（例如，需要从数据库加载大量数据），通过克隆现有对象可以减少这些成本。</li><li><strong>保持对象状态</strong>：原型模式允许在创建新对象时保留原始对象的状态。这对于需要复制对象当前状态的情况非常有用。</li><li><strong>实现动态绑定</strong>：原型模式允许在运行时动态地选择创建对象的具体类型，这对于那些在编译时无法确定对象类型的情况非常有用。</li><li><strong>简化对象创建逻辑</strong>：通过提供一个统一的克隆接口，可以简化对象的创建逻辑，使得客户端代码不需要知道如何创建对象的具体细节。</li></ul><p>注意事项</p><ul><li><strong>实现Cloneable接口</strong>：在Java中，要实现克隆功能，类必须实现<code>Cloneable</code>接口，这是一个标记接口，表明该类的对象是可克隆的。</li><li><strong>重写clone方法</strong>：实现<code>Cloneable</code>接口后，还需要重写<code>clone()</code>方法，以提供具体的克隆逻辑。如果不重写，默认的<code>clone()</code>方法是受保护的，无法在类外部调用。</li><li><strong>克隆复杂对象</strong>：如果对象图中包含循环引用或者包含不可克隆的对象（如文件句柄、线程等），实现克隆可能会变得复杂。</li><li><strong>性能考虑</strong>：克隆操作可能会消耗大量资源，特别是进行深拷贝时。因此，在设计时需要考虑克隆操作的频率和成本。</li><li><strong>保持一致性</strong>：确保原型对象的状态在任何时候都是一致的，以避免克隆出无效或不一致的对象。</li><li><strong>克隆方法可见性</strong>：通常，<code>clone()</code>方法应该被声明为<code>public</code>，以便客户端代码可以调用它。</li><li><strong>异常处理</strong>：在<code>clone()</code>方法中，应该处理好可能抛出的异常，特别是当涉及到I/O操作（如序列化）时。</li><li><strong>避免滥用</strong>：原型模式虽然方便，但并不适用于所有情况。如果对象的创建逻辑很简单，使用构造函数可能更直接、更清晰。</li><li><strong>遵守设计原则</strong>：在使用原型模式时，仍然需要遵守单一职责原则、开闭原则等设计原则，确保代码的可维护性和可扩展性。</li><li><strong>线程安全</strong>：如果原型对象是多线程环境下共享的，需要确保克隆操作的线程安全性。</li></ul><p>适用场景</p><ul><li><strong>创建成本较高的对象</strong>：如果创建一个对象的过程非常复杂且耗时，可以考虑使用原型模式，通过复制已有对象来避免重复的创建过程。</li><li><strong>系统中需要大量相似对象</strong>：当系统中需要大量相似的对象，并且这些对象的状态只有少量差异时，原型模式可以减少创建对象的开销。</li><li><strong>避免构造函数的约束</strong>：有时候，构造函数的参数列表可能非常复杂，或者构造函数无法满足某些需求（如需要创建一个与现有对象状态完全一致的新对象），原型模式可以绕过构造函数的这些限制。</li><li><strong>实例化具体类时复杂或者不可能</strong>：如果类的构造过程涉及到很多外部资源的配置或者初始化，而这些操作不适合在构造函数中完成，原型模式可以简化这一过程。</li><li><strong>保护性复制</strong>：当你需要保护一个对象不被外部直接修改时，可以通过返回一个对象的副本来代替直接返回对象本身。</li><li><strong>动态增加或减少产品类</strong>：在运行时动态地增加或减少产品类的情况下，原型模式可以很方便地实现这一点，而不需要修改已有代码。</li><li><strong>类的初始化需要依赖外部资源</strong>：如果类的初始化需要依赖外部资源，而这些资源在构造函数中难以获取，原型模式可以通过复制已初始化的对象来避免这些问题。</li><li><strong>对象状态不可变</strong>：如果对象一旦创建就不应该被修改，或者修改的成本很高，可以使用原型模式来创建不可变对象。</li><li><strong>性能优化</strong>：在某些情况下，通过原型模式复制对象可能比通过常规的new操作创建对象更高效。</li><li><strong>框架和库的设计</strong>：在框架和库的设计中，原型模式可以提供一种灵活的方式来扩展和定制功能，而不需要修改框架或库的内部实现。</li></ul><h2 id="java-8" tabindex="-1"><a class="header-anchor" href="#java-8"><span>Java 8</span></a></h2><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 定义一个可克隆的Person类</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hobbies<span class="token punctuation">;</span> <span class="token comment">// 假设每个人都有一个兴趣列表</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 构造函数</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hobbies<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> hobbies<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 覆盖clone方法，实现深拷贝</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token class-name">Person</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 首先调用super.clone()来克隆基本类型和不可变类型的字段</span></span>
<span class="line">        <span class="token class-name">Person</span> cloned <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 然后对可变类型的字段进行深拷贝</span></span>
<span class="line">        cloned<span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> cloned<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 省略getter和setter方法...</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Person{&quot;</span> <span class="token operator">+</span></span>
<span class="line">                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span></span>
<span class="line">                <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span></span>
<span class="line">                <span class="token string">&quot;, hobbies=&quot;</span> <span class="token operator">+</span> hobbies <span class="token operator">+</span></span>
<span class="line">                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrototypePatternExample</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 创建一个原型对象</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hobbies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        hobbies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Reading&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        hobbies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Gaming&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Person</span> prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> hobbies<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 使用原型模式创建一个新的Person对象</span></span>
<span class="line">            <span class="token class-name">Person</span> johnClone <span class="token operator">=</span> prototype<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            johnClone<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Jane Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 修改克隆对象的属性</span></span>
<span class="line">            johnClone<span class="token punctuation">.</span><span class="token function">getHobbies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Swimming&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 修改克隆对象的兴趣列表</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 打印原始对象和克隆对象的信息，以验证深拷贝</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Prototype: &quot;</span> <span class="token operator">+</span> prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Clone: &quot;</span> <span class="token operator">+</span> johnClone<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注释</p><ul><li>在这个例子中，<code>Person</code>类实现了<code>Cloneable</code>接口，这是Java中实现克隆功能的标准方式。我们覆盖了<code>clone</code>方法，并在其中调用了<code>super.clone()</code>来克隆基本类型和不可变类型的字段。对于可变类型的字段（在这个例子中是<code>hobbies</code>列表），我们进行了深拷贝，以确保原始对象和克隆对象在内存中是完全独立的。</li><li>在<code>main</code>方法中，我们创建了一个原型对象<code>prototype</code>，然后通过调用其<code>clone</code>方法创建了一个新的<code>Person</code>对象<code>johnClone</code>。我们修改了克隆对象的<code>name</code>属性和<code>hobbies</code>列表，然后打印出原始对象和克隆对象的信息，以验证深拷贝是否成功。</li><li>注意：在实际应用中，可能需要处理更复杂的对象图，包括多层嵌套的对象和循环引用，这时深拷贝的实现会更复杂。此外，如果对象图中包含不可克隆的对象（例如，<code>Thread</code>），则还需要特别处理。</li></ul></div>`,14)]))}const i=s(p,[["render",o]]),u=JSON.parse('{"path":"/software/DesignPattern-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html","title":"DesignPattern - 原型模式","lang":"zh-CN","frontmatter":{"title":"DesignPattern - 原型模式","author":"魔术桌","cover":"","category":["软件程序/设计模式"],"date":"2024-11-18T00:00:00.000Z","tag":["进度-已完成","知识总结"],"description":"文章摘要： 创建型设计模式，通过复制现有的对象来创建新的对象，而不是通过传统的构造函数来创建。。 简介 简要总结 原型模式（Prototype Pattern）是一种创建型设计模式。 通过复制现有的对象来创建新的对象，而不是通过传统的构造函数来创建。 可以绕过构造函数的约束，并允许动态地创建对象，即使它们的类型在编译时未知。 主要功能 创建新对象：原型...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DesignPattern - 原型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-03T09:56:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/DesignPattern-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"DesignPattern - 原型模式"}],["meta",{"property":"og:description","content":"文章摘要： 创建型设计模式，通过复制现有的对象来创建新的对象，而不是通过传统的构造函数来创建。。 简介 简要总结 原型模式（Prototype Pattern）是一种创建型设计模式。 通过复制现有的对象来创建新的对象，而不是通过传统的构造函数来创建。 可以绕过构造函数的约束，并允许动态地创建对象，即使它们的类型在编译时未知。 主要功能 创建新对象：原型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T09:56:57.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-11-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-03T09:56:57.000Z"}]]},"git":{"updatedTime":1759485417000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/DesignPattern-原型模式.md","excerpt":"<p><strong>文章摘要：</strong> 创建型设计模式，通过复制现有的对象来创建新的对象，而不是通过传统的构造函数来创建。。</p>\\n"}');export{i as comp,u as data};
