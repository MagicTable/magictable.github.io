import{_ as s,c as a,a as t,o as e}from"./app-D67BBu3k.js";const p={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<p><strong>文章摘要：</strong> 享元模式使用总结。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>享元模式（Flyweight Pattern）是一种结构型设计模式。</li><li>通过共享尽可能多的相似对象来减少内存的使用，提高程序的性能。</li></ul><p>主要功能</p><ul><li>减少创建对象的数量，减少内存占用和提高性能。</li><li>提供共享的接口，使得相同的对象可以被复用。</li></ul><p>注意事项</p><ul><li>确保对象是不可变对象，以保证共享的安全性。</li><li>分离内部状态（固有属性）和外部状态（可变属性），内部状态可以被共享，外部状态则不可以。</li><li>需要管理对象池，以实现对象的共享。</li></ul><p>适用场景</p><ul><li>当一个程序中使用了大量的对象。</li><li>这些对象造成了很大的内存开销。</li><li>这些对象的大多数状态可以外部化。</li><li>这些对象是不可变的。</li></ul><h2 id="java-8" tabindex="-1"><a class="header-anchor" href="#java-8"><span>Java 8</span></a></h2><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 享元接口，定义了享元对象需要实现的操作</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> extrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 具体的享元类，实现了享元接口</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ConcreteFlyweight</span> <span class="token keyword">implements</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 内部状态，即享元对象的固有属性，可以被共享</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> intrinsicState<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 构造方法，初始化内部状态</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ConcreteFlyweight</span><span class="token punctuation">(</span><span class="token class-name">String</span> intrinsicState<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>intrinsicState <span class="token operator">=</span> intrinsicState<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 实现operation方法，使用外部状态</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> extrinsicState<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Intrinsic State = &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>intrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Extrinsic State = &quot;</span> <span class="token operator">+</span> extrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 享元工厂，负责创建和管理享元对象</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">FlyweightFactory</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 享元池，用于存储享元对象，以便复用</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Flyweight</span><span class="token punctuation">&gt;</span></span> flyweights <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取享元对象的方法</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Flyweight</span> <span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 如果享元池中存在该对象，则直接返回</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>flyweights<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> flyweights<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 如果享元池中不存在该对象，则创建一个新的享元对象，并放入享元池中</span></span>
<span class="line">            <span class="token class-name">Flyweight</span> flyweight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteFlyweight</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            flyweights<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> flyweight<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> flyweight<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 客户端代码，使用享元模式</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyweightPatternDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 创建享元工厂</span></span>
<span class="line">        <span class="token class-name">FlyweightFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlyweightFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 通过享元工厂获取享元对象</span></span>
<span class="line">        <span class="token class-name">Flyweight</span> flyweight1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Flyweight</span> flyweight2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 操作享元对象，传入外部状态</span></span>
<span class="line">        flyweight1<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token string">&quot;Extrinsic State A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        flyweight2<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token string">&quot;Extrinsic State B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 再次获取享元对象，此时将复用已存在的享元对象</span></span>
<span class="line">        <span class="token class-name">Flyweight</span> flyweight3 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        flyweight3<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token string">&quot;Extrinsic State C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 检查flyweight1和flyweight3是否为同一个对象</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flyweight1 <span class="token operator">==</span> flyweight3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注释</p><ul><li>在这个例子中，我们定义了一个享元接口<code>Flyweight</code>和一个具体的享元类<code>ConcreteFlyweight</code>。享元工厂<code>FlyweightFactory</code>负责创建和管理享元对象，并使用一个<code>HashMap</code>作为享元池来存储共享的享元对象。</li><li>客户端代码通过享元工厂获取享元对象，并传入外部状态进行操作。当请求相同的享元对象时，享元工厂将返回已经创建的享元对象，从而实现对象的共享。在最后，我们检查了两个引用是否指向同一个对象，以验证享元对象的共享。</li></ul></div>`,14)]))}const o=s(p,[["render",l]]),u=JSON.parse('{"path":"/software/DesignPattern-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html","title":"DesignPattern - 享元模式","lang":"zh-CN","frontmatter":{"title":"DesignPattern - 享元模式","author":"魔术桌","cover":"","category":["软件程序/设计模式"],"date":"2024-11-18T00:00:00.000Z","tag":["进度-已完成","知识总结"],"description":"文章摘要： 享元模式使用总结。 简介 简要说明 享元模式（Flyweight Pattern）是一种结构型设计模式。 通过共享尽可能多的相似对象来减少内存的使用，提高程序的性能。 主要功能 减少创建对象的数量，减少内存占用和提高性能。 提供共享的接口，使得相同的对象可以被复用。 注意事项 确保对象是不可变对象，以保证共享的安全性。 分离内部状态（固有属...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DesignPattern - 享元模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-03T09:56:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/DesignPattern-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"DesignPattern - 享元模式"}],["meta",{"property":"og:description","content":"文章摘要： 享元模式使用总结。 简介 简要说明 享元模式（Flyweight Pattern）是一种结构型设计模式。 通过共享尽可能多的相似对象来减少内存的使用，提高程序的性能。 主要功能 减少创建对象的数量，减少内存占用和提高性能。 提供共享的接口，使得相同的对象可以被复用。 注意事项 确保对象是不可变对象，以保证共享的安全性。 分离内部状态（固有属..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T09:56:57.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-11-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-03T09:56:57.000Z"}]]},"git":{"updatedTime":1759485417000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/DesignPattern-享元模式.md","excerpt":"<p><strong>文章摘要：</strong> 享元模式使用总结。</p>\\n"}');export{o as comp,u as data};
