import{_ as n,c as s,a as e,o as t}from"./app-D67BBu3k.js";const o={};function i(p,a){return t(),s("div",null,a[0]||(a[0]=[e(`<p><strong>文章摘要：</strong> 如何将Python代码集成到Java项目中，实现两种语言共存。</p><h2 id="整体打包分发方案的目录结构设计" tabindex="-1"><a class="header-anchor" href="#整体打包分发方案的目录结构设计"><span>整体打包分发方案的目录结构设计</span></a></h2><ul><li>建议将Python虚拟环境、源码与Java代码按以下结构组织，确保跨平台兼容性：</li></ul><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt"><pre><code class="language-txt"><span class="line">项目根目录/</span>
<span class="line">├── src/                   # Java项目目录</span>
<span class="line">│   └── main/</span>
<span class="line">│       └── java/          # Java源码（.java文件）</span>
<span class="line">│       └── resources/     # 静态资源文件。</span>
<span class="line">├── python/                # Python项目目录</span>
<span class="line">│   ├── venv/              # 虚拟环境（含解释器和依赖）</span>
<span class="line">│   └── src/               # Python源码（.py文件）</span>
<span class="line">│   ├── requirements.txt/  # Pyhton第三方类库依赖清单</span>
<span class="line">├── target/                # 构建输出目录（如JAR包）</span>
<span class="line">└── pom.xml/               # Java的Maven配置文件</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>推荐原因</p><ul><li><strong>构建工具兼容性</strong>：Maven/Gradle默认会编译<code>main/java</code>下的代码，并打包<code>main/resources</code>中的资源。若将Python虚拟环境（含大量二进制文件）放入<code>resources</code>，会导致：打包产物体积急剧膨胀（虚拟环境通常数百MB），以及构建工具可能错误尝试解析非Java文件（如<code>.pyc</code>或<code>.so</code>库），引发构建失败。</li><li><strong>运行时隔离性</strong>：Python虚拟环境需保持独立路径结构（如<code>venv/bin/python</code>、<code>venv/Lib/site-packages</code>）。若嵌入<code>resources</code>，Java程序运行时需解压整个虚拟环境到临时目录，增加复杂度。</li><li><strong>维护与分发便利性</strong>：独立目录便于通过<code>.gitignore</code>排除虚拟环境（避免提交二进制文件），再次减少项目大小。</li></ul></div><h2 id="java调用python脚本" tabindex="-1"><a class="header-anchor" href="#java调用python脚本"><span>Java调用Python脚本</span></a></h2><ul><li>使用<code>ProcessBuilder</code>通过相对路径调用项目内Python解释器。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// Windows示例</span></span>
<span class="line"><span class="token class-name">String</span> pythonExe <span class="token operator">=</span> <span class="token string">&quot;./python/venv/Scripts/python.exe&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> scriptPath <span class="token operator">=</span> <span class="token string">&quot;./python/scripts/main.py&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">ProcessBuilder</span> pb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span>pythonExe<span class="token punctuation">,</span> scriptPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pb<span class="token punctuation">.</span><span class="token function">directory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user.dir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置工作目录为项目根目录</span></span>
<span class="line"><span class="token class-name">Process</span> p <span class="token operator">=</span> pb<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Linux/macOS需调整路径为<code>./python/venv/bin/python</code>。</li></ul>`,9)]))}const l=n(o,[["render",i]]),r=JSON.parse('{"path":"/software/Language-Java-%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93-%E6%90%AD%E5%BB%BA%E5%B0%86Python%E4%BB%A3%E7%A0%81%E9%9B%86%E6%88%90%E5%88%B0Java%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BC%80%E5%8F%91%E6%96%B9%E6%A1%88.html","title":"Language - Java - 问题总结 - 搭建将Python代码集成到Java项目中的开发方案","lang":"zh-CN","frontmatter":{"title":"Language - Java - 问题总结 - 搭建将Python代码集成到Java项目中的开发方案","author":"魔术桌","cover":"","category":["软件程序/语言"],"tag":["进度-待完善","问题总结"],"date":"2025-08-05T00:00:00.000Z","description":"文章摘要： 如何将Python代码集成到Java项目中，实现两种语言共存。 整体打包分发方案的目录结构设计 建议将Python虚拟环境、源码与Java代码按以下结构组织，确保跨平台兼容性： 提示 推荐原因 构建工具兼容性：Maven/Gradle默认会编译main/java下的代码，并打包main/resources中的资源。若将Python虚拟环境（...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Java - 问题总结 - 搭建将Python代码集成到Java项目中的开发方案\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Java-%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93-%E6%90%AD%E5%BB%BA%E5%B0%86Python%E4%BB%A3%E7%A0%81%E9%9B%86%E6%88%90%E5%88%B0Java%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BC%80%E5%8F%91%E6%96%B9%E6%A1%88.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Java - 问题总结 - 搭建将Python代码集成到Java项目中的开发方案"}],["meta",{"property":"og:description","content":"文章摘要： 如何将Python代码集成到Java项目中，实现两种语言共存。 整体打包分发方案的目录结构设计 建议将Python虚拟环境、源码与Java代码按以下结构组织，确保跨平台兼容性： 提示 推荐原因 构建工具兼容性：Maven/Gradle默认会编译main/java下的代码，并打包main/resources中的资源。若将Python虚拟环境（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"问题总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2025-08-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Java-问题总结-搭建将Python代码集成到Java项目中的开发方案.md","excerpt":"<p><strong>文章摘要：</strong> 如何将Python代码集成到Java项目中，实现两种语言共存。</p>\\n"}');export{l as comp,r as data};
