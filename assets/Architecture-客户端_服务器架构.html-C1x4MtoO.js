import{_ as e,c as r,a as o,o as i}from"./app-D67BBu3k.js";const a={};function n(c,t){return i(),r("div",null,t[0]||(t[0]=[o('<p><strong>文章摘要：</strong> 客户端&amp;服务器（Client/Server Architecture）软件架构，定义了客户端和服务器之间的交互方式。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>客户端&amp;服务器（Client/Server Architecture）软件架构。</li><li>定义了客户端和服务器之间的交互方式。</li><li><strong>客户端</strong>：通常是一个请求服务的软件应用程序，它发送请求给服务器并接收响应。</li><li><strong>服务器</strong>：是一个提供服务的系统或应用程序，它监听并响应来自客户端的请求。</li></ul><p>在这种架构中，服务器通常拥有固定的网络地址和端口，而客户端则可以动态地连接到服务器。</p><p>主要功能</p><ul><li><strong>资源集中管理</strong>：服务器集中管理资源，如数据存储、计算能力等。</li><li><strong>服务提供</strong>：服务器提供各种服务，如数据存储、文件服务、邮件服务等。</li><li><strong>请求响应</strong>：客户端发送请求，服务器处理请求并返回响应。</li><li><strong>可扩展性</strong>：可以通过增加服务器资源来扩展服务能力，以应对更多的客户端请求。</li></ul><p>注意事项</p><ul><li><strong>服务器可靠性</strong>：服务器必须是可靠和可用的，因为它是服务的中心点。</li><li><strong>网络延迟</strong>：客户端和服务器之间的网络延迟会影响用户体验。</li><li><strong>安全性</strong>：服务器需要实施适当的安全措施来保护数据和防止未授权访问。</li><li><strong>负载均衡</strong>：在高负载情况下，需要实现负载均衡来分配请求，避免服务器过载。</li></ul><p>适用场景</p><ul><li><strong>分布式系统</strong>：适用于需要在不同地理位置分布多个客户端的系统。</li><li><strong>多用户应用</strong>：如Web服务、电子邮件服务、数据库服务等，适用于多个用户同时访问。</li><li><strong>需要中央管理的资源</strong>：当资源需要集中管理和维护时，如企业内部的数据中心。</li><li><strong>稳定的网络环境</strong>：在客户端和服务器之间有稳定网络连接的环境下更为适用。</li></ul><h2 id="技术架构图" tabindex="-1"><a class="header-anchor" href="#技术架构图"><span>技术架构图</span></a></h2><blockquote><p><img src="" alt=""></p></blockquote>',13)]))}const s=e(a,[["render",n]]),p=JSON.parse('{"path":"/software/Architecture-%E5%AE%A2%E6%88%B7%E7%AB%AF_%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84.html","title":"Architecture - 客户端&服务器架构","lang":"zh-CN","frontmatter":{"title":"Architecture - 客户端&服务器架构","author":"魔术桌","cover":"","category":["软件程序/软件架构"],"date":"2024-12-02T00:00:00.000Z","tag":["进度-已完成","知识总结"],"description":"文章摘要： 客户端&服务器（Client/Server Architecture）软件架构，定义了客户端和服务器之间的交互方式。 简介 简要说明 客户端&服务器（Client/Server Architecture）软件架构。 定义了客户端和服务器之间的交互方式。 客户端：通常是一个请求服务的软件应用程序，它发送请求给服务器并接收响应。 服务器：是一个...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Architecture - 客户端&服务器架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Architecture-%E5%AE%A2%E6%88%B7%E7%AB%AF_%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Architecture - 客户端&服务器架构"}],["meta",{"property":"og:description","content":"文章摘要： 客户端&服务器（Client/Server Architecture）软件架构，定义了客户端和服务器之间的交互方式。 简介 简要说明 客户端&服务器（Client/Server Architecture）软件架构。 定义了客户端和服务器之间的交互方式。 客户端：通常是一个请求服务的软件应用程序，它发送请求给服务器并接收响应。 服务器：是一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-12-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Architecture-客户端&服务器架构.md","excerpt":"<p><strong>文章摘要：</strong> 客户端&amp;服务器（Client/Server Architecture）软件架构，定义了客户端和服务器之间的交互方式。</p>\\n"}');export{s as comp,p as data};
