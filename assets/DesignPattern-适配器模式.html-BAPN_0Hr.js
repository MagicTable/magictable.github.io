import{_ as a,c as s,a as e,o as t}from"./app-D67BBu3k.js";const p={};function c(l,n){return t(),s("div",null,n[0]||(n[0]=[e(`<p><strong>文章摘要：</strong> 适配器模式使用总结。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>适配器模式（Adapter Pattern）是一种结构型设计模式。</li><li>当系统的客户端需要使用一些现有的类，但这些类的接口（即它们的方法和属性）不符合客户端的要求时，可以通过适配器来转换这些类的接口，使其与客户端期望的接口相匹配。</li></ul><p>主要功能</p><ul><li>允许接口不兼容的类一起工作。</li><li>通过使用适配器，客户端可以统一调用接口，而不必关心具体的实现类。</li><li>提高了类的复用性，减少了代码的重复编写。</li></ul><p>注意事项</p><ul><li>适配器模式可能会增加系统的复杂性，因为它引入了额外的类和层次结构。</li><li>应该在确实需要时才使用适配器模式，避免过度设计。</li><li>适配器模式可能会使得代码难以跟踪，特别是当适配器嵌套使用时。</li></ul><p>适用场景</p><ul><li>当你希望使用一个已经存在的类，但其接口不符合你的需求时。</li><li>当你想要创建一个可重用的类，该类可以与其他不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作。</li><li>当你需要在运行时选择不同的实现类时。</li></ul><h2 id="java-8" tabindex="-1"><a class="header-anchor" href="#java-8"><span>Java 8</span></a></h2><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 已存在的类，其接口不符合客户端的需求</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">LegacyRectangle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Drawing rectangle from (&quot;</span> <span class="token operator">+</span> x1 <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> y1 <span class="token operator">+</span> <span class="token string">&quot;) to (&quot;</span> <span class="token operator">+</span> x2 <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> y2 <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 客户端期望的接口</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 适配器类，将LegacyRectangle适配为Shape接口</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">RectangleAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">LegacyRectangle</span> adaptee<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">RectangleAdapter</span><span class="token punctuation">(</span><span class="token class-name">LegacyRectangle</span> adaptee<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee <span class="token operator">=</span> adaptee<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 假设我们希望画一个从(0,0)到(10,10)的矩形</span></span>
<span class="line">        adaptee<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 客户端代码</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdapterPatternDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">LegacyRectangle</span> legacyRectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LegacyRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Shape</span> rectangleAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RectangleAdapter</span><span class="token punctuation">(</span>legacyRectangle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 客户端代码现在可以使用Shape接口来绘制矩形</span></span>
<span class="line">        rectangleAdapter<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注释</p><ul><li>在这个例子中，<code>LegacyRectangle</code> 是一个已有的类，它的 <code>draw</code> 方法接受四个参数。客户端期望使用一个 <code>Shape</code> 接口，该接口只有一个 <code>draw</code> 方法。</li><li><code>RectangleAdapter</code> 类实现了 <code>Shape</code> 接口，并将 <code>LegacyRectangle</code> 的 <code>draw</code> 方法适配为客户端期望的形式。</li><li>这样，客户端就可以通过 <code>Shape</code> 接口来操作 <code>LegacyRectangle</code> 类，而无需直接与其不兼容的接口交互。</li></ul></div>`,14)]))}const i=a(p,[["render",c]]),r=JSON.parse('{"path":"/software/DesignPattern-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"DesignPattern - 适配器模式","lang":"zh-CN","frontmatter":{"title":"DesignPattern - 适配器模式","author":"魔术桌","cover":"","category":["软件程序/设计模式"],"date":"2024-11-18T00:00:00.000Z","tag":["进度-已完成","知识总结"],"description":"文章摘要： 适配器模式使用总结。 简介 简要说明 适配器模式（Adapter Pattern）是一种结构型设计模式。 当系统的客户端需要使用一些现有的类，但这些类的接口（即它们的方法和属性）不符合客户端的要求时，可以通过适配器来转换这些类的接口，使其与客户端期望的接口相匹配。 主要功能 允许接口不兼容的类一起工作。 通过使用适配器，客户端可以统一调用接...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DesignPattern - 适配器模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-03T09:56:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/DesignPattern-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"DesignPattern - 适配器模式"}],["meta",{"property":"og:description","content":"文章摘要： 适配器模式使用总结。 简介 简要说明 适配器模式（Adapter Pattern）是一种结构型设计模式。 当系统的客户端需要使用一些现有的类，但这些类的接口（即它们的方法和属性）不符合客户端的要求时，可以通过适配器来转换这些类的接口，使其与客户端期望的接口相匹配。 主要功能 允许接口不兼容的类一起工作。 通过使用适配器，客户端可以统一调用接..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T09:56:57.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-11-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-03T09:56:57.000Z"}]]},"git":{"updatedTime":1759485417000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/DesignPattern-适配器模式.md","excerpt":"<p><strong>文章摘要：</strong> 适配器模式使用总结。</p>\\n"}');export{i as comp,r as data};
