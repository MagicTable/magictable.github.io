import{_ as e,c as n,a as s,o as t}from"./app-D67BBu3k.js";const l={};function o(r,a){return t(),n("div",null,a[0]||(a[0]=[s(`<p><strong>文章摘要：</strong> 提供java语言程序设计的基础类和接口。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>简要说明</p><ul><li>包含了 Java 程序设计中的基础类和接口。</li><li>这个包自动导入到所有的 Java 程序中，因此其类和接口可以直接使用，无需显式导入。</li></ul><p>主要功能</p><ul><li><strong>基本类和接口</strong>：提供了 Object 类（所有类的超类）、Class 类（反射功能的支持）、String 类（字符串操作）、Thread 类（多线程支持）等。</li><li><strong>基本数据类型的包装类</strong>：如 Integer、Long、Float、Double、Boolean 等，用于将基本数据类型转换为对象。</li><li><strong>数学运算</strong>：Math 类提供了基本的数学运算和函数。</li><li><strong>异常处理</strong>：定义了 Throwable 类及其子类 Error 和 Exception，用于异常处理机制。</li><li><strong>系统操作</strong>：System 类提供了标准输入输出流以及访问外部定义的属性和环境变量的方法。</li><li><strong>运行时操作</strong>：Runtime 类和 ProcessBuilder 类提供了与 Java 运行时环境交互的方法。</li><li><strong>安全操作</strong>：SecurityManager 类用于安全管理。</li><li><strong>反射操作</strong>：提供了反射 API，如 Method、Field、Constructor 类，允许程序在运行时取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</li></ul><p>注意事项</p><ul><li><strong>字符串不可变性</strong>：String 类的对象是不可变的，修改字符串实际上会创建一个新的字符串对象。</li><li><strong>异常处理</strong>：在编写代码时，应合理使用 try-catch-finally 结构来处理异常。</li><li><strong>包装类缓存</strong>：基本数据类型的包装类对于某些值有缓存机制，例如 Integer 对 -128 到 127 的整数进行了缓存。</li><li><strong>反射性能</strong>：反射操作通常比直接代码执行要慢，因为它涉及到动态类型检查和方法调用。</li><li><strong>线程安全</strong>：在使用多线程时，要注意同步和线程安全问题。</li></ul><p>适用场景</p><ul><li><strong>基础编程</strong>：任何 Java 程序都会直接或间接地使用 <code>java.lang</code> 包中的类和接口。</li><li><strong>字符串操作</strong>：String 和 StringBuilder 类广泛用于文本处理。</li><li><strong>数学计算</strong>：Math 类在需要进行数学计算时非常有用。</li><li><strong>多线程编程</strong>：Thread 和 Runnable 接口用于实现多线程。</li><li><strong>异常处理</strong>：所有的异常处理都会用到 <code>java.lang</code> 包中的异常类。</li><li><strong>反射编程</strong>：当需要在运行时分析或操作类和对象时，反射 API 是必不可少的。</li><li><strong>系统交互</strong>：System 和 Runtime 类提供了与底层操作系统交互的功能。</li></ul><h3 id="基础类和接口" tabindex="-1"><a class="header-anchor" href="#基础类和接口"><span>基础类和接口</span></a></h3><ul><li><strong>Object</strong>: 所有类的超类，提供了诸如 <code>equals()</code>, <code>hashCode()</code>, <code>toString()</code>, <code>getClass()</code> 和 <code>clone()</code> 等方法。</li><li><strong>Class</strong>: 表示类的抽象，提供了反射的功能。</li><li><strong>String</strong>: 不可变的字符串类，提供了处理字符串的各种方法。</li><li><strong>StringBuilder/StringBuffer</strong>: 可变的字符串类，用于高效地构建字符串。</li><li><strong>Math</strong>: 包含执行基本数学运算的方法，如三角函数、指数、对数、平方根等。</li><li><strong>System</strong>: 提供标准输入输出流和系统属性访问的方法。</li><li><strong>Runtime</strong>: 提供与 Java 运行时环境交互的方法。</li></ul><h3 id="异常类" tabindex="-1"><a class="header-anchor" href="#异常类"><span>异常类</span></a></h3><ul><li><strong>Throwable</strong>: 所有错误和异常的超类。</li><li><strong>Error</strong>: 表示合理的应用程序不应该捕获的严重问题。</li><li><strong>Exception</strong>: 表示合理的应用程序可能想要捕获的条件。</li><li><strong>RuntimeException</strong>: 表示可能在 Java 代码中的任何地方抛出的异常。</li></ul><h3 id="包装类-wrapper-classes" tabindex="-1"><a class="header-anchor" href="#包装类-wrapper-classes"><span>包装类（Wrapper Classes）</span></a></h3><ul><li><strong>Integer, Long, Float, Double, Byte, Short, Character, Boolean</strong>: 这些类提供了对应的基本数据类型的对象包装，以及一些有用的方法，如转换和解析。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 通过包装类，实现 数据类型 转换为 基本数据类型</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 数据类型转换 - 转换为int类型</span></span>
<span class="line"><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>需要转换的数据<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 数据类型转换 - 转换为double类型</span></span>
<span class="line"><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>需要转换的数据<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安全和管理" tabindex="-1"><a class="header-anchor" href="#安全和管理"><span>安全和管理</span></a></h3><ul><li><strong>SecurityManager</strong>: 允许应用程序实现安全策略。</li><li><strong>Thread</strong>: 表示线程，提供创建和管理线程的方法。</li><li><strong>ThreadGroup</strong>: 表示线程的集合。</li></ul><h3 id="反射和接口" tabindex="-1"><a class="header-anchor" href="#反射和接口"><span>反射和接口</span></a></h3><ul><li><strong>反射相关的类（如 Method, Field, Constructor）</strong>: 提供了在运行时分析或操作类和对象的属性和方法的能力。</li><li><strong>Cloneable</strong>: 标记接口，表示一个类可以通过 <code>clone()</code> 方法克隆其对象。</li><li><strong>Serializable</strong>: 标记接口，表示一个类的对象可以被序列化。</li></ul><h3 id="学习总结" tabindex="-1"><a class="header-anchor" href="#学习总结"><span>学习总结</span></a></h3><h4 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识"><span>基础知识</span></a></h4><ul><li><strong>Object 类</strong>: 理解 <code>Object</code> 类的方法是理解 Java 面向对象的基础。</li><li><strong>字符串操作</strong>: 掌握 <code>String</code>, <code>StringBuilder</code>, 和 <code>StringBuffer</code> 的使用场景和区别。</li><li><strong>数学运算</strong>: 熟悉 <code>Math</code> 类提供的方法，用于执行数学计算。</li></ul><h4 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h4><ul><li><strong>异常机制</strong>: 学习如何使用 try-catch-finally 语句块来处理异常。</li><li><strong>自定义异常</strong>: 学习如何创建和使用自定义异常类。</li></ul><h4 id="包装类" tabindex="-1"><a class="header-anchor" href="#包装类"><span>包装类</span></a></h4><ul><li><strong>自动装箱和拆箱</strong>: 理解基本数据类型和包装类之间的自动转换。</li><li><strong>实用方法</strong>: 掌握包装类提供的一些实用方法，如 <code>valueOf()</code>, <code>parseInt()</code> 等。</li></ul><h4 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h4><ul><li><strong>反射API</strong>: 学习如何使用反射 API 来分析类和对象的属性和方法。</li><li><strong>动态代理</strong>: 了解如何使用 <code>Proxy</code> 类和 <code>InvocationHandler</code> 接口创建动态代理。</li></ul><h4 id="线程" tabindex="-1"><a class="header-anchor" href="#线程"><span>线程</span></a></h4><ul><li><strong>线程创建和管理</strong>: 学习如何创建、启动、同步和管理线程。</li><li><strong>线程安全</strong>: 了解多线程环境下可能出现的问题，以及如何避免这些问题。</li></ul><h4 id="实践建议" tabindex="-1"><a class="header-anchor" href="#实践建议"><span>实践建议</span></a></h4><ul><li><strong>避免使用字符串连接符</strong>: 在需要频繁修改字符串时，使用 <code>StringBuilder</code> 或 <code>StringBuffer</code>。</li><li><strong>异常处理</strong>: 不要使用异常来控制正常的程序流程。</li><li><strong>包装类</strong>: 在集合中使用包装类而不是基本数据类型。</li><li><strong>反射使用</strong>: 反射是一个强大的工具，但应谨慎使用，因为它可能会影响性能和安全性。</li><li><strong>线程同步</strong>: 在多线程编程中，合理使用同步机制来避免竞态条件和死锁。</li></ul><h2 id="java-lang-annotation" tabindex="-1"><a class="header-anchor" href="#java-lang-annotation"><span><code>java.lang.annotation</code></span></a></h2><p>为 Java 编程语言注释工具提供库支持。</p><h2 id="java-lang-instrument" tabindex="-1"><a class="header-anchor" href="#java-lang-instrument"><span><code>java.lang.instrument</code></span></a></h2><p>提供允许 Java 编程语言代理检测 JVM 上运行的程序的服务。</p><h2 id="java-lang-invoke" tabindex="-1"><a class="header-anchor" href="#java-lang-invoke"><span><code>java.lang.invoke</code></span></a></h2><p><code>java.lang.invoke</code> 包包含由 Java 核心类库和虚拟机直接提供的动态语言支持。</p><h2 id="java-lang-management" tabindex="-1"><a class="header-anchor" href="#java-lang-management"><span><code>java.lang.management</code></span></a></h2><p>提供管理接口，用于监控和管理 Java 虚拟机和 Java 运行时中的其他组件。</p><h2 id="java-lang-ref" tabindex="-1"><a class="header-anchor" href="#java-lang-ref"><span><code>java.lang.ref</code></span></a></h2><p>提供引用对象类，这些类支持与垃圾回收器进行有限程度的交互。</p><h2 id="java-lang-reflect" tabindex="-1"><a class="header-anchor" href="#java-lang-reflect"><span><code>java.lang.reflect</code></span></a></h2><p>提供用于获取有关类和对象的反射信息的类和接口。</p><h1 id="cache" tabindex="-1"><a class="header-anchor" href="#cache"><span>cache</span></a></h1><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span><code>String</code></span></a></h3><ul><li>封装了与字符串类型相关的操作方法。</li><li><code>&lt;String&gt;.split(regex)</code>：根据传入regex参数，来分割传入的字符串对象，regex是一个正则表达式，即根据什么符号进行分割，返回<code>String[]</code>。</li></ul><p>方法</p><ul><li><code>&lt;对象&gt;.equals(&lt;字符或字符串&gt;)</code>：判断“对象”与“字符或字符串”是否相等。</li></ul><h3 id="class" tabindex="-1"><a class="header-anchor" href="#class"><span><code>Class</code></span></a></h3><ul><li>用于描述正在运行的java应用程序中的类和接口的状态。</li></ul><h3 id="classloader" tabindex="-1"><a class="header-anchor" href="#classloader"><span><code>ClassLoader</code></span></a></h3><ul><li>用于加载类的对象。</li></ul><h3 id="enum" tabindex="-1"><a class="header-anchor" href="#enum"><span><code>Enum</code></span></a></h3><ul><li>用于定义枚举类型。</li></ul><h3 id="math" tabindex="-1"><a class="header-anchor" href="#math"><span><code>Math</code></span></a></h3><ul><li>用于实现基本数学运算。</li></ul><h3 id="number" tabindex="-1"><a class="header-anchor" href="#number"><span><code>Number</code></span></a></h3><ul><li>抽象类，是基本数据类型类的父类。</li></ul><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object"><span><code>Object</code></span></a></h3><ul><li>所有java类的根类。</li></ul><h3 id="package" tabindex="-1"><a class="header-anchor" href="#package"><span><code>Package</code></span></a></h3><ul><li>封装类有关java包的实现和规范的版本信息。</li></ul><h3 id="runtime" tabindex="-1"><a class="header-anchor" href="#runtime"><span><code>Runtime</code></span></a></h3><ul><li>Runtime类对象使java应用程序与其运行环境相连接。</li></ul><h3 id="stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuffer"><span><code>StringBuffer</code></span></a></h3><ul><li>用于可变字符串的操作。</li></ul><h3 id="stringbuilder" tabindex="-1"><a class="header-anchor" href="#stringbuilder"><span><code>StringBuilder</code></span></a></h3><ul><li>创建可变的字符串对象。</li></ul><h3 id="system" tabindex="-1"><a class="header-anchor" href="#system"><span><code>System</code></span></a></h3><ul><li>封装了一些与java虚拟机系统相关的方法。</li></ul><h3 id="thread" tabindex="-1"><a class="header-anchor" href="#thread"><span><code>Thread</code></span></a></h3><ul><li>创建和控制线程。</li></ul><h3 id="threadgroup" tabindex="-1"><a class="header-anchor" href="#threadgroup"><span><code>ThreadGroup</code></span></a></h3><ul><li>创建和控制线程组。</li></ul><h3 id="throwable" tabindex="-1"><a class="header-anchor" href="#throwable"><span><code>Throwable</code></span></a></h3><ul><li>定义了java中的所有错误和异常的父类。</li></ul><h3 id="process" tabindex="-1"><a class="header-anchor" href="#process"><span><code>Process</code></span></a></h3><ul><li>定义一个进程<code>process</code>对象，通过<code>Runtime</code>类中的<code>exec</code>方法启动该进程对象。</li></ul><h3 id="常见的接口" tabindex="-1"><a class="header-anchor" href="#常见的接口"><span>常见的接口</span></a></h3><ul><li><code>Appendable</code>：用于追加字符串。</li><li><code>Cloneable</code>：用于复制类对象。</li><li><code>Runnable</code>：用于实现类对象具有线程功能。</li><li><code>Comparable</code>：用于类对象的排序。</li></ul>`,83)]))}const c=e(l,[["render",o]]),d=JSON.parse('{"path":"/software/Language-Java-JavaSE-API-%E3%80%8Cjava.lang%E3%80%8D.html","title":"Language - Java - Java SE - API - 「java.lang」","lang":"zh-CN","frontmatter":{"title":"Language - Java - Java SE - API - 「java.lang」","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2024-11-24T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： 提供java语言程序设计的基础类和接口。 介绍 简要说明 包含了 Java 程序设计中的基础类和接口。 这个包自动导入到所有的 Java 程序中，因此其类和接口可以直接使用，无需显式导入。 主要功能 基本类和接口：提供了 Object 类（所有类的超类）、Class 类（反射功能的支持）、String 类（字符串操作）、Thread 类（多...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Java - Java SE - API - 「java.lang」\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Java-JavaSE-API-%E3%80%8Cjava.lang%E3%80%8D.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Java - Java SE - API - 「java.lang」"}],["meta",{"property":"og:description","content":"文章摘要： 提供java语言程序设计的基础类和接口。 介绍 简要说明 包含了 Java 程序设计中的基础类和接口。 这个包自动导入到所有的 Java 程序中，因此其类和接口可以直接使用，无需显式导入。 主要功能 基本类和接口：提供了 Object 类（所有类的超类）、Class 类（反射功能的支持）、String 类（字符串操作）、Thread 类（多..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-11-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Java-JavaSE-API-「java.lang」.md","excerpt":"<p><strong>文章摘要：</strong> 提供java语言程序设计的基础类和接口。</p>\\n"}');export{c as comp,d as data};
