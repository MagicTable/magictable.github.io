import{_ as o,c as p,b as l,a as t,d as s,e,w as i,r,o as d}from"./app-D67BBu3k.js";const c={},u={class:"hint-container info"};function h(g,n){const a=r("RouteLink");return d(),p("div",null,[n[42]||(n[42]=l("p",null,[l("strong",null,"文章摘要："),s(" Python是编程语言。")],-1)),l("div",u,[n[16]||(n[16]=l("p",{class:"hint-container-title"},"相关信息",-1)),n[17]||(n[17]=l("p",null,"外部相关文章",-1)),n[18]||(n[18]=l("ul",null,[l("li",null,[l("a",{href:"https://docs.python.org/zh-cn/3/",target:"_blank",rel:"noopener noreferrer"},"python官方说明文档"),s("，（强烈推荐）很详细且标准，但可以观看其他第三方对python官方文档的二次总结。")]),l("li",null,[l("a",{href:"https://pypi.org/",target:"_blank",rel:"noopener noreferrer"},"PyPI"),s("，众多第三方包的下载网站。")])],-1)),n[19]||(n[19]=l("p",null,"内部相关文章",-1)),l("ul",null,[l("li",null,[n[1]||(n[1]=s("官方API：")),e(a,{to:"/software/Language-Python3-API.html"},{default:i(()=>n[0]||(n[0]=[s("Language-Python3-API")])),_:1,__:[0]})]),l("li",null,[n[3]||(n[3]=s("问题总结：")),e(a,{to:"/software/Language-Python3-%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html"},{default:i(()=>n[2]||(n[2]=[s("Language-Python3-问题总结")])),_:1,__:[2]})]),l("li",null,[n[5]||(n[5]=s("代码风格：")),e(a,{to:"/software/Language-Python3-%E7%83%AD%E9%97%A8%E6%8E%A8%E8%8D%90-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC.html"},{default:i(()=>n[4]||(n[4]=[s("Language-Python3-热门推荐-代码风格")])),_:1,__:[4]})]),l("li",null,[n[7]||(n[7]=s("使用技巧：")),e(a,{to:"/software/Language-Python3-%E7%83%AD%E9%97%A8%E6%8E%A8%E8%8D%90-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html"},{default:i(()=>n[6]||(n[6]=[s("Language-Python3-热门推荐-使用技巧")])),_:1,__:[6]})]),l("li",null,[n[9]||(n[9]=s("公共知识 - 数据结构：")),e(a,{to:"/software/DataStructure%EF%BC%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89.html"},{default:i(()=>n[8]||(n[8]=[s("DataStructure（数据结构）")])),_:1,__:[8]})]),l("li",null,[n[11]||(n[11]=s("公共知识 - 设计模式：")),e(a,{to:"/software/DesignPattern%EF%BC%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%89.html"},{default:i(()=>n[10]||(n[10]=[s("DesignPattern（设计模式）")])),_:1,__:[10]})]),l("li",null,[n[13]||(n[13]=s("公共知识 - 算法设计：")),e(a,{to:"/software/Algorithm%EF%BC%88%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%EF%BC%89.html"},{default:i(()=>n[12]||(n[12]=[s("Algorithm（算法设计）")])),_:1,__:[12]})]),l("li",null,[n[15]||(n[15]=s("公共知识 - 软件架构：")),e(a,{to:"/software/Architecture%EF%BC%88%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%89.html"},{default:i(()=>n[14]||(n[14]=[s("Architecture（软件架构）")])),_:1,__:[14]})])])]),n[43]||(n[43]=t('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>简要说明</p><ul><li>Python是一种面向对象、解释型、跨平台、动态类型、开源的程序语言。</li></ul><p>主要功能</p><ul><li><strong>开源免费</strong>：解释器和标准模块是开源的，但在使用第三方开发者的代码时不得违反其开源协议。</li><li><strong>高级语言</strong>：Python 封装较深，屏蔽了很多底层细节，如Python 会自动管理内存。</li><li><strong>语法简单</strong>：实现相同功能，代码量相比其他语言要少很多。</li><li><strong>开放源码</strong>：Python和大部分支持库及工具都是开源的，使用时仍需要根据相关的开源协议。</li><li><strong>胶水特性（可扩展性）</strong>：可与其他编程语言集成，如C、C++、Java等。</li><li><strong>跨平台（可移植性）</strong>：可用于大部分操作系统、集群、服务器，甚至小设备（如：树莓派）上。</li><li><strong>多用途</strong>：可用于快速、交互式代码开发，也可用于构建大型应用程序，如科学计算、数据处理、人工智能等。</li><li><strong>第三类库丰富</strong>：除了自身提供的几百个内置库，开源社区还贡献了十几万个第三方库，拥有良好的编程生态。</li></ul><p>注意事项</p><ul><li><strong>代码加密困难</strong>：不像编译型语言的源代码会被编译成可执行程序，Python 是直接运行源代码，因此对源代码加密比较困难。</li><li><strong>运行速度较慢</strong>：运行速度慢是解释型语言的通病，执行速度比C/C++语言的速度慢很多。</li></ul><p>适用场景</p><ul><li>Web和Internet开发、科学计算和统计、人工智能、教育、桌面界面开发、软件开发、后端开发、网络爬虫、自动化办公</li></ul><h2 id="缩进" tabindex="-1"><a class="header-anchor" href="#缩进"><span>缩进</span></a></h2><p>python程序语言通过缩进来控制代码的运行流程，因此严格、准确、一致的缩进非常重要。</p><p>缩进规范</p><ul><li>Python使用缩进来指示代码块。</li><li>缩进指的是代码行开头的空格。</li><li>标准编写代码缩进4个空格，即一个<code>Tab</code>键。</li><li>在其他编程语言中，代码缩进仅出于可读性的考虑，而 Python中的缩进非常重要。</li><li>缩进不建议超过4个，过多的缩进会导致降低代码可读性。</li></ul><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h2><ul><li>程序员在代码中加入的辅助说明，不能被计算机执行，不受语法的限制，可以写任何内容。</li></ul><p>单行注释</p><ul><li>将<code>#</code>写在当前行开头位置。</li></ul><p>多行注释</p><ul><li>将<code>&#39;&#39;&#39;</code>、<code>&quot;&quot;&quot;</code>写在要注释的前一行和后一行，多行注释是成对组成。</li><li>就是将需要注释的文本包裹在其之间。</li></ul><h2 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符"><span>标识符</span></a></h2><ul><li>标识符在python语言中用于规范命名解释器能识别的可执行代码对象的名称。</li><li>变量、常量、关键字、运算符、函数、类、模块、包、库都属于标识符。</li></ul><p>命名规范</p><ul><li><strong>变量名</strong>：全部小写，单词之间使用下划线连接，开头不能是数字，下划线开头是私有变量。</li><li><strong>函数名</strong>：全部小写，单词之间使用下划线连接，开头不能是数字，下划线开头是私有函数。</li><li><strong>类名</strong>：首字母大写，多个单词之间使用下划线连接，开头不能是数字，下划线开头是私有类。</li><li><strong>常量名</strong>：全部大写，多个单词之间使用下划线连接，开头不能是数字，下划线开头是私有常量。</li></ul><p>作用域</p><ul><li>作用域指标识符的作用范围(作用域)，python语言根据变量可供访问的作用范围，分为全局、局部、闭包。</li><li><strong>全局作用域</strong>：从赋值定义开始，后续代码知道结束都可以访问该变量。</li><li><strong>局部作用域</strong>：只能在被定义的函数或者类内部才能被访问该变量。即在同一个文件且在同一个代码块内。</li><li><strong>闭包作用域</strong>：导入某个外部函数在现在程序的某个函数或类之间运行的标识符，外部函数与内部嵌套函数之间。</li><li>全局 &gt; 闭包 &gt; 局部</li><li>可使用<code>global</code>和<code>nonlocal</code>关键字来改变变量的作用域范围。</li></ul>',25)),l("p",null,[n[21]||(n[21]=s("有关")),n[22]||(n[22]=l("code",null,"global",-1)),n[23]||(n[23]=s("和")),n[24]||(n[24]=l("code",null,"nonlocal",-1)),n[25]||(n[25]=s("关键字详细说明请查看该文章：")),e(a,{to:"/software/Language-Python3-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html"},{default:i(()=>n[20]||(n[20]=[s("内置函数")])),_:1,__:[20]})]),n[44]||(n[44]=l("h2",{id:"关键字",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#关键字"},[l("span",null,"关键字")])],-1)),l("p",null,[n[27]||(n[27]=s("详细总结：")),e(a,{to:"/software/Language-Python3-%E5%85%B3%E9%94%AE%E5%AD%97.html"},{default:i(()=>n[26]||(n[26]=[s("Python3关键字")])),_:1,__:[26]})]),n[45]||(n[45]=t('<h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><ul><li>变量是存放数据值的容器。</li><li>python没有声明变量的内置函数，在首次赋值时就是创建变量。</li><li>创建变量使用<code>=</code>(等号)来给变量赋值，等号左边是变量名，等号右边的存储的值。</li><li>变量本身没有类型，“类型”指的是变量中存储对象的数据类型。</li><li>命名规则，在同一个程序中名字必须是唯一的，不能与内置函数重名。</li></ul><p>变量赋值</p><ul><li>单变量单存储对象，<code>例子：a = 2</code></li><li>多变量单存储对象，<code>例子：a = b = c = 1</code></li><li>多变量多存储对象，<code>例子：a,b,c = 1,2,&quot;abc&quot;</code></li></ul><h2 id="常量" tabindex="-1"><a class="header-anchor" href="#常量"><span>常量</span></a></h2><ul><li>常量是赋值之后就不会变化的固定值，变量其实也可以选择不变化数值。</li><li>python的常量和变量一般通过变量名全大写来表示一个常量，但其数值依旧可以更改，因此python提供通过自定义类来实现常量，这要求符合“名称字母全大写”和“值一点被绑定便不可再修改”这两个条件。</li><li>内置函数中也具有内置常量。</li></ul><div class="hint-container note"><p class="hint-container-title">注释</p><ul><li>Python并未提供如C/C++/Java一样的const修饰符，换言之，python中没有常量，python程序一般通过约定俗成的变量名全大写的形式表示这是一个常量。然而这种方式并没有真正实现常量，其对应的值仍然可以被改变。后来，python提供了新的方法实现常量：即通过自定义类实现常量。这要求符合“命名全部为大写”和“值一旦被绑定便不可再修改”这两个条件。</li></ul></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><ul><li>运算符用于对变量和值执行操作。</li><li>运算符可分为一下7类：算术运算符，赋值运算符，比较运算符，位运算符，逻辑运算符，身份运算符，成员运算符</li></ul>',9)),l("p",null,[n[29]||(n[29]=s("详细总结：")),e(a,{to:"/software/Language-Python3-%E8%BF%90%E7%AE%97%E7%AC%A6.html"},{default:i(()=>n[28]||(n[28]=[s("运算符")])),_:1,__:[28]})]),n[46]||(n[46]=l("h2",{id:"运算符优先级",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#运算符优先级"},[l("span",null,"运算符优先级")])],-1)),n[47]||(n[47]=l("ul",null,[l("li",null,"Python运算符优先级，是描述在计算机运算计算表达式时执行运算的先后顺序。"),l("li",null,"先执行具有较高优先级的运算，然后执行较低优先级的运算。"),l("li",null,"例如，我们常说的先执行相乘和除，再执行加减运算。")],-1)),l("p",null,[n[31]||(n[31]=s("详细总结：")),e(a,{to:"/software/Language-Python3-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.html"},{default:i(()=>n[30]||(n[30]=[s("运算符优先级")])),_:1,__:[30]})]),n[48]||(n[48]=l("h2",{id:"数据类型",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#数据类型"},[l("span",null,"数据类型")])],-1)),n[49]||(n[49]=l("ul",null,[l("li",null,"在编程中，数据类型是一个重要的概念，变量可以存储不同类型的数据，并且不同类型可以执行不同的操作。"),l("li",null,"在其他编程中或者其他用途中会有不同的数据类型。")],-1)),l("p",null,[n[33]||(n[33]=s("详细总结：")),e(a,{to:"/software/Language-Python3-API-%E5%86%85%E7%BD%AE%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95.html"},{default:i(()=>n[32]||(n[32]=[s("内置数据类型函数方法")])),_:1,__:[32]})]),n[50]||(n[50]=t(`<div class="hint-container note"><p class="hint-container-title">注释</p><p>python拥有以下内置数据类型：</p><ul><li><strong>文本类型</strong>：str（字符串）</li><li><strong>数值类型</strong>：int（整数）、float（浮点数）、complex（复数）</li><li><strong>序列类型</strong>：list（列表）、tuple（元组）</li><li><strong>映射类型</strong>：dict（字典）</li><li><strong>集合类型</strong>：set（集合）</li><li><strong>布尔类型</strong>：bool（布尔）</li><li><strong>二进制类型</strong>：bytes（二进制）</li><li><strong>上下文管理器类型</strong></li><li><strong>迭代器类型</strong></li><li>其他内置类型</li><li>特殊属性</li></ul></div><h3 id="str-字符串" tabindex="-1"><a class="header-anchor" href="#str-字符串"><span>str（字符串）</span></a></h3><ul><li>字符串是一个容器，包含若干个字符并按照一定的顺序组织成一个整体。字符串支持索引和切片操作。</li><li>字符串以“字符”为基本单位。</li></ul><p>操作</p><ul><li>删除、查找（查询）、修改（替换）、提取、合并（拼接、连接）、拆分（切割）</li><li>其他操作（获取长度、重复输出、字符统计、字符转换、格式转换、比较、获取状态）</li></ul><p>案例</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token comment"># 一对单引号</span></span>
<span class="line">str1 <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span></span>
<span class="line"><span class="token comment"># 一对双引号</span></span>
<span class="line">str2 <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span></span>
<span class="line"><span class="token comment"># 一对三个单引号</span></span>
<span class="line">str3 <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">    abc</span>
<span class="line">    123</span>
<span class="line">    中文</span>
<span class="line">    &#39;&#39;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="int-整数" tabindex="-1"><a class="header-anchor" href="#int-整数"><span>int（整数）</span></a></h3><ul><li>整数是由正整数、零、负整数构成。</li><li>在python语言里整数的长度不受限制，仅受虚拟内存大小的限制。</li></ul><p>==待完善==</p><h3 id="float-浮点数" tabindex="-1"><a class="header-anchor" href="#float-浮点数"><span>float（浮点数）</span></a></h3><ul><li>浮点数是带小数点的数字。</li><li>由于计算机对于浮点数存储的只是近似值，不精确的数字。</li></ul><p>==待完善==</p><h3 id="complex-复数" tabindex="-1"><a class="header-anchor" href="#complex-复数"><span>complex（复数）</span></a></h3><ul><li>复数由实部和虚部组成</li></ul><p>==待完善==</p><h3 id="list-列表" tabindex="-1"><a class="header-anchor" href="#list-列表"><span>list（列表）</span></a></h3><ul><li>列表（list），是可变序列类型，可以再次更改或替换元素等。</li><li>列表能够存储各种类型的数据，并且能在列表中嵌套字符串、数字、列表、元组、字典、集合等数据类型。</li><li>列表每个值称为元素，元素是基本单位。</li><li>使用一对方括号来表示空列表: <code>[ ]</code></li><li>用方括号<code>[]</code>来表示列表的开始和结束，元素之间用逗号<code>,</code>分割。</li><li>列表中每个元素都有对应的下标。</li><li>列表中元素的下标顺序是：从左往右，从0开始计数；而从右往左，从-1开始计数。</li></ul><p>==待完善==</p><h3 id="tuple-元组" tabindex="-1"><a class="header-anchor" href="#tuple-元组"><span>tuple（元组）</span></a></h3><ul><li>元组（tupel），是不可变序列类型，不允许再次更改或替换元素等。</li><li>元组能够存储各种类型的数据，并且能在列表中嵌套字符串、数字、列表、元组、字典、集合等数据类型。</li><li>元组每个值称为元素，元素是基本单位。</li><li>使用一对圆括号来表示空元组: <code>( )</code></li><li>用圆括号<code>()</code>来表示列表的开始和结束，元素之间用逗号<code>,</code>分割。</li><li>建议创建非空元组的时候，在元素后面加一个逗号，用来区分普通括号和元组。</li><li>元组不能对元素进行增加元素、变换元素位置、修改元素、删除元素操作。</li><li>元组中每个元素都有对应的下标。</li><li>元组中元素的下标顺序是：从左往右，从0开始计数；而从右往左，从-1开始计数。</li></ul><p>==待完善==</p><h3 id="dict-字典" tabindex="-1"><a class="header-anchor" href="#dict-字典"><span>dict（字典）</span></a></h3><ul><li>字典（dict），是可变且无序的映射类型，允许再次更改或替换元素，不支持排序。</li><li>字典内部结构用哈希表构成，通过唯一的访问键对应的值，因此字典没有提供排序功能。</li><li>目前映射类型只有字典一种类型。</li><li>字典以<strong>键值对</strong>为基本元素。</li><li>键值对，由键（key）和值（value）组成，中间用冒号<code>:</code>分割。</li><li>键（key）需要满足唯一性、不可变性。</li><li>值（value）可以是任何数据类型，没有规定限制。</li><li>使用一对花括号来表示空字典:<code>{ }</code></li><li>用花括号<code>{}</code>来表示列表的开始和结束，元素之间用逗号<code>,</code>分割。</li><li>字典属于典型的一对一映射关系的数据类型。</li><li>字典中每个元素都有对应的下标。</li><li>字典中元素的下标顺序是：从左往右，从0开始计数；而从右往左，从-1开始计数。</li></ul><p>==待完善==</p><h3 id="set-集合" tabindex="-1"><a class="header-anchor" href="#set-集合"><span>set（集合）</span></a></h3><ul><li>集合是可变类型，允许再次更改或替换元素等。</li><li>集合是具有唯一性、无序性、确定性的多项集。</li><li>常见的成员检测、去除重复项、交集、并集、差集、对称差集等。</li><li>集合每个值称为元素，元素是基本单位。</li><li>使用一对花括号来表示空集合: <code>{ }</code></li><li>用花括号<code>{}</code>来表示列表的开始和结束，元素之间用逗号<code>,</code>分割。</li><li>集合中每个元素都有对应的下标。</li><li>集合中元素的下标顺序是：从左往右，从0开始计数；而从右往左，从-1开始计数。</li></ul><p>==待完善==</p><h2 id="简化语法" tabindex="-1"><a class="header-anchor" href="#简化语法"><span>简化语法</span></a></h2><h3 id="索引和切片操作" tabindex="-1"><a class="header-anchor" href="#索引和切片操作"><span>索引和切片操作</span></a></h3><ul><li>索引和切片主要用于简化“文本类型”、“数值类型”、“序列类型”、“映射类型”、“集合类型”的对象来进行操作。</li></ul><p>下标的概念</p><ul><li>下标是用于定位对象中某个或多个元素的具体位置。</li><li>下标从左往右查找，从0开始计数。</li><li>下标从右往左查找，从-1开始计数。</li><li>下标用<strong>整数类型</strong>进行计数。</li></ul><p>切片操作</p><table><thead><tr><th style="text-align:center;">案例</th><th style="text-align:left;">解释</th></tr></thead><tbody><tr><td style="text-align:center;">s[i]</td><td style="text-align:left;">代表对象s元素下标的第<code>i</code>项</td></tr><tr><td style="text-align:center;">s[i:j]</td><td style="text-align:left;">代表对象s元素下标的从第<code>i</code>项到第<code>j</code>项区间内的切片，且切片是左闭右开区间形式，即包含<code>i</code>但不包含<code>j</code>的区间范围</td></tr><tr><td style="text-align:center;">s[i:j:k]</td><td style="text-align:left;">代表对象s元素下标的从第<code>i</code>项到第<code>j</code>项区间内且步长为<code>k</code>的切片，步长<code>k</code>代表每隔多少下标后选定一个元素</td></tr></tbody></table><h3 id="字符串格式化" tabindex="-1"><a class="header-anchor" href="#字符串格式化"><span>字符串格式化</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token comment"># 使用 f-string 格式化字符串</span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string">&#39;Alice&#39;</span>  </span>
<span class="line">age <span class="token operator">=</span> <span class="token number">25</span>  </span>
<span class="line">s <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;My name is </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> and I&#39;m </span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string"> years old.&quot;</span></span></span>
<span class="line"><span class="token comment"># 输出内容： My name is Alice and I&#39;m 25 years old.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用 format() 方法格式化字符串</span></span>
<span class="line">num <span class="token operator">=</span> <span class="token number">123</span>  </span>
<span class="line">s <span class="token operator">=</span> <span class="token string">&quot;The number is {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出内容：The number is 123</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用 % 运算符进行字符串格式化</span></span>
<span class="line">num <span class="token operator">=</span> <span class="token number">123</span>  </span>
<span class="line">s <span class="token operator">=</span> <span class="token string">&quot;The number is %d&quot;</span> <span class="token operator">%</span> num</span>
<span class="line"><span class="token comment"># 输出内容：The number is 123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><ul><li>函数指把通过专门的代码组织，用来实现特定功能的代码块，具有相对独立性，可供其他代码重复使用。</li><li>在一个程序中重复的代码太多会导致代码臃肿、阅读麻烦、调试困难，因此需要函数这个功能。</li><li>函数能使得代码非常简练，代码模块化、提高代码编写效率和质量，使用自定义函数独立打包共享给他人使用。</li><li>函数可以分为内置函数、第三方函数、自定义函数。</li></ul><div class="hint-container note"><p class="hint-container-title">注释</p><ul><li>在实际独立引用对象名称时，为了区分函数和方法，把带小括号统一认为是方法，不带小括号的为函数。</li></ul></div><h3 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数"><span>内置函数</span></a></h3>`,41)),l("ul",null,[n[36]||(n[36]=l("li",null,"python官方封装好的函数一起放在Lib目录下的算法模块，又称内置函数。",-1)),n[37]||(n[37]=l("li",null,"内置函数用于代码重复使用，减少代码量。",-1)),n[38]||(n[38]=l("li",null,"无需通过“improt”内置函数导入，就能直接使用的函数。",-1)),n[39]||(n[39]=l("li",null,"使用不是python标准库中自带的函数，使用第三方库中的函数，又称第三方函数。",-1)),l("li",null,[n[35]||(n[35]=s("详细总结：")),e(a,{to:"/software/Language-Python3-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html"},{default:i(()=>n[34]||(n[34]=[s("内置函数")])),_:1,__:[34]})])]),n[51]||(n[51]=t(`<p>保留字</p><ul><li>python编程语言的语法规则（特定用途）的函数（标识符），即保留字（关键字）。</li><li>无需通过“improt”内置函数导入即可使用的内置函数。</li><li>保留字也属于内置函数。</li></ul><div class="hint-container note"><p class="hint-container-title">注释</p><ul><li>内置函数不能再次作为常规变量名或函数名重新命名（理论上可以再次重新命名，但会覆盖原本的功能）。</li><li>保留字不能再次作为常规变量名或函数名重新命名。</li></ul></div><h3 id="自定义函数" tabindex="-1"><a class="header-anchor" href="#自定义函数"><span>自定义函数</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">- 一个标准的函数由“函数名、参数、函数体、返回值”四个部分组成</span>
<span class="line">- 关键字\`def\`是内置函数，用于定义函数的函数</span>
<span class="line">- 关键字\`return\`的内置函数，用于返回指定的数据</span>
<span class="line">- 定义函数时可以不指定参数、返回值</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">   函数体</span>
<span class="line">   <span class="token keyword">return</span> 返回值</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数名的命名规范</p><ul><li>不能与现有的内置函数重名。</li><li>建议名称要能准确表达函数的功能。</li><li>全部小写，单词之间使用下划线连接，开头不能是数字，下划线开头则代表是私有函数。</li></ul><p>函数的参数</p><ul><li><p>上面案例中展示的参数称为<strong>形参（形式参数）</strong>，在调用函数时赋予的值称为<strong>实参（实际参数）</strong>。</p></li><li><p><strong>实际参数</strong>：创建实例，就是把一个函数或者类实例化，而实例中或者一个方法中要添加/输入/加入一个或者多个参数，这个参数叫实际参数。</p></li><li><p><strong>形式参数</strong>：在函数中或者类中要添加的参数，这个参数会根据主程序或者实例化中的参数（实际参数）变化，因此叫形式参数。</p></li></ul><p>形参（形式参数）支持的传递形式</p><ul><li><strong>位置参数</strong>：函数的参数可以由多个形式参数，接收实际参数的时候是有前后之分的，因此给出的实际参数要与形式参数的位置依次对应。</li><li><strong>默认参数</strong>：可在函数中先指定参数的值。</li><li><strong>关键字参数</strong>：为了避免参数对应混乱，可以使用 “参数名=值” ，在调用函数时显示表示，而无需考虑参数的位置顺序。这会有默认值，通过覆盖原来的值实现变化。</li><li><strong>不定长参数</strong>：在自定义函数的参数前面加入符号。 <ul><li>在形式参数前面写上 <code>*</code> ，能接收任意个参数。</li><li>在形式参数前面写上 <code>**</code> ，能接收任意个数的键值对。</li></ul></li></ul><p>函数传递对象总结</p><ul><li>不可变对象（数字、字符串、元组），在函数里更改值后，会变成新的对象，不影响函数外的对象。</li><li>可变对象（列表、字典），在函数里更改值后，函数不会变成新的对象，会同步影响函数外的对象。</li></ul><h3 id="第三方函数" tabindex="-1"><a class="header-anchor" href="#第三方函数"><span>第三方函数</span></a></h3><ul><li>第三方函数是指那些不是Python标准库中的函数，而是来自第三方库或模块的函数。</li><li>需要通过导入第三方库（包、模块），才能在代码中使用的函数，称为第三方函数。</li><li>第三方函数就是需要用户自己去下载并安装到python中才能使用的函数。</li></ul><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h3><ul><li>构造函数是指当创建类的实例对象时，自动调用的方法（函数）。</li><li><code>__init__()</code> 方法是一个特殊的方法，它在创建类的新实例时自动调用。它允许我们为新创建的对象设置初始状态或属性。</li><li>当使用 <code>class</code> 关键字创建一个新类时，可以定义 <code>__init__()</code> 方法来初始化新创建的对象。</li></ul><h3 id="私有函数" tabindex="-1"><a class="header-anchor" href="#私有函数"><span>私有函数</span></a></h3><ul><li>私有函数是指以<code>__</code>（双下划线）开头的函数。这种命名约定是一种约定俗成的做法，用于表示该函数是私有的，不应该被直接访问或调用。</li><li>私有函数的目的是为了将某些实现细节隐藏在类内部，而不是暴露给外部代码。这样可以提高代码的可维护性和可读性，并避免命名冲突和意外修改。</li><li>私有函数可以在类的内部被调用，但不能直接从类的外部访问。要调用私有函数，需要通过类的公有方法进行访问。</li></ul><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数"><span>匿名函数</span></a></h3><ul><li>匿名函数是指没有显式命名的函数，也称为lambda函数。</li><li>匿名函数主要用于定义简单的、一次性使用的函数.</li><li>通常在需要一个函数但又不经常使用的情况下使用。</li></ul><h3 id="递归函数" tabindex="-1"><a class="header-anchor" href="#递归函数"><span>递归函数</span></a></h3><ul><li>递归函数是一种特殊的函数，它直接或间接地调用自身来解决问题。</li><li>递归函数通常用于解决可以分解为更小的子问题的问题。</li></ul><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h2><ul><li>类是对现实世界理解和抽象的一种方法，这种方法也被称为 “面向对象编程” 。</li><li>在现实中，过程是易变的，对象是相对不变的，因此把代码整理成类，更方便别人调用。</li><li>类可以理解为是对一类事物的归纳。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><table><thead><tr><th style="text-align:center;">现实世界（事物）</th><th style="text-align:center;">类（模板）</th><th style="text-align:center;">对象（实例）</th></tr></thead><tbody><tr><td style="text-align:center;">特性/状态</td><td style="text-align:center;">变量/常量</td><td style="text-align:center;">属性</td></tr><tr><td style="text-align:center;">行为/操作</td><td style="text-align:center;">函数</td><td style="text-align:center;">方法</td></tr></tbody></table><p>交流约定</p><ul><li>这种方法把具有相同特征（属性）和行为（方法）的对象进行抽象整合称为类，我们称之为 “封装”。</li><li>属性就是一个事物的特征，用于描述一个对象。</li><li>函数就是一个事物的行为，用于描述一个对象的能力。</li><li>特征（属性）本质是类里面创建的变量，称之为 “成员变量”。</li><li>行为（方法）本质是类里面创建的函数，称之为 “成员函数”。</li><li>面向对象编程的核心方法是封装、继承、多态。</li><li>类分为动态类、静态类。</li><li>实例由动态类生成，核心是属性和方法。</li><li>现实世界对象的特征抽象为动态类的数据变量，数据变量通过实例的属性来做读写操作，并且各个实例属性独立，互不干扰。</li><li>现实世界对象的行为抽象为动态类的函数，函数通过实例来体现各种操作功能，并且各个实例属性独立，互不干扰。</li></ul></div><p>类名的命名规范</p><ul><li>首字母大写，多个单词之间使用下划线连接，开头不能是数字，下划线开头是私有类。</li></ul><p>类的基本语法</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">- 类由关键字\`class\`、类名、参数、代码块四个部分组成。</span>
<span class="line">- 关键字\`class\`用于定义类的函数。</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    代码块</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>正规的类中会定义一个函数名__init__（）和参数self的函数，被称为构造函数，用于初始化类。</li></ul><p>魔术方法（特殊的python方法）</p><p>==待完善==</p><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块"><span>模块</span></a></h2><ul><li>Python模块是一个包含了Python定义和声明的文件，文件名就是模块名字加上.py的后缀。模块的本质是一个Python文件。</li><li>模块的主要目的是为了方便管理代码和实现代码重用。</li><li>通过将程序分成一个个的文件，程序的结构更清晰，方便管理。</li></ul><p>模块可以分为三类：</p><ul><li><strong>内置模块</strong>：Python自带了很多常用的模块，如random、math、datetime等等。这些模块可以帮助我们避免重复编写代码，提高开发效率。</li><li><strong>第三方模块</strong>：除了内置模块外，Python的第三方模块也非常丰富，如numpy、pandas、scipy等等。这些模块提供了各种功能，可以帮助我们更高效地开发程序。</li><li><strong>自定义模块</strong>：除了内置模块和第三方模块外，我们还可以自己编写模块。自定义模块可以包含变量、函数、类等，并可在程序中被引用。</li></ul><h2 id="包" tabindex="-1"><a class="header-anchor" href="#包"><span>包</span></a></h2><ul><li>Python包是由一个或多个<code>.py</code>文件模块组成的集合（文件夹）。</li><li>包是一个完成特定任务的工具箱，可以包含多个模块、函数、类等。</li><li>一个包必须含有一个__init__.py文件，它用于标识当前文件夹是一个包。这个文件可以是空的，但必须存在。</li><li>包可以嵌套，即一个包可以包含其他包。</li></ul><h2 id="库" tabindex="-1"><a class="header-anchor" href="#库"><span>库</span></a></h2><ul><li>库是指一组已经编写好的可重用代码的集合。</li><li>通常包含有用的功能、数据结构、算法和接口。</li><li>为了在帮助程序员更快速地实现特定的任务，可以让程序员不必自己重新编写所有代码。这些代码可以在不同的项目中被重复使用，从而提高开发效率和代码质量。</li></ul><h2 id="分支语句" tabindex="-1"><a class="header-anchor" href="#分支语句"><span>分支语句</span></a></h2><p>==待完善==</p><h2 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句"><span>循环语句</span></a></h2><p>==待完善==</p><h2 id="异常处理语句" tabindex="-1"><a class="header-anchor" href="#异常处理语句"><span>异常处理语句</span></a></h2><ul><li>异常处理是用于捕获和处理程序中可能出现的错误或异常情况的一种机制。</li><li>通过异常处理，我们可以更好地控制程序的执行流程，提高程序的健壮性和可靠性。</li><li>异常处理包括了<code>try</code>、<code>except</code>、<code>finally</code>、<code>raise</code>语句。</li></ul><h3 id="执行一段代码" tabindex="-1"><a class="header-anchor" href="#执行一段代码"><span>执行一段代码</span></a></h3><ul><li><code>try</code>语句用于尝试执行一段代码。</li><li>在try语句中，我们可以编写要尝试执行的代码块，并在except语句中指定要捕获的异常类型和处理方式。如果在try语句块中出现了与except语句中指定的异常类型匹配的异常，则会执行except语句块中的代码。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">try</span><span class="token punctuation">:</span>  </span>
<span class="line">    <span class="token comment"># 尝试执行的代码块</span></span>
<span class="line"><span class="token keyword">except</span> ExceptionType<span class="token punctuation">:</span>  </span>
<span class="line">    <span class="token comment"># 处理异常的代码块</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="捕获异常代码" tabindex="-1"><a class="header-anchor" href="#捕获异常代码"><span>捕获异常代码</span></a></h3><ul><li><code>except</code>语句用于捕获try语句块中出现的异常，并执行相应的处理代码。</li><li><code>except</code>语句可以指定多个异常类型，也可以使用多个<code>except</code>语句来处理不同的异常类型。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">try</span><span class="token punctuation">:</span>  </span>
<span class="line">    <span class="token comment"># 尝试执行的代码块  </span></span>
<span class="line"><span class="token keyword">except</span> ExceptionType1<span class="token punctuation">:</span>  </span>
<span class="line">    <span class="token comment"># 处理异常类型1的代码块  </span></span>
<span class="line"><span class="token keyword">except</span> ExceptionType2<span class="token punctuation">:</span>  </span>
<span class="line">    <span class="token comment"># 处理异常类型2的代码块</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="释放资源代码" tabindex="-1"><a class="header-anchor" href="#释放资源代码"><span>释放资源代码</span></a></h3><ul><li><code>finally</code>语句用于在try和except语句执行完毕后执行一段代码，无论是否发生异常都会执行。</li><li>通常用于资源的清理和释放操作。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">try</span><span class="token punctuation">:</span>  </span>
<span class="line">    <span class="token comment"># 尝试执行的代码块  </span></span>
<span class="line"><span class="token keyword">except</span> ExceptionType<span class="token punctuation">:</span>  </span>
<span class="line">    <span class="token comment"># 处理异常的代码块  </span></span>
<span class="line"><span class="token keyword">finally</span><span class="token punctuation">:</span>  </span>
<span class="line">    <span class="token comment"># 无论是否发生异常都会执行的代码块</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手动抛出异常" tabindex="-1"><a class="header-anchor" href="#手动抛出异常"><span>手动抛出异常</span></a></h3><ul><li><code>raise</code>语句用于手动抛出一个异常。</li><li>手动触发一个异常，并在except语句中捕获并处理它。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token comment"># ExceptionType是异常类型，args是可选的异常参数。</span></span>
<span class="line"><span class="token keyword">raise</span> ExceptionType<span class="token punctuation">(</span>args<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="面向对象编程" tabindex="-1"><a class="header-anchor" href="#面向对象编程"><span>面向对象编程</span></a></h2><ul><li>面向对象编程是Python的一种重要特性，它允许你以更直观、更自然的方式组织和编写代码。</li></ul><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h3><ul><li>一个类可以从其他类继承属性和方法。</li><li>可以创建一个更加特定的类，它继承了父类的所有属性和方法，并可以添加或覆盖它们。</li></ul><h3 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h3><ul><li>封装在面向对象开发里是最基础的一环。</li><li>可以把业务知识内聚在类里面，对外暴露较少知识的接口，方便调用方调用，同时也提高了代码的维护性、可读性以及扩展性。</li></ul><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h3><ul><li>多态是指一个接口可以有多种实现方式。</li><li>多态通常通过动态类型来实现。这意味着对象的类型在运行时确定，而不是在编译时确定。</li><li>这为代码提供了更大的灵活性。</li></ul><h3 id="抽象" tabindex="-1"><a class="header-anchor" href="#抽象"><span>抽象</span></a></h3><ul><li>抽象是一种隐藏对象的某些细节，只展示必要信息的方法。</li><li>若要手动实现将一个类进行抽象化编程，抽象类需要让类继承<code>abc</code>模块。</li><li>可以通过继承抽象基类（ABC）来实现抽象。抽象基类是一个包含抽象方法的类，这些方法没有实现。任何从抽象基类派生的非抽象类都必须实现这些抽象方法。</li></ul><h2 id="进阶知识" tabindex="-1"><a class="header-anchor" href="#进阶知识"><span>进阶知识</span></a></h2>`,70)),l("p",null,[n[41]||(n[41]=s("详细总结：")),e(a,{to:"/software/Language-Python3-%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.html"},{default:i(()=>n[40]||(n[40]=[s("Language-Python3-进阶知识总结")])),_:1,__:[40]})])])}const y=o(c,[["render",h]]),b=JSON.parse('{"path":"/software/Language-Python3.html","title":"Language - Python 3","lang":"zh-CN","frontmatter":{"title":"Language - Python 3","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2023-08-10T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： Python是编程语言。 相关信息 外部相关文章 python官方说明文档，（强烈推荐）很详细且标准，但可以观看其他第三方对python官方文档的二次总结。 PyPI，众多第三方包的下载网站。 内部相关文章 官方API： 问题总结： 代码风格： 使用技巧： 公共知识 - 数据结构： 公共知识 - 设计模式： 公共知识 - 算法设计： 公共知...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Python 3\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-03T09:56:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Python3.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Python 3"}],["meta",{"property":"og:description","content":"文章摘要： Python是编程语言。 相关信息 外部相关文章 python官方说明文档，（强烈推荐）很详细且标准，但可以观看其他第三方对python官方文档的二次总结。 PyPI，众多第三方包的下载网站。 内部相关文章 官方API： 问题总结： 代码风格： 使用技巧： 公共知识 - 数据结构： 公共知识 - 设计模式： 公共知识 - 算法设计： 公共知..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T09:56:57.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2023-08-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-03T09:56:57.000Z"}]]},"git":{"updatedTime":1759485417000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Python3.md","excerpt":"<p><strong>文章摘要：</strong> Python是编程语言。</p>\\n"}');export{y as comp,b as data};
