import{_ as n,c as e,a as s,o}from"./app-D67BBu3k.js";const t={};function i(l,a){return o(),e("div",null,a[0]||(a[0]=[s(`<p><strong>文章摘要：</strong> 摘要内容。</p><h3 id="接收请求数据" tabindex="-1"><a class="header-anchor" href="#接收请求数据"><span>接收请求数据</span></a></h3><blockquote><ul><li><code>@RequestBody</code>：用于接收json对象数据。普通风格。</li><li><code>@RequestParm</code>：用于接收URL地址或表单进行传递参数。若传递的不是json对象数据，则使用该方法。普通风格。</li><li><code>@PathVariable</code>：用于接收路径参数，使用<code>{参数名称}</code>的格式描述路径参数。参数数量较少时使用REST风格，通常传递id值。</li></ul></blockquote><h2 id="配置文件属性参数" tabindex="-1"><a class="header-anchor" href="#配置文件属性参数"><span>配置文件属性参数</span></a></h2><h2 id="继承spring-boot父级项目" tabindex="-1"><a class="header-anchor" href="#继承spring-boot父级项目"><span>继承spring boot父级项目</span></a></h2><h2 id="maven依赖" tabindex="-1"><a class="header-anchor" href="#maven依赖"><span>maven依赖</span></a></h2><h2 id="maven插件" tabindex="-1"><a class="header-anchor" href="#maven插件"><span>maven插件</span></a></h2><h2 id="启动器" tabindex="-1"><a class="header-anchor" href="#启动器"><span>启动器</span></a></h2><p>官方启动器准循的命名规范：<code>spring-boot-starter-&lt;名称&gt;</code> 第三方启动器的命名规范：<code>&lt;名称&gt;-spring-boot-starter</code></p><h2 id="cache" tabindex="-1"><a class="header-anchor" href="#cache"><span>cache</span></a></h2><p><code>@RestController</code>：标记为controller层的bean对象 <code>@RequestMapping</code>：请求路径映射 <code>@SpringBootApplication</code>：标记为启动器类</p><h3 id="启动-引导类" tabindex="-1"><a class="header-anchor" href="#启动-引导类"><span>启动/引导类</span></a></h3><blockquote><ul><li><code>@SpringBootApplication</code>：标记成SpringBoot的启动/引导类。</li><li><code>@Configuration</code>：标记为配置类。</li><li><code>@ComponentScan</code>：配置扫描包的路径。</li><li><code>@ImportResource</code>：加载XML配置文件。</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="配置类" tabindex="-1"><a class="header-anchor" href="#配置类"><span>配置类</span></a></h3><blockquote><ul><li><code>@Configuration()</code>：spring底层会给配置创建cglib动态代理，用于防止每次调用本类的bean方法而重新创建对象，默认是启用状态的单例bean。</li><li><code>@EnableConfigurationProperties()</code>：启用可以在配置类设置的属性对应的类。</li></ul></blockquote><h3 id="标记bean对象" tabindex="-1"><a class="header-anchor" href="#标记bean对象"><span>标记bean对象</span></a></h3><blockquote><ul><li><code>@RestController</code>：标记为controller层的bean对象。将<code>@Controller</code>和<code>@ResponseBody</code>合二为一。</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求url映射" tabindex="-1"><a class="header-anchor" href="#请求url映射"><span>请求URL映射</span></a></h3><p>普通风格的资源请求路径</p><blockquote><ul><li><code>@RequestMapping</code>：方法注解，请求URL路径映射。</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"> <span class="token comment">// 接收,请求方式限制,可以不进行请求方法限制</span></span>
<span class="line"> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span>&quot;<span class="token operator">/</span>users<span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span></span>
<span class="line"> <span class="token comment">// 响应</span></span>
<span class="line"> <span class="token annotation punctuation">@ResponseBody</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot;返回响应&quot;</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>REST风格的资源请求路径</p><blockquote><ul><li><code>@GetMapping</code>：方法注解，请求方式限制，仅支持<code>get</code>请求方式。</li><li><code>@PostMapping</code>：方法注解，请求方式限制，仅支持<code>post</code>请求方式。</li><li><code>@PutMapping</code>：方法注解，请求方式限制，仅支持<code>put</code>请求方式。</li><li><code>@DeleteMapping</code>：方法注解，请求方式限制，仅支持<code>delete</code>请求方式。</li></ul></blockquote><blockquote><ul><li><code>@PathVariable</code>：形参注解，绑定路径参数与处理器方式形参间的关系，要求路径参数名与形参名一致。</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;user/{id}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注入-绑定-配置文件中的属性" tabindex="-1"><a class="header-anchor" href="#注入-绑定-配置文件中的属性"><span>注入（绑定）配置文件中的属性</span></a></h3><blockquote><ul><li><code>@ConfigurationProperties(prefix=&quot;&lt;文件名&gt;&quot;)</code>：读取<code>yaml</code>配置文件的数据。</li><li><code>@PropertySource(&quot;classpath:&lt;文件名&gt;&quot;)</code>：读取<code>properties</code>配置文件的数据。</li></ul></blockquote><h3 id="标记为测试类" tabindex="-1"><a class="header-anchor" href="#标记为测试类"><span>标记为测试类</span></a></h3><blockquote><ul><li><code>@SpringBootTest</code>：在类上定义，标记为测试类。</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 指定spring boot的启动/引导类</span></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32)]))}const p=n(t,[["render",i]]),r=JSON.parse('{"path":"/software/Library-Maven-SpringBoot2-%E6%B3%A8%E8%A7%A3.html","title":"Library - Maven - SpringBoot 2 - 注解","lang":"zh-CN","frontmatter":{"title":"Library - Maven - SpringBoot 2 - 注解","author":"魔术桌","cover":"","category":["软件程序/类库"],"date":"2024-09-24T00:00:00.000Z","tag":["进度-待完善","查询手册"],"description":"文章摘要： 摘要内容。 接收请求数据 @RequestBody：用于接收json对象数据。普通风格。 @RequestParm：用于接收URL地址或表单进行传递参数。若传递的不是json对象数据，则使用该方法。普通风格。 @PathVariable：用于接收路径参数，使用{参数名称}的格式描述路径参数。参数数量较少时使用REST风格，通常传递id值。 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Library - Maven - SpringBoot 2 - 注解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Library-Maven-SpringBoot2-%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Library - Maven - SpringBoot 2 - 注解"}],["meta",{"property":"og:description","content":"文章摘要： 摘要内容。 接收请求数据 @RequestBody：用于接收json对象数据。普通风格。 @RequestParm：用于接收URL地址或表单进行传递参数。若传递的不是json对象数据，则使用该方法。普通风格。 @PathVariable：用于接收路径参数，使用{参数名称}的格式描述路径参数。参数数量较少时使用REST风格，通常传递id值。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"查询手册"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Library-Maven-SpringBoot2-注解.md","excerpt":"<p><strong>文章摘要：</strong> 摘要内容。</p>\\n"}');export{p as comp,r as data};
