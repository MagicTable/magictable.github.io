import{_ as n,c as s,a as e,o as t}from"./app-D67BBu3k.js";const o={};function l(i,a){return t(),s("div",null,a[0]||(a[0]=[e(`<p><strong>文章摘要：</strong> 提供了一系列元注解（meta-annotations）。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>简要说明</p><ul><li>提供了一系列元注解（meta-annotations）。</li><li>这些注解用于标注代码，以便于在运行时或编译时提供额外的信息或行为。</li><li>这些注解通常用于声明资源的依赖、安全约束、事务属性等。</li></ul><p>主要功能</p><ul><li><strong>资源管理</strong>：例如 <code>@Resource</code> 注解用于注入外部资源，如数据库连接或 JMS 队列。</li><li><strong>事务管理</strong>：<code>@Transactional</code> 注解用于声明方法或类的事务属性。</li><li><strong>安全性</strong>：如 <code>@RolesAllowed</code> 注解用于声明访问控制，指定哪些角色可以访问被注解的方法或类。</li><li><strong>依赖注入</strong>：<code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解用于声明初始化和销毁回调方法。</li><li><strong>其他</strong>：包括 <code>@Generated</code>（标记自动生成的代码）、<code>@Priority</code>（定义注解的优先级）等。</li></ul><p>注意事项</p><ul><li><strong>不包含在 Java SE</strong>：<code>javax.annotation</code> 包是 Java EE 的一部分，不是 Java SE 的标准库。在纯 Java SE 环境中使用时，可能需要额外添加依赖。</li><li><strong>替代方案</strong>：随着 Java 的演变，一些注解已经有了替代方案，例如在 Spring 框架中，<code>@Resource</code> 可以被 <code>@Autowired</code> 替代。</li><li><strong>版本兼容性</strong>：不同的 Java EE 版本可能包含不同版本的 <code>javax.annotation</code>，需要注意兼容性问题。</li></ul><p>适用场景</p><ul><li><strong>Java EE 应用</strong>：在 Java EE 环境（如 GlassFish、WildFly 等）中，<code>javax.annotation</code> 中的注解用于声明企业级特性。</li><li><strong>Spring 应用</strong>：尽管 Spring 提供了自己的注解，但它也支持 <code>javax.annotation</code> 中的某些注解，尤其是在集成 Java EE 和 Spring 的应用中。</li><li><strong>代码生成</strong>：<code>@Generated</code> 注解用于标记由工具或框架自动生成的代码，有助于开发者识别和维护代码。</li></ul><h3 id="主要注解" tabindex="-1"><a class="header-anchor" href="#主要注解"><span>主要注解</span></a></h3><h4 id="_2-1-generated" tabindex="-1"><a class="header-anchor" href="#_2-1-generated"><span>2.1 @Generated</span></a></h4><ul><li>用于标记由工具、生成器或其他自动化手段生成的代码。</li></ul><h4 id="_2-2-postconstruct" tabindex="-1"><a class="header-anchor" href="#_2-2-postconstruct"><span>2.2 @PostConstruct</span></a></h4><ul><li>标记一个初始化方法，该方法在依赖注入完成后将被调用，用于执行任何必要的初始化。</li></ul><h4 id="_2-3-predestroy" tabindex="-1"><a class="header-anchor" href="#_2-3-predestroy"><span>2.3 @PreDestroy</span></a></h4><ul><li>标记一个销毁方法，该方法在容器关闭之前被调用，用于执行清理操作。</li></ul><h4 id="_2-4-resource" tabindex="-1"><a class="header-anchor" href="#_2-4-resource"><span>2.4 @Resource</span></a></h4><ul><li>用于自动注入资源，如数据源、JMS 队列等。</li></ul><h4 id="_2-5-resources" tabindex="-1"><a class="header-anchor" href="#_2-5-resources"><span>2.5 @Resources</span></a></h4><ul><li>用于自动注入多个资源。</li></ul><h4 id="_2-6-singleton" tabindex="-1"><a class="header-anchor" href="#_2-6-singleton"><span>2.6 @Singleton</span></a></h4><ul><li>表示一个类应该被视为单例，通常用于 EJB 中。</li></ul><h4 id="_2-7-rolesallowed" tabindex="-1"><a class="header-anchor" href="#_2-7-rolesallowed"><span>2.7 @RolesAllowed</span></a></h4><ul><li>用于声明哪些安全角色可以访问被注解的方法或类。</li></ul><h4 id="_2-8-runas" tabindex="-1"><a class="header-anchor" href="#_2-8-runas"><span>2.8 @RunAs</span></a></h4><ul><li>用于指定一个安全角色，用于执行被注解的类。</li></ul><h4 id="_2-9-permitall" tabindex="-1"><a class="header-anchor" href="#_2-9-permitall"><span>2.9 @PermitAll</span></a></h4><ul><li>允许所有角色访问被注解的方法或类。</li></ul><h4 id="_2-10-denyall" tabindex="-1"><a class="header-anchor" href="#_2-10-denyall"><span>2.10 @DenyAll</span></a></h4><ul><li>禁止所有角色访问被注解的方法或类。</li></ul><h4 id="_2-11-declareroles" tabindex="-1"><a class="header-anchor" href="#_2-11-declareroles"><span>2.11 @DeclareRoles</span></a></h4><ul><li>用于声明应用程序定义的安全角色。</li></ul><h4 id="_2-12-managedobject" tabindex="-1"><a class="header-anchor" href="#_2-12-managedobject"><span>2.12 @ManagedObject</span></a></h4><ul><li>标记一个类作为受管理对象，通常用于 JMX。</li></ul><h4 id="_2-13-priority" tabindex="-1"><a class="header-anchor" href="#_2-13-priority"><span>2.13 @Priority</span></a></h4><ul><li>用于指定注解类型的优先级。</li></ul><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><ul><li>使用 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解进行生命周期管理。</li><li>使用 <code>@Resource</code> 注解进行依赖注入。</li><li>使用 <code>@RolesAllowed</code> 等安全注解进行方法级别的安全控制。</li><li>使用 <code>@Generated</code> 标记自动生成的代码，以便开发者知道哪些代码是自动生成的。</li></ul><h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PreDestroy</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">RolesAllowed</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationExample</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;dataSource&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>DataSource</span> dataSource<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@PostConstruct</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 初始化方法，在依赖注入完成后被调用</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@PreDestroy</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 清理方法，在容器关闭之前被调用</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@RolesAllowed</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">secureMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 只有具有 &quot;admin&quot; 角色的用户可以访问此方法</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><code>javax.annotation</code> 包提供了丰富的注解，用于代码的元数据标记，有助于实现依赖注入、生命周期管理、安全控制等功能。这些注解是 Java 企业版开发的重要组成部分，理解并正确使用它们对于编写清晰、可维护的企业级应用程序至关重要。随着 Java 的演进，一些注解可能被新的 API 或规范所取代，因此开发者应关注最新的 Java 规范更新。</p><h2 id="javax-annotation-processing" tabindex="-1"><a class="header-anchor" href="#javax-annotation-processing"><span><code>javax.annotation.processing</code></span></a></h2><p>用于声明注释处理器和允许注释处理器与注释处理工具环境通信的工具。</p>`,45)]))}const c=n(o,[["render",l]]),r=JSON.parse('{"path":"/software/Language-Java-JavaSE-API-%E3%80%8Cjavax.annotation%E3%80%8D.html","title":"Language - Java - Java SE - API - 「javax.annotation」","lang":"zh-CN","frontmatter":{"title":"Language - Java - Java SE - API - 「javax.annotation」","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2024-12-24T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： 提供了一系列元注解（meta-annotations）。 介绍 简要说明 提供了一系列元注解（meta-annotations）。 这些注解用于标注代码，以便于在运行时或编译时提供额外的信息或行为。 这些注解通常用于声明资源的依赖、安全约束、事务属性等。 主要功能 资源管理：例如 @Resource 注解用于注入外部资源，如数据库连接或 J...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Java - Java SE - API - 「javax.annotation」\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Java-JavaSE-API-%E3%80%8Cjavax.annotation%E3%80%8D.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Java - Java SE - API - 「javax.annotation」"}],["meta",{"property":"og:description","content":"文章摘要： 提供了一系列元注解（meta-annotations）。 介绍 简要说明 提供了一系列元注解（meta-annotations）。 这些注解用于标注代码，以便于在运行时或编译时提供额外的信息或行为。 这些注解通常用于声明资源的依赖、安全约束、事务属性等。 主要功能 资源管理：例如 @Resource 注解用于注入外部资源，如数据库连接或 J..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-12-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Java-JavaSE-API-「javax.annotation」.md","excerpt":"<p><strong>文章摘要：</strong> 提供了一系列元注解（meta-annotations）。</p>\\n"}');export{c as comp,r as data};
