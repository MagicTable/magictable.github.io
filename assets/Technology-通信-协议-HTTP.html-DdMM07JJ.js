import{_ as o,c as l,a,b as i,d as t,e as s,w as r,r as c,o as d}from"./app-D67BBu3k.js";const T="/assets/Technology-%E9%80%9A%E4%BF%A1-%E5%8D%8F%E8%AE%AE-HTTP-%E8%AF%B7%E6%B1%82%E6%A0%BC%E5%BC%8F-B_rdBmCn.png",p="/assets/Technology-%E9%80%9A%E4%BF%A1-%E5%8D%8F%E8%AE%AE-HTTP-%E5%93%8D%E5%BA%94%E6%A0%BC%E5%BC%8F-CMgz7y4E.png",h={};function g(m,e){const n=c("RouteLink");return d(),l("div",null,[e[2]||(e[2]=a('<p><strong>文章摘要：</strong> HTTP（超文本传输协议）是互联网上应用最为广泛的协议之一，主要用于在Web服务器和客户端浏览器之间传输数据。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>HTTP是一种无状态的、应用层的通信协议。</li><li>定义了客户端（通常是浏览器）和服务器之间请求和响应的格式。</li><li>HTTP使用统一资源定位符（URLs）来定位网络上的资源，并通过一系列的方法（如GET、POST等）来操作这些资源。</li></ul><p>主要功能</p><ul><li><strong>资源请求</strong>：客户端可以通过HTTP请求访问服务器上的资源，如HTML页面、图片、视频等。</li><li><strong>数据传输</strong>：HTTP支持将请求的数据和响应的数据在客户端和服务器之间传输。</li><li><strong>状态码反馈</strong>：服务器通过返回不同的状态码（如200表示成功，404表示未找到）来告知客户端请求的处理结果。</li><li><strong>会话管理</strong>：虽然HTTP本身是无状态的，但通过Cookie等技术可以在客户端和服务器之间维护会话状态。</li></ul><p>注意事项</p><ul><li><strong>安全性</strong>：HTTP不提供数据加密，容易受到中间人攻击。对于敏感数据的传输，应使用HTTPS（HTTP Secure）。</li><li><strong>数据完整性</strong>：HTTP不保证数据的完整性，可能会在传输过程中被篡改。HTTPS通过SSL/TLS加密可以提供更好的数据完整性保护。</li><li><strong>性能优化</strong>：HTTP请求可能会影响页面加载速度，应合理使用缓存、压缩等技术来优化性能。</li><li><strong>错误处理</strong>：服务器和客户端都应妥善处理HTTP错误，如重定向、错误提示等。</li><li><strong>兼容性</strong>：不同的HTTP版本（如HTTP/1.1、HTTP/2）可能在功能和支持上有所不同，需要确保客户端和服务器之间的兼容性。</li></ul><p>适用场景</p><ul><li><strong>网页浏览</strong>：用户通过浏览器访问网页时，使用HTTP协议来请求和接收网页内容。</li><li><strong>API交互</strong>：Web服务通常使用HTTP协议来提供API接口，供客户端应用程序调用。</li><li><strong>文件传输</strong>：HTTP协议可以用于上传和下载文件，如通过浏览器上传图片或下载软件安装包。</li><li><strong>单页应用（SPA）</strong>：现代单页应用通常使用HTTP协议与后端进行数据交互，实现动态内容更新。</li><li><strong>移动应用</strong>：移动应用经常使用HTTP协议与服务器进行数据同步和更新。</li></ul><h2 id="格式详情" tabindex="-1"><a class="header-anchor" href="#格式详情"><span>格式详情</span></a></h2><ul><li><strong>URI</strong>：统一资源标识符，代表网络中某个资源的名称或地址，用来标识网络上的资源，包括了URL和URN。</li><li><strong>URL</strong>：统一资源定位符，网络资源的地址，告诉你如何找到它。</li><li><strong>URN</strong>：Uniform Resource Name，统一资源名称。</li></ul><p>例子：<code>http://www.baidu.com:80/index.html?name=xiaoming&amp;age=18#a</code></p><ul><li>协议：<code>http</code></li><li>域名/IP：<code>www.baidu.com</code> == <code>202.108.22.5</code></li><li>端口：<code>80</code></li><li>请求静态资源名称/请求模块：<code>/login</code>、<code>/index.html</code></li><li>参数：<code>name=xiaoming&amp;age=18</code></li><li>锚点：<code>a</code></li></ul><h2 id="请求格式" tabindex="-1"><a class="header-anchor" href="#请求格式"><span>请求格式</span></a></h2><ul><li>客户端发送请求：<code>request</code></li><li>请求头中的内容是以“键值对”的形式存储。</li></ul><blockquote><p><img src="'+T+`" alt="请求格式"></p></blockquote><h3 id="请求方法" tabindex="-1"><a class="header-anchor" href="#请求方法"><span>请求方法</span></a></h3><ul><li>POST：Create：提交表单数据</li><li>GET：Read，检索数据</li><li>PUT：Update，修改数据</li><li>DELETE：Delete，删除数据</li></ul><h3 id="请求头部" tabindex="-1"><a class="header-anchor" href="#请求头部"><span>请求头部</span></a></h3><ul><li></li></ul><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="响应格式" tabindex="-1"><a class="header-anchor" href="#响应格式"><span>响应格式</span></a></h2><ul><li>服务端返回响应：<code>response</code></li></ul><blockquote><p><img src="`+p+'" alt="响应格式"></p></blockquote><h3 id="响应状态代码" tabindex="-1"><a class="header-anchor" href="#响应状态代码"><span>响应状态代码</span></a></h3><ul><li>响应状态代码（HTTP Status Codes）是HTTP协议的一部分。</li><li>由服务器发送给客户端，以指示HTTP请求的处理结果。</li><li>状态代码分为五类：1xx（信息性状态码）、2xx（成功状态码）、3xx（重定向状态码）、4xx（客户端错误状态码）、5xx（服务器错误状态码）</li></ul>',28)),i("p",null,[e[1]||(e[1]=t("详细总结：")),s(n,{to:"/note/Technology-%E9%80%9A%E4%BF%A1-%E5%8D%8F%E8%AE%AE-HTTP-%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E4%BB%A3%E7%A0%81.html"},{default:r(()=>e[0]||(e[0]=[t("Technology-通信-协议-HTTP-响应状态代码")])),_:1,__:[0]})]),e[3]||(e[3]=a(`<h3 id="响应头部" tabindex="-1"><a class="header-anchor" href="#响应头部"><span>响应头部</span></a></h3><ul><li></li></ul><h3 id="案例-1" tabindex="-1"><a class="header-anchor" href="#案例-1"><span>案例</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="dns域名服务" tabindex="-1"><a class="header-anchor" href="#dns域名服务"><span>DNS域名服务</span></a></h2><p>应用层的协议 如果要使用域名完成网络通信，必须先从域名服务器获取域名对应的IP地址</p><p>用于记录IP地址</p><p>域名 = 子域名 + 二极域名 + 根域名</p><h2 id="扩展提示" tabindex="-1"><a class="header-anchor" href="#扩展提示"><span>扩展提示</span></a></h2><ul><li>DOT数据传输对象</li><li>TCP传输协议，将传输的数据打包在一个8192字节的数据包中，当数据比较大时就会打包在多个数据包中。在正式传输前会先告诉目标计算机将要发送的数据大小和相关信息。</li></ul>`,10))])}const P=o(h,[["render",g]]),E=JSON.parse('{"path":"/note/Technology-%E9%80%9A%E4%BF%A1-%E5%8D%8F%E8%AE%AE-HTTP.html","title":"Technology - 通信 - 协议 - HTTP","lang":"zh-CN","frontmatter":{"title":"Technology - 通信 - 协议 - HTTP","author":"魔术桌","cover":"","category":["学习笔记/技术"],"date":"2024-06-16T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： HTTP（超文本传输协议）是互联网上应用最为广泛的协议之一，主要用于在Web服务器和客户端浏览器之间传输数据。 简介 简要说明 HTTP是一种无状态的、应用层的通信协议。 定义了客户端（通常是浏览器）和服务器之间请求和响应的格式。 HTTP使用统一资源定位符（URLs）来定位网络上的资源，并通过一系列的方法（如GET、POST等）来操作这些...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Technology - 通信 - 协议 - HTTP\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/note/Technology-%E9%80%9A%E4%BF%A1-%E5%8D%8F%E8%AE%AE-HTTP.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Technology - 通信 - 协议 - HTTP"}],["meta",{"property":"og:description","content":"文章摘要： HTTP（超文本传输协议）是互联网上应用最为广泛的协议之一，主要用于在Web服务器和客户端浏览器之间传输数据。 简介 简要说明 HTTP是一种无状态的、应用层的通信协议。 定义了客户端（通常是浏览器）和服务器之间请求和响应的格式。 HTTP使用统一资源定位符（URLs）来定位网络上的资源，并通过一系列的方法（如GET、POST等）来操作这些..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-06-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"note/Technology-通信-协议-HTTP.md","excerpt":"<p><strong>文章摘要：</strong> HTTP（超文本传输协议）是互联网上应用最为广泛的协议之一，主要用于在Web服务器和客户端浏览器之间传输数据。</p>\\n"}');export{P as comp,E as data};
