import{_ as t,c as p,b as a,a as l,d as s,e as o,w as c,r as i,o as u}from"./app-D67BBu3k.js";const r={},d={class:"hint-container info"};function k(g,n){const e=i("RouteLink");return u(),p("div",null,[n[6]||(n[6]=a("p",null,[a("strong",null,"文章摘要："),s(" LangChain4j 是一个旨在简化将大型语言模型（LLMs）集成到 Java 应用程序中的框架。")],-1)),n[7]||(n[7]=a("div",{class:"hint-container important"},[a("p",{class:"hint-container-title"},"重要"),a("p",null,"前提条件"),a("ul",null,[a("li",null,"^ Java 17")])],-1)),a("div",d,[n[2]||(n[2]=a("p",{class:"hint-container-title"},"相关信息",-1)),n[3]||(n[3]=a("p",null,"外部相关文章",-1)),n[4]||(n[4]=a("ul",null,[a("li",null,[s("官方文档："),a("a",{href:"https://docs.langchain4j.dev/",target:"_blank",rel:"noopener noreferrer"},"网站链接")])],-1)),n[5]||(n[5]=a("p",null,"内部相关文章",-1)),a("ul",null,[a("li",null,[n[1]||(n[1]=s("API查询手册：")),o(e,{to:"/software/Library-Maven-LangChain4j-API.html"},{default:c(()=>n[0]||(n[0]=[s("Library-Maven-LangChain4j-API")])),_:1,__:[0]})])])]),n[8]||(n[8]=l(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>LangChain4j 的目标是简化 LLMs 与 Java 应用程序的集成。</li><li><strong>统一API</strong>：LLM 提供程序（如 OpenAI 或 Google Vertex AI）和嵌入（矢量）存储（如 Pinecone 或 Milvus）使用专有 API。</li><li><strong>综合工具箱</strong>：社区一直在构建许多 LLM 驱动的应用程序，识别常见的抽象、模式和技术。包括从低级提示模板、聊天内存管理和函数调用到 AI 服务和 RAG 等高级模式的工具。对于每个抽象，我们提供了一个接口以及基于通用技术的多个即用型实现。</li></ul><p>主要功能</p><ul><li></li></ul><p>注意事项</p><ul><li></li></ul><p>适用场景</p><ul><li></li></ul><h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能"><span>功能</span></a></h2><ul><li>LLM</li><li>嵌入（向量）存储</li><li>嵌入模型</li><li>图像生成模型</li><li>评分（重新排名）模型</li><li>审核模型</li><li>支持文本和图像作为输入（多模态）</li><li>AI服务（高级LLM API）</li><li>提示词模板</li><li>持久和内存中聊天内存算法的实现：消息窗口和令牌窗口</li><li>来自LLM的响应流</li><li>常见 Java 类型和自定义 POJO 的输出解析器</li><li>工具（函数调用）</li><li>动态工具（执行动态生成的LLM代码）</li><li>RAG（检索增强生成）</li><li>文本分类</li><li>用于标记化和估计令牌计数的工具</li><li>Kotlin扩展：使用Kotlin的协程功能对聊天交互进行异步非阻塞处理。</li></ul><h2 id="_2个抽象级别" tabindex="-1"><a class="header-anchor" href="#_2个抽象级别"><span>2个抽象级别</span></a></h2><p>LangChain4j在两个抽象级别上运行</p><p>低水平</p><ul><li>拥有最大自由度和访问所有低级组件。</li><li>ChatModel、UserMessage、AiMessage、EmbeddingStore、Embedding等。</li></ul><p>高水平</p><ul><li>使用AI服务等高级API与LLM进行交互。</li><li>隐藏所有复杂性和样板。</li><li>可以在此基础上调整和微调行为。</li><li>以声明的方式完成。</li></ul><h2 id="langchain4j库结构" tabindex="-1"><a class="header-anchor" href="#langchain4j库结构"><span>LangChain4j库结构</span></a></h2><ul><li><code>langchain4j-core</code>：定义了核心抽象。</li><li><code>langchain4j</code>：包含了有用的工具。</li><li><code>langchain4j-{integration}</code>：每个模块都提供与各种 LLM，并将商店嵌入到 LangChain4j 中。您可以独立使用 langchain4j-{integration} 模块。要获得其他功能，只需导入主 langchain4j 依赖项即可。</li></ul><h2 id="maven坐标" tabindex="-1"><a class="header-anchor" href="#maven坐标"><span>Maven坐标</span></a></h2><p>基本依赖</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--LangChain4j智能体框架--&gt;</span></span>
<span class="line"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>dev.langchain4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>langchain4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>版本号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 请替换为实际的版本号 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模型依赖</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--LangChain4j - 语言模型 - ZhipuAI(智普AI)--&gt;</span></span>
<span class="line"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>dev.langchain4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>langchain4j-zhipu-ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>版本号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 请替换为实际的版本号 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--LangChain4j - 语言模型 - Qianfan(千帆)--&gt;</span></span>
<span class="line"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>dev.langchain4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>langchain4j-qianfan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>版本号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 请替换为实际的版本号 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="model模型" tabindex="-1"><a class="header-anchor" href="#model模型"><span><code>Model</code>模型</span></a></h2><h3 id="模型类型" tabindex="-1"><a class="header-anchor" href="#模型类型"><span>模型类型</span></a></h3><div class="hint-container warning"><p class="hint-container-title">警告</p><ul><li>LangChain4j 中将不再扩展对 LanguageModel 的支持，因此在所有新功能中，我们将使用 ChatModel API。</li><li><code>ChatModel</code> 是与 LangChain4j 中的 LLM 交互的低级 API，提供最大的功能和灵活性。</li></ul></div><ul><li><code>LanguageModel</code>，文本大模型，他们的 API 非常简单 - 他们接受 String 作为输入并返回 String 作为输出。此 API 现在已经过时，取而代之的是聊天 API（第二种 API 类型）。</li><li><code>ChatModel</code>：多模态大模型，它们接受多个 <code>ChatMessage</code> 作为输入，并返回单个 <code>AiMessage</code> 作为输出。 <code>ChatMessage</code> 通常包含文本，但一些 LLM 也支持其他模式（例如图像、音频等）。此类聊天模型的示例包括 OpenAI 的 <code>gpt-4o-mini</code> 和谷歌的 <code>gemini-1.5-pro</code>。</li><li><code>EmbeddingModel</code>：文本转换为嵌入式提示词的模型。</li><li><code>ImageModel</code>：文字生成图片、图片修改图片的模型。</li><li><code>ModerationModel</code>：违法文本内容检查的模型。</li><li><code>ScoringModel</code>：根据查询对多段文本进行评分（或排名），实质上确定每段文本与查询的相关性。</li></ul><h3 id="模型参数" tabindex="-1"><a class="header-anchor" href="#模型参数"><span>模型参数</span></a></h3><p>根据您选择的模型和提供程序，您可以调整许多参数，这些参数将定义：</p><ul><li>模型的输出：生成内容（文本、图像）的创造力或确定性水平、生成的内容量等。</li><li>连接性：基本 URL、授权密钥、超时、重试、日志记录等。</li></ul><blockquote><ul><li><code>modelName</code>：型号名称</li><li><code>temperature</code>：温度/随机性。</li><li><code>timeout</code>：超时。</li><li><code>max_tokens</code>：聊天补全中可以生成的令牌的最大数量。</li><li><code>frequencyPenalty</code>：频率惩罚。</li></ul></blockquote><h2 id="message消息" tabindex="-1"><a class="header-anchor" href="#message消息"><span><code>Message</code>消息</span></a></h2><blockquote><ul><li><code>UserMessage</code>：用户输入的消息。支持文本和图像。</li><li><code>AiMessage</code>：AI生成的消息，支持文本响应 （<code>String</code>） 或执行工具的请求 （<code>ToolExecutionRequest</code>）。</li><li><code>ToolExecutionResultMessage</code>：这是 <code>ToolExecutionRequest</code> 的结果。我们稍后会详细介绍这一点。</li><li><code>SystemMessage</code>：来自系统的消息。在此处编写有关LLM的角色设定和表现形式。</li></ul></blockquote><h2 id="memory记忆和history历史" tabindex="-1"><a class="header-anchor" href="#memory记忆和history历史"><span><code>Memory</code>记忆和<code>History</code>历史</span></a></h2><h3 id="驱逐策略" tabindex="-1"><a class="header-anchor" href="#驱逐策略"><span>驱逐策略</span></a></h3><p>为了适应 LLM 的上下文窗口。一次可以处理的令牌数量有上限LLM。在某些时候，对话可能会超过此限制。在这种情况下，应逐出某些消息。通常，最旧的消息会被逐出，但如果需要，可以实现更复杂的算法。为了控制成本。每个令牌都有成本，因此每次调用 LLM 的成本会逐渐增加。驱逐不必要的消息可以降低成本。</p><blockquote><ul><li><code>MessageWindowChatMemory</code>：作为滑动窗口，保留 <code>N</code> 条最近的消息并驱逐不再适合的旧消息。</li><li><code>TokenWindowChatMemory</code>：作为滑动窗口运行，但侧重于保留 <code>N</code> 个最新的<strong>令牌</strong>，根据需要逐出较旧的消息。信息是不可分割的。如果消息不合适，则会将其完全逐出。</li></ul></blockquote><h2 id="流式响应" tabindex="-1"><a class="header-anchor" href="#流式响应"><span>流式响应</span></a></h2><ul><li>提供了一种逐个令牌流式传输响应的方法，而不是等待生成整个文本。</li></ul><blockquote><ul><li><code>StreamingChatLanguageModel</code>：流式对话。</li></ul></blockquote><p>监听事件</p><blockquote><ul><li><code>onNext(String token)</code>：生成下一个 Token 时。</li><li><code>onComplete(Response&lt;T&gt; response)</code>：当 LLM 完成生成时。</li><li><code>onError(Throwable error)</code>：发生错误时。</li></ul></blockquote><h2 id="ai服务" tabindex="-1"><a class="header-anchor" href="#ai服务"><span>AI服务</span></a></h2><h3 id="结构化输出" tabindex="-1"><a class="header-anchor" href="#结构化输出"><span>结构化输出</span></a></h3><p>格式化LLM、解析LLM</p><h2 id="tools工具-函数调用" tabindex="-1"><a class="header-anchor" href="#tools工具-函数调用"><span>Tools工具（函数调用）</span></a></h2><h2 id="rag检索增强" tabindex="-1"><a class="header-anchor" href="#rag检索增强"><span>RAG检索增强</span></a></h2><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h2><h2 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h2><p>LangChain4j 使用 <a href="https://www.slf4j.org/" target="_blank" rel="noopener noreferrer">SLF4J</a> 进行日志记录， 允许您插入任何您喜欢的日志记录后端， 例如 <a href="https://logback.qos.ch/" target="_blank" rel="noopener noreferrer">Logback</a> 或 <a href="https://logging.apache.org/log4j/2.x/index.html" target="_blank" rel="noopener noreferrer">Log4j</a>）。</p><h2 id="llm-可观测性" tabindex="-1"><a class="header-anchor" href="#llm-可观测性"><span>## LLM 可观测性</span></a></h2><hr><h2 id="普通聊天" tabindex="-1"><a class="header-anchor" href="#普通聊天"><span>普通聊天</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">ChatLanguageModel</span> model <span class="token operator">=</span> <span class="token class-name">QianfanChatModel</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">apiKey</span><span class="token punctuation">(</span><span class="token string">&quot;你的api Key&quot;</span><span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">secretKey</span><span class="token punctuation">(</span><span class="token string">&quot;你的secret Key&quot;</span><span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">modelName</span><span class="token punctuation">(</span><span class="token string">&quot;模型名称&quot;</span><span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  </span>
<span class="line"><span class="token class-name">String</span> data <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="聊天-流式响应" tabindex="-1"><a class="header-anchor" href="#聊天-流式响应"><span>聊天 - 流式响应</span></a></h2><ul><li>打字机。</li><li>此处案例演示的是 Qianfan(千帆) 模型。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">StreamingChatLanguageModel</span> model <span class="token operator">=</span> <span class="token class-name">QianfanStreamingChatModel</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">apiKey</span><span class="token punctuation">(</span><span class="token string">&quot;你的api Key&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">secretKey</span><span class="token punctuation">(</span><span class="token string">&quot;你的secret Key&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">modelName</span><span class="token punctuation">(</span><span class="token string">&quot;模型名称&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">model<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StreamingResponseHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AiMessage</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> <span class="token annotation punctuation">@Override</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token annotation punctuation">@Override</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多轮对话-上下文" tabindex="-1"><a class="header-anchor" href="#多轮对话-上下文"><span>多轮对话（上下文）</span></a></h2><ul><li>LangChain4j 提供了一种使用<code>ConversationalChain</code>和<code>ChatMemory</code>记住对话上下文的方法。</li></ul><p>方案一</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">UserMessage</span> firstUserMessage <span class="token operator">=</span> <span class="token class-name">UserMessage</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, my name is Klaus&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">AiMessage</span> firstAiMessage <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>firstUserMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hi Klaus, how can I help you?</span></span>
<span class="line"><span class="token class-name">UserMessage</span> secondUserMessage <span class="token operator">=</span> <span class="token class-name">UserMessage</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;What is my name?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">AiMessage</span> secondAiMessage <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>firstUserMessage<span class="token punctuation">,</span> firstAiMessage<span class="token punctuation">,</span> secondUserMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Klaus</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方案二</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 设置聊天记忆次数</span></span>
<span class="line"><span class="token class-name">MessageWindowChatMemory</span> chatMemory <span class="token operator">=</span> <span class="token class-name">MessageWindowChatMemory</span><span class="token punctuation">.</span><span class="token function">withMaxMessages</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建会话</span></span>
<span class="line"><span class="token class-name">ConversationalChain</span> chain <span class="token operator">=</span> <span class="token class-name">ConversationalChain</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">chatLanguageModel</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">chatMemory</span><span class="token punctuation">(</span>chatMemory<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第一次对话</span></span>
<span class="line"><span class="token class-name">String</span> answer <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;你好，我叫魔术桌，是一名开发者，目前在对你进行测试，并整合到我的程序中。请告诉我今天记号。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第二次对话</span></span>
<span class="line">answer <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;请协助我&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取当前时间" tabindex="-1"><a class="header-anchor" href="#获取当前时间"><span>获取当前时间</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div><h2 id="检测是否存在敏感内容" tabindex="-1"><a class="header-anchor" href="#检测是否存在敏感内容"><span>检测是否存在敏感内容</span></a></h2><ul><li>校验输入的内容是否存在敏感内容。</li></ul><h2 id="文生图" tabindex="-1"><a class="header-anchor" href="#文生图"><span>文生图</span></a></h2>`,69))])}const h=t(r,[["render",k]]),v=JSON.parse('{"path":"/software/Library-Maven-LangChain4j.html","title":"Library - Maven - LangChain4j","lang":"zh-CN","frontmatter":{"title":"Library - Maven - LangChain4j","author":"魔术桌","cover":null,"category":["软件程序/类库"],"date":"2024-10-05T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： LangChain4j 是一个旨在简化将大型语言模型（LLMs）集成到 Java 应用程序中的框架。 重要 前提条件 ^ Java 17 相关信息 外部相关文章 官方文档：网站链接 内部相关文章 API查询手册： 简介 简要说明 LangChain4j 的目标是简化 LLMs 与 Java 应用程序的集成。 统一API：LLM 提供程序（如...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Library - Maven - LangChain4j\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Library-Maven-LangChain4j.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Library - Maven - LangChain4j"}],["meta",{"property":"og:description","content":"文章摘要： LangChain4j 是一个旨在简化将大型语言模型（LLMs）集成到 Java 应用程序中的框架。 重要 前提条件 ^ Java 17 相关信息 外部相关文章 官方文档：网站链接 内部相关文章 API查询手册： 简介 简要说明 LangChain4j 的目标是简化 LLMs 与 Java 应用程序的集成。 统一API：LLM 提供程序（如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-10-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Library-Maven-LangChain4j.md","excerpt":"<p><strong>文章摘要：</strong> LangChain4j 是一个旨在简化将大型语言模型（LLMs）集成到 Java 应用程序中的框架。</p>\\n"}');export{h as comp,v as data};
