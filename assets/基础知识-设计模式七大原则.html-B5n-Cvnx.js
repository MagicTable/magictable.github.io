import{_ as i,c as a,a as t,o as l}from"./app-D67BBu3k.js";const n={};function r(o,e){return l(),a("div",null,e[0]||(e[0]=[t('<p><strong>文章摘要：</strong> 设计模式七种原则汇总。</p><h3 id="单一职责原则" tabindex="-1"><a class="header-anchor" href="#单一职责原则"><span>单一职责原则</span></a></h3><ul><li>（Single Responsibility Principle，SRP）</li><li>一个类只负责一个职责或一个功能。</li><li>这个原则强调的是高内聚、低耦合，可以降低类的复杂度，提高代码的可读性、可维护性和可重用性。</li></ul><h3 id="开闭原则" tabindex="-1"><a class="header-anchor" href="#开闭原则"><span>开闭原则</span></a></h3><ul><li>（Open-Closed Principle，OCP）</li><li>一个类的行为应该是可扩展的，但是不可修改。</li><li>这个原则强调的是代码的可维护性和可扩展性，通过抽象化来避免修改已有代码的风险，从而降低软件维护的成本。</li></ul><h3 id="里氏替换原则" tabindex="-1"><a class="header-anchor" href="#里氏替换原则"><span>里氏替换原则</span></a></h3><ul><li>（Liskov Substitution Principle，LSP）</li><li>子类应该可以替换其父类并且不会影响程序的正确性。</li><li>这个原则强调的是面向对象的继承和多态特性，通过保证子类的行为和父类一致，从而提高代码的可维护性和可扩展性。</li></ul><h3 id="接口隔离原则" tabindex="-1"><a class="header-anchor" href="#接口隔离原则"><span>接口隔离原则</span></a></h3><ul><li>（Interface Segregation Principle，ISP）</li><li>一个类不应该依赖它不需要的接口，即一个类对其它类的依赖应该建立在最小的接口上。</li><li>这个原则强调的是接口设计的合理性，避免不必要的接口导致类之间的耦合性过高，从而提高代码的灵活性和可维护性。</li></ul><h3 id="依赖倒置原则" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则"><span>依赖倒置原则</span></a></h3><ul><li>（Dependency Inversion Principle，DIP）</li><li>依赖于抽象而不是依赖于具体实现。</li><li>这个原则强调的是代码的可扩展性和可维护性，通过抽象化来减少组件之间的耦合性，从而使得代码更加灵活、易于维护和扩展。</li></ul><h3 id="迪米特法则" tabindex="-1"><a class="header-anchor" href="#迪米特法则"><span>迪米特法则</span></a></h3><ul><li>（Law of Demeter，LoD）</li><li>也叫最少知识原则（Least Knowledge Principle，LKP），</li><li>一个对象应当对其他对象有尽可能少的了解，不需要了解的内容尽量不要去了解。</li><li>这个原则强调的是组件之间的松耦合，通过减少组件之间的依赖关系，提高代码的可维护性和可重用性。</li></ul><h3 id="组合-聚合复用原则" tabindex="-1"><a class="header-anchor" href="#组合-聚合复用原则"><span>组合/聚合复用原则</span></a></h3><ul><li>（Composite/Aggregate Reuse Principle，CARP）</li><li>尽量使用组合或聚合关系，而不是继承关系来达到代码复用的目的。</li><li>这个原则强调的是通过组合和聚合的方式来实现代码复用，避免继承带来的一些问题，如父类和子类之间的强耦合性，从而提高代码的灵活性和可维护性。</li></ul>',15)]))}const p=i(n,[["render",r]]),c=JSON.parse('{"path":"/software/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99.html","title":"基础知识 - 设计模式七大原则","lang":"zh-CN","frontmatter":{"title":"基础知识 - 设计模式七大原则","author":"魔术桌","cover":"","category":["软件程序/设计模式"],"tag":["进度-已完成","查询手册"],"date":"2024-06-17T00:00:00.000Z","description":"文章摘要： 设计模式七种原则汇总。 单一职责原则 （Single Responsibility Principle，SRP） 一个类只负责一个职责或一个功能。 这个原则强调的是高内聚、低耦合，可以降低类的复杂度，提高代码的可读性、可维护性和可重用性。 开闭原则 （Open-Closed Principle，OCP） 一个类的行为应该是可扩展的，但是不可...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础知识 - 设计模式七大原则\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"基础知识 - 设计模式七大原则"}],["meta",{"property":"og:description","content":"文章摘要： 设计模式七种原则汇总。 单一职责原则 （Single Responsibility Principle，SRP） 一个类只负责一个职责或一个功能。 这个原则强调的是高内聚、低耦合，可以降低类的复杂度，提高代码的可读性、可维护性和可重用性。 开闭原则 （Open-Closed Principle，OCP） 一个类的行为应该是可扩展的，但是不可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"查询手册"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/基础知识-设计模式七大原则.md","excerpt":"<p><strong>文章摘要：</strong> 设计模式七种原则汇总。</p>\\n"}');export{p as comp,c as data};
