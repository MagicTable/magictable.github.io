import{_ as e,c as n,a as s,o}from"./app-D67BBu3k.js";const c={};function i(l,a){return o(),n("div",null,a[0]||(a[0]=[s(`<p><strong>文章摘要：</strong> 包含了一系列实用程序类和集合框架。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>简要说明</p><ul><li>包含了一系列实用程序类和集合框架。</li><li>提供了用于处理日期、集合、事件监听、国际化、属性文件、随机数生成、栈、队列和其他实用功能。</li></ul><p>主要功能</p><ul><li><strong>集合框架</strong>：提供了接口和类，用于表示和操作集合，如 <code>List</code>、<code>Set</code>、<code>Map</code> 和 <code>Queue</code>。</li><li><strong>日期和时间</strong>：<code>Date</code>、<code>Calendar</code> 和 <code>TimeZone</code> 类用于处理日期和时间。</li><li><strong>事件监听和通知</strong>：<code>EventListener</code> 接口和 <code>Observable</code> 类用于实现事件监听机制。</li><li><strong>国际化</strong>：<code>Locale</code> 和 <code>ResourceBundle</code> 类用于支持应用程序的国际化。</li><li><strong>属性文件处理</strong>：<code>Properties</code> 类用于读取和写入属性文件。</li><li><strong>随机数生成</strong>：<code>Random</code> 类用于生成伪随机数。</li><li><strong>数据结构</strong>：如 <code>Stack</code>、<code>Queue</code>、<code>PriorityQueue</code>、<code>LinkedList</code>、<code>ArrayList</code>、<code>HashMap</code> 等。</li><li><strong>实用工具类</strong>：如 <code>Arrays</code>、<code>Collections</code>、<code>Comparator</code>、<code>Iterator</code>、<code>Enumeration</code> 等。</li></ul><p>注意事项</p><ul><li><strong>集合类型选择</strong>：根据具体需求选择合适的集合类型，例如，如果需要快速随机访问，应使用 <code>ArrayList</code> 而不是 <code>LinkedList</code>。</li><li><strong>线程安全</strong>：大多数集合类不是线程安全的，如需在多线程环境中使用，应考虑使用同步包装器或并发集合。</li><li><strong>内存管理</strong>：大型集合可能占用大量内存，需要注意内存管理和优化。</li><li><strong>泛型使用</strong>：在集合中使用泛型可以提供类型安全，避免在运行时出现类型转换错误。</li><li><strong>迭代器使用</strong>：在使用迭代器遍历集合时，不要在迭代过程中修改集合的结构。</li></ul><p>适用场景</p><ul><li><strong>数据存储和检索</strong>：需要存储和检索对象集合的场景。</li><li><strong>日期和时间处理</strong>：需要操作日期和时间的场景。</li><li><strong>事件驱动编程</strong>：需要实现事件监听和通知机制的场景。</li><li><strong>国际化支持</strong>：需要根据不同地区和语言环境调整应用程序行为的场景。</li><li><strong>配置管理</strong>：需要读取和写入配置信息的场景。</li><li><strong>随机数据处理</strong>：需要生成随机数或随机数据的场景。</li><li><strong>算法实现</strong>：需要使用特定数据结构（如栈、队列）实现算法的场景。</li></ul><h2 id="java-util-scanner-待确认" tabindex="-1"><a class="header-anchor" href="#java-util-scanner-待确认"><span><code>java.util.Scanner</code>（待确认）</span></a></h2><ul><li>接收用户的键盘输入。</li></ul><p>实例化</p><ul><li><code>new Scanner(System.in)</code></li></ul><p>设置接收的数据类型</p><ul><li><code>&lt;对象&gt;.next()</code>：字符串。</li><li><code>&lt;对象&gt;.nextInt()</code>：整型。</li></ul><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	    <span class="token comment">//  实例化Scanner对象</span></span>
<span class="line">        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">		<span class="token comment">// 指定接收的数据类型，等待用户输入</span></span>
<span class="line">        <span class="token class-name">String</span> s <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">		<span class="token comment">// 输出到控制台</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入：&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java-util-concurrent" tabindex="-1"><a class="header-anchor" href="#java-util-concurrent"><span><code>java.util.concurrent</code></span></a></h2><p>在并发编程中通常有用的 Utility 类。</p><h2 id="java-util-concurrent-atomic" tabindex="-1"><a class="header-anchor" href="#java-util-concurrent-atomic"><span><code>java.util.concurrent.atomic</code></span></a></h2><p>一个小型类工具包，支持对单个变量进行无锁线程安全编程。</p><h2 id="java-util-concurrent-locks" tabindex="-1"><a class="header-anchor" href="#java-util-concurrent-locks"><span><code>java.util.concurrent.locks</code></span></a></h2><p>提供用于锁定和等待条件的框架的接口和类，该框架不同于内置同步和监视器。</p><h2 id="java-util-function" tabindex="-1"><a class="header-anchor" href="#java-util-function"><span><code>java.util.function</code></span></a></h2><p>_函数接口_为 lambda 表达式和方法引用提供目标类型。</p><h2 id="java-util-jar" tabindex="-1"><a class="header-anchor" href="#java-util-jar"><span><code>java.util.jar</code></span></a></h2><p>提供用于读取和写入 JAR （Java ARchive） 文件格式的类，该格式基于标准 ZIP 文件格式和可选的清单文件。</p><h2 id="java-util-logging" tabindex="-1"><a class="header-anchor" href="#java-util-logging"><span><code>java.util.logging</code></span></a></h2><p>提供 JavaTM 2 平台的核心日志记录工具的类和接口。</p><p>日常又被称为 JUL（简称）。</p><h2 id="java-util-prefs" tabindex="-1"><a class="header-anchor" href="#java-util-prefs"><span><code>java.util.prefs</code></span></a></h2><p>此软件包允许应用程序存储和检索用户和系统首选项以及配置数据。</p><h2 id="java-util-regex" tabindex="-1"><a class="header-anchor" href="#java-util-regex"><span><code>java.util.regex</code></span></a></h2><p>用于将字符序列与正则表达式指定的模式匹配的类。</p><h2 id="java-util-spi" tabindex="-1"><a class="header-anchor" href="#java-util-spi"><span><code>java.util.spi</code></span></a></h2><p>java.util 包中的类的服务提供商类。</p><h2 id="java-util-stream" tabindex="-1"><a class="header-anchor" href="#java-util-stream"><span><code>java.util.stream</code></span></a></h2><p>支持对元素流进行函数式操作的类，例如对集合的 map-reduce 转换。</p><h2 id="java-util-zip" tabindex="-1"><a class="header-anchor" href="#java-util-zip"><span><code>java.util.zip</code></span></a></h2><p>提供用于读取和写入标准 ZIP 和 GZIP 文件格式的类。</p><h1 id="cache" tabindex="-1"><a class="header-anchor" href="#cache"><span>cache</span></a></h1><h3 id="主要概念" tabindex="-1"><a class="header-anchor" href="#主要概念"><span>主要概念</span></a></h3><h4 id="集合框架" tabindex="-1"><a class="header-anchor" href="#集合框架"><span>集合框架</span></a></h4><ul><li>Java 集合框架是一组接口和类，用于表示和操作对象集合。</li></ul><h4 id="事件模型" tabindex="-1"><a class="header-anchor" href="#事件模型"><span>事件模型</span></a></h4><ul><li>Java 的事件模型允许对象监听其他对象的事件，并在事件发生时得到通知。</li></ul><h4 id="日期和时间" tabindex="-1"><a class="header-anchor" href="#日期和时间"><span>日期和时间</span></a></h4><ul><li>提供了日期和时间操作的基本工具。</li></ul><h4 id="国际化" tabindex="-1"><a class="header-anchor" href="#国际化"><span>国际化</span></a></h4><ul><li>提供了处理本地化和格式化的工具。</li></ul><h3 id="主要类和接口" tabindex="-1"><a class="header-anchor" href="#主要类和接口"><span>主要类和接口</span></a></h3><h4 id="集合接口" tabindex="-1"><a class="header-anchor" href="#集合接口"><span>集合接口</span></a></h4><ul><li><code>Collection</code></li><li><code>List</code></li><li><code>Set</code></li><li><code>SortedSet</code></li><li><code>NavigableSet</code></li><li><code>Queue</code></li><li><code>Deque</code></li></ul><h4 id="集合实现" tabindex="-1"><a class="header-anchor" href="#集合实现"><span>集合实现</span></a></h4><ul><li><code>ArrayList</code></li><li><code>LinkedList</code></li><li><code>HashSet</code></li><li><code>LinkedHashSet</code></li><li><code>TreeSet</code></li><li><code>PriorityQueue</code></li><li><code>ArrayDeque</code></li></ul><h4 id="map-接口" tabindex="-1"><a class="header-anchor" href="#map-接口"><span>Map 接口</span></a></h4><ul><li><code>Map</code></li><li><code>SortedMap</code></li><li><code>NavigableMap</code></li></ul><h4 id="map-实现" tabindex="-1"><a class="header-anchor" href="#map-实现"><span>Map 实现</span></a></h4><ul><li><code>HashMap</code></li><li><code>LinkedHashMap</code></li><li><code>TreeMap</code></li><li><code>Hashtable</code></li><li><code>Properties</code></li></ul><h4 id="工具类" tabindex="-1"><a class="header-anchor" href="#工具类"><span>工具类</span></a></h4><ul><li><code>Collections</code></li><li><code>Arrays</code></li></ul><h4 id="日期和时间-1" tabindex="-1"><a class="header-anchor" href="#日期和时间-1"><span>日期和时间</span></a></h4><ul><li><code>Date</code></li><li><code>Calendar</code></li><li><code>TimeZone</code></li><li><code>SimpleDateFormat</code></li></ul><h4 id="国际化-1" tabindex="-1"><a class="header-anchor" href="#国际化-1"><span>国际化</span></a></h4><ul><li><code>Locale</code></li><li><code>ResourceBundle</code></li></ul><h4 id="事件模型-1" tabindex="-1"><a class="header-anchor" href="#事件模型-1"><span>事件模型</span></a></h4><ul><li><code>EventListener</code></li><li><code>EventObject</code></li></ul><h4 id="其他实用工具" tabindex="-1"><a class="header-anchor" href="#其他实用工具"><span>其他实用工具</span></a></h4><ul><li><code>Iterator</code></li><li><code>ListIterator</code></li><li><code>Enumeration</code></li><li><code>Random</code></li><li><code>Scanner</code></li><li><code>Observable</code></li><li><code>Observer</code></li></ul><h2 id="学习总结" tabindex="-1"><a class="header-anchor" href="#学习总结"><span>学习总结</span></a></h2><h4 id="集合框架-1" tabindex="-1"><a class="header-anchor" href="#集合框架-1"><span>集合框架</span></a></h4><ul><li><code>Collection</code> 接口是集合框架的根接口，定义了集合的基本操作。</li><li><code>List</code> 接口扩展了 <code>Collection</code>，提供了有序集合的操作。</li><li><code>Set</code> 接口扩展了 <code>Collection</code>，提供了无重复元素的集合操作。</li><li><code>Map</code> 接口提供了键值对操作，与 <code>Collection</code> 是分离的。</li><li><code>Collections</code> 类包含操作集合的静态方法，如排序、查找和同步。</li><li>Java 8 引入了 <code>Stream</code> API，允许以声明式方式处理集合数据。</li></ul><h4 id="日期和时间-2" tabindex="-1"><a class="header-anchor" href="#日期和时间-2"><span>日期和时间</span></a></h4><ul><li><code>Date</code> 类表示特定的瞬间，精确到毫秒。</li><li><code>Calendar</code> 类提供了日期时间的计算功能。</li><li><code>TimeZone</code> 表示时区偏移量，<code>SimpleDateFormat</code> 用于格式化和解析日期字符串。</li></ul><h4 id="国际化-2" tabindex="-1"><a class="header-anchor" href="#国际化-2"><span>国际化</span></a></h4><ul><li><code>Locale</code> 类表示特定的地理、政治和文化地区。</li><li><code>ResourceBundle</code> 类用于国际化和本地化，允许根据 <code>Locale</code> 加载资源。</li></ul><h4 id="事件模型-2" tabindex="-1"><a class="header-anchor" href="#事件模型-2"><span>事件模型</span></a></h4><ul><li><code>EventListener</code> 是一个标记接口，表示对象可以接收事件通知。</li><li><code>EventObject</code> 是所有事件状态对象的基础类。</li></ul><h4 id="其他实用工具-1" tabindex="-1"><a class="header-anchor" href="#其他实用工具-1"><span>其他实用工具</span></a></h4><ul><li><code>Iterator</code> 和 <code>ListIterator</code> 用于遍历集合。</li><li><code>Random</code> 类用于生成伪随机数。</li><li><code>Scanner</code> 类用于解析基本类型和字符串。</li><li><code>Observable</code> 和 <code>Observer</code> 是 Java 早期的事件模型，用于实现观察者模式。</li></ul><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h4><ul><li>在 Java 8 中，推荐使用 <code>HashMap</code> 而不是 <code>Hashtable</code>，因为 <code>HashMap</code> 提供了更好的性能，并且允许一个 null 键和多个 null 值。</li><li><code>Vector</code> 和 <code>Stack</code> 类已经被 <code>ArrayList</code> 和 <code>ArrayDeque</code> 取代，因为后者提供了更好的性能和更现代的 API。</li><li>在多线程环境中，应使用线程安全的集合类，如 <code>Collections.synchronizedList</code> 或 <code>ConcurrentHashMap</code>。</li><li>Java 8 引入的 <code>Stream</code> API 提供了一种高效且易于使用的数据处理方式，应该熟练掌握。</li></ul>`,83)]))}const d=e(c,[["render",i]]),r=JSON.parse('{"path":"/software/Language-Java-JavaSE-API-%E3%80%8Cjava.util%E3%80%8D.html","title":"Language - Java - Java SE - API - 「java.util」","lang":"zh-CN","frontmatter":{"title":"Language - Java - Java SE - API - 「java.util」","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2024-11-22T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： 包含了一系列实用程序类和集合框架。 介绍 简要说明 包含了一系列实用程序类和集合框架。 提供了用于处理日期、集合、事件监听、国际化、属性文件、随机数生成、栈、队列和其他实用功能。 主要功能 集合框架：提供了接口和类，用于表示和操作集合，如 List、Set、Map 和 Queue。 日期和时间：Date、Calendar 和 TimeZon...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Java - Java SE - API - 「java.util」\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Java-JavaSE-API-%E3%80%8Cjava.util%E3%80%8D.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Java - Java SE - API - 「java.util」"}],["meta",{"property":"og:description","content":"文章摘要： 包含了一系列实用程序类和集合框架。 介绍 简要说明 包含了一系列实用程序类和集合框架。 提供了用于处理日期、集合、事件监听、国际化、属性文件、随机数生成、栈、队列和其他实用功能。 主要功能 集合框架：提供了接口和类，用于表示和操作集合，如 List、Set、Map 和 Queue。 日期和时间：Date、Calendar 和 TimeZon..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-11-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Java-JavaSE-API-「java.util」.md","excerpt":"<p><strong>文章摘要：</strong> 包含了一系列实用程序类和集合框架。</p>\\n"}');export{d as comp,r as data};
