import{_ as o,c,a as l,b as s,d as a,e as p,w as t,r as i,o as u}from"./app-D67BBu3k.js";const r="/assets/Library-Maven-SpringFramework6-Spring%E5%AE%B9%E5%99%A8.excalidraw-C91tVTvx.svg",d={};function k(m,n){const e=i("RouteLink");return u(),c("div",null,[n[8]||(n[8]=l(`<p><strong>文章摘要：</strong> 基于Java实现MVC模型的轻量级Web框架。</p><div class="hint-container note"><p class="hint-container-title">注释</p><p><strong>Spring框架设计思想</strong></p><ul><li>使用对象时不仅可以直接从IoC容器中获取bean对象，并且DI绑定好了所需的依赖关系。</li><li>通过<strong>xml配置文件</strong>的方式来降低耦合度。</li><li>通过<strong>注解</strong>的方式来减少配置文件中的数量。</li></ul></div><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><blockquote><ul><li>SpringFramework是一种基于Java实现MVC模型的轻量级Web框架。</li><li>Spring 是一个轻量级Java开发框架。</li><li>目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。</li><li>核心特性：依赖注入（DI）、面向切片编程（AOP）。</li><li>Spring是一个IOC（控制反转）和AOP（面向切片编程）的容器框架。容器用于管理应用对象的生命周期。</li></ul></blockquote><p>主要功能</p><blockquote><ul><li><strong>更新Java版本支持</strong>：将支持Java 17或更高版本，利用最新的语言特性和改进。</li><li><strong>模块化</strong>：进一步模块化框架，减少依赖，提高可维护性。</li><li><strong>响应式编程</strong>：继续增强对响应式编程的支持，包括对Reactor和WebFlux的改进。</li><li><strong>Web应用开发</strong>：增强Spring MVC和Spring WebFlux，以支持现代Web应用的需求。</li><li><strong>集成支持</strong>：改进对各种数据源、消息队列和第三方服务的集成。</li><li><strong>云原生支持</strong>：更好地支持云原生应用开发，包括服务发现、配置管理、健康检查等。</li><li><strong>性能优化</strong>：框架层面的性能优化，提高应用性能。</li><li><strong>安全性增强</strong>：更新和改进Spring Security，以应对最新的安全威胁。</li></ul></blockquote><p>注意事项</p><blockquote><ul><li><strong>兼容性</strong>：升级到Spring Framework 6可能需要修改现有代码，以适应新的API和更改。</li><li><strong>依赖升级</strong>：依赖的第三方库可能需要升级以兼容Spring Framework 6。</li><li><strong>学习曲线</strong>：开发者可能需要学习新的特性和最佳实践。</li><li><strong>测试和验证</strong>：在迁移到新版本之前，应充分测试应用以确保稳定性。</li></ul></blockquote><p>适用场景</p><blockquote><ul><li><strong>新项目开发</strong>：适用于开发新的Java企业级应用，特别是需要利用最新Java特性的项目。</li><li><strong>云原生应用</strong>：适用于构建云原生应用，利用Spring Framework 6的云原生特性。</li><li><strong>响应式系统</strong>：适用于构建响应式系统，如使用WebFlux的响应式Web应用。</li><li><strong>微服务架构</strong>：适用于微服务架构，Spring Framework 6提供了更好的服务化和集成支持。</li><li><strong>系统升级</strong>：适用于需要升级旧版Spring应用以利用新特性的项目。</li></ul></blockquote><h2 id="maven坐标" tabindex="-1"><a class="header-anchor" href="#maven坐标"><span>Maven坐标</span></a></h2><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Spring 框架的基础功能 --&gt;</span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.1.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 请替换为实际的版本号 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>控制反转IOC和Spring容器是一个东西</p></div><h3 id="spring容器" tabindex="-1"><a class="header-anchor" href="#spring容器"><span>Spring容器</span></a></h3><blockquote><ul><li><code>org.springframework.context.ApplicationContext</code>是Spring容器实现的顶层接口，</li><li>负责实例化、配置和关联Bean对象。</li><li>配置元数据可以使用XML、Java注解、Java配置类实现。</li><li>处理应用程序的对象与其他对象之间的相互依赖关系。</li></ul></blockquote>`,17)),s("p",null,[n[1]||(n[1]=a("详细总结：")),p(e,{to:"/software/Library-Maven-SpringFramework6-spring%E5%AE%B9%E5%99%A8.html"},{default:t(()=>n[0]||(n[0]=[a("Library-Maven-SpringFramework6-spring容器")])),_:1,__:[0]})]),n[9]||(n[9]=s("p",null,[s("img",{src:r,alt:""})],-1)),n[10]||(n[10]=s("h3",{id:"bean的生命周期步骤",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#bean的生命周期步骤"},[s("span",null,"Bean的生命周期步骤")])],-1)),s("p",null,[n[3]||(n[3]=a("详细总结：")),p(e,{to:"/software/Library-Maven-SpringFramework6-Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"},{default:t(()=>n[2]||(n[2]=[a("Library-Maven-SpringFramework6-Bean的生命周期")])),_:1,__:[2]})]),n[11]||(n[11]=l('<h3 id="控制反转" tabindex="-1"><a class="header-anchor" href="#控制反转"><span>控制反转</span></a></h3><blockquote><ul><li>IoC（Inversion of Control）控制反转，对象的创建控制权由程序外部提供。</li><li>SpringFramework 提供了一个容器，称为<code>IoC容器</code>。</li><li>IoC容器负责对象的创建，初始化等一些列工作。</li><li>IoC容器中被管理的对象被称为<code>Bean</code>。</li></ul></blockquote><h3 id="推断构造方法底层原理" tabindex="-1"><a class="header-anchor" href="#推断构造方法底层原理"><span>推断构造方法底层原理</span></a></h3><h3 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入"><span>依赖注入</span></a></h3><blockquote><ul><li>DI（Dependency Injection）依赖注入</li><li>对IoC容器中建立<code>Bean</code>与<code>Bean</code>之间依赖关系的过程，被称为<code>依赖注入</code>。</li></ul></blockquote><h3 id="初始化前、初始化、初始化后" tabindex="-1"><a class="header-anchor" href="#初始化前、初始化、初始化后"><span>初始化前、初始化、初始化后</span></a></h3><h3 id="aop底层实现" tabindex="-1"><a class="header-anchor" href="#aop底层实现"><span>AOP底层实现</span></a></h3><h3 id="事务及传播机制" tabindex="-1"><a class="header-anchor" href="#事务及传播机制"><span>事务及传播机制</span></a></h3><h3 id="configuration注解底层原理" tabindex="-1"><a class="header-anchor" href="#configuration注解底层原理"><span><code>Configuration</code>注解底层原理</span></a></h3><h3 id="spring6核心新特性介绍" tabindex="-1"><a class="header-anchor" href="#spring6核心新特性介绍"><span>Spring6核心新特性介绍</span></a></h3><h2 id="配置属性" tabindex="-1"><a class="header-anchor" href="#配置属性"><span>配置属性</span></a></h2><h3 id="yaml配置文件" tabindex="-1"><a class="header-anchor" href="#yaml配置文件"><span>YAML配置文件</span></a></h3><p>详细总结：<a href=""></a></p><h3 id="xml配置文件" tabindex="-1"><a class="header-anchor" href="#xml配置文件"><span>XML配置文件</span></a></h3>',14)),s("p",null,[n[5]||(n[5]=a("详细总结：")),p(e,{to:"/software/Library-Maven-SpringFramework6-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-XML%E6%96%87%E4%BB%B6.html"},{default:t(()=>n[4]||(n[4]=[a("Library-Maven-SpringFramework6-配置文件-XML文件")])),_:1,__:[4]})]),n[12]||(n[12]=s("h2",{id:"注解",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#注解"},[s("span",null,"注解")])],-1)),s("p",null,[n[7]||(n[7]=a("详细总结：")),p(e,{to:"/software/Library-Maven-SpringFramework6-%E6%B3%A8%E8%A7%A3.html"},{default:t(()=>n[6]||(n[6]=[a("Library-Maven-SpringFramework6-注解")])),_:1,__:[6]})]),n[13]||(n[13]=l(`<h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><h3 id="通过接口来自定义bean的特性" tabindex="-1"><a class="header-anchor" href="#通过接口来自定义bean的特性"><span>通过接口来自定义bean的特性</span></a></h3><p>初始化回调函数</p><blockquote><ul><li>功能：允许bean在所有的必要的依赖配置完成后执行bean的初始化。在实例化bean之前执行该方法。</li><li>继承<code>org.springframework.beans.factory.InitializingBean</code>接口。</li><li>重写<code>afterPropertiesSet()</code>方法。</li></ul></blockquote><p>销毁回调函数</p><blockquote><ul><li>功能：Bean能让容器通过回调来销毁bean所引用的资源。在销毁bean之后执行该方法。</li><li>实现<code>org.springframework.beans.factory.DisposableBean 接口</code>接口。</li><li>重写<code>destroy()</code>方法。</li></ul></blockquote><h3 id="获取spring的ioc容器" tabindex="-1"><a class="header-anchor" href="#获取spring的ioc容器"><span>获取Spring的IoC容器</span></a></h3><p>实例化IoC容器对象，并加载所有bean到容器中</p><blockquote><ul><li><code>ApplicationContext</code>，spring的顶层核心接口，一般用于当作数据类型（数据类型向上转型）</li></ul></blockquote><p>方法名</p><blockquote><ul><li><code>new ClassPathXmlApplicationContext()</code>，根据项目路径的xml配置文件，来实例化spring容器</li><li><code>new FileSystemXmlApplicationContext()</code>，根据磁盘路径的xml配置，来实例化spring容器</li><li><code>new AnnotationConfigApplicationContext()</code>，根据java配置类，来实例化spring容器</li></ul></blockquote><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 实例化IoC容器对象，并加载所有bean到容器中</span></span>
<span class="line"><span class="token class-name">ApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;spring-ioc.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取ioc容器中的bean对象" tabindex="-1"><a class="header-anchor" href="#获取ioc容器中的bean对象"><span>获取IoC容器中的bean对象</span></a></h3><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 获取bean对象</span></span>
<span class="line"><span class="token comment">// 写法一，通过“class”在IoC容器中查找</span></span>
<span class="line"><span class="token class-name">User</span> bean <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 写法二，通过“id或name”在IoC容器中查找</span></span>
<span class="line"><span class="token class-name">User</span> bean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 写法三，通过“id或class”在IoC容器中查找</span></span>
<span class="line"><span class="token class-name">User</span> bean <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式"><span>表达式</span></a></h2><blockquote><ul><li><code>\${&lt;bean对象&gt;}</code>：花括号<code>{}</code>里面写注册（添加）到IoC容器中的对象，例如：<code>project.name</code>来获取对象的name属性。</li><li><code>#()</code>：</li></ul></blockquote><h2 id="ioc容器的配置方案" tabindex="-1"><a class="header-anchor" href="#ioc容器的配置方案"><span>IoC容器的配置方案</span></a></h2><h3 id="基于xml文件" tabindex="-1"><a class="header-anchor" href="#基于xml文件"><span>基于XML文件</span></a></h3><blockquote><ul><li>定义XML配置文件、声明Bean信息，交给</li></ul></blockquote><p>配置spring的IoC容器的xml配置文件</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">&lt;!--添加的约束，配置文件的标签不能随意命名--&gt;</span></span>
<span class="line"><span class="token comment">&lt;!--添加命名空间--&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans</span>
<span class="line">            http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!--添加bean对象--&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bookDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>book bookDaoImap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.cykj.dao.impl.BookDaoImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!--添加bean对象--&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bookService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.cykj.service.impl.BookServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token comment">&lt;!--依赖注入，将另一个bean当作参数进行注入--&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bookDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bookDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基于注解" tabindex="-1"><a class="header-anchor" href="#基于注解"><span>基于注解</span></a></h3><blockquote><ul><li>基于注解的元数据配置。</li><li>SSM框架开发中使用。（当需要与其他插件相互操作时使用）</li><li>在运行时IoC容器将扫描指定包路径下有包含<code>@Component</code>、<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code>注解的类，并添加到IoC容器中。</li></ul></blockquote><p>配置spring的IoC容器的xml配置文件</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">&lt;!--添加命名空间--&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/context<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">&lt;!--指定包扫描路径，通过查找注解的方式来确定bean对象，并添加到IoC容器中进行管理--&gt;</span></span>
<span class="line">    <span class="token comment">&lt;!--通过指定扫描路径，用于告知spring的扫描位置--&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>&lt;需要扫描的包路径&gt;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将需要被添加到IoC容器的类上添加注解</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 标记为bean对象</span></span>
<span class="line"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">UserDaoImpl</span> userDao<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 依赖注入，查询IoC容器中的bean对象，并将满足条件的对象当作参数传入</span></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span> <span class="token class-name">UserDaoImpl</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 提供get/set方法，暴露出去可供外部使用</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">UserDaoImpl</span> <span class="token function">getUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> userDao<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token class-name">UserDaoImpl</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基于java配置类" tabindex="-1"><a class="header-anchor" href="#基于java配置类"><span>基于Java配置类</span></a></h3><blockquote><ul><li>使用Java配置来代替XML配置。</li></ul></blockquote><h2 id="创建ioc容器和添加bean的方式" tabindex="-1"><a class="header-anchor" href="#创建ioc容器和添加bean的方式"><span>创建IoC容器和添加bean的方式</span></a></h2><h3 id="配置文件中添加" tabindex="-1"><a class="header-anchor" href="#配置文件中添加"><span>配置文件中添加</span></a></h3><blockquote><ul><li>在配置文件中手动编写需要由IoC容器管理的bean，并关联所需的依赖。</li></ul></blockquote><p>IoC容器层面</p><blockquote><ul><li>创建spring的xml文件，并手动添加需要被IoC容器管理的对象。</li><li>格式如下：</li></ul></blockquote><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token comment">&lt;!--添加service、dao到IoC容器中，以Bean对象的形式存在--&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.cykj.service.UserService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!--依赖注入，为bean关联好所依赖的bean对象--&gt;</span></span>
<span class="line">    <span class="token comment">&lt;!--将当前bean中的方法与bean对象进行关联--&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.cykj.dao.UserDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">...</span>
<span class="line">...</span>
<span class="line">...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>servlet层面</p><blockquote><ul><li>在<code>servlet</code>层中的代码，获取spring的IoC容器，并从中获取<code>service</code>。</li><li>添加如下代码：</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 依赖spring的IoC容器，即spring配置文件</span></span>
<span class="line"><span class="token comment">// 从IoC容器中获取service，即从spring配置文件中获取service</span></span>
<span class="line"><span class="token comment">// 获取spring的IoC容器</span></span>
<span class="line"><span class="token class-name">ClassPathXmlApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;spring.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 从IoC容器中获取service</span></span>
<span class="line"><span class="token class-name">IUserService</span> service <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 执行service</span></span>
<span class="line">service<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>service层面</p><blockquote><ul><li>此处所需要执行的dao层无需被赋值。</li><li>提供修改变量的get/set方法，用于让IoC容器能够赋值具体的内容在里面。</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 依赖spring注入（DI）</span></span>
<span class="line">    <span class="token class-name">IUserDao</span> userDao<span class="token punctuation">;</span>   <span class="token comment">// 此处无需赋值</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        userDao<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">IUserDao</span> <span class="token function">getUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> userDao<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token class-name">IUserDao</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dao层面</p><blockquote><ul><li>无需任何变动。</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token keyword">implements</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;具体查询数据库的代码，查询用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扫描注解" tabindex="-1"><a class="header-anchor" href="#扫描注解"><span>扫描注解</span></a></h3><blockquote><ul><li>在运行时IoC容器将扫描指定包路径下有包含<code>@Component</code>注解的类，并添加到IoC容器中。</li></ul></blockquote><p>IoC容器层面</p><blockquote><ul><li>创建spring的xml文件，指定扫描路径。</li><li>格式如下：</li></ul></blockquote><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token comment">&lt;!--指定包扫描路径，通过查找注解的方式来确定bean对象，并添加到IoC容器中进行管理--&gt;</span></span>
<span class="line"><span class="token comment">&lt;!--通过指定扫描路径，用于减少对不必要的类进行扫描--&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.cykj<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>servlet层面</p><blockquote><ul><li>在<code>servlet</code>层中的代码，获取spring的IoC容器的xml配置文件，并从中获取<code>service</code>。</li><li>添加如下代码：</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 依赖spring的IoC容器，即spring配置文件</span></span>
<span class="line"><span class="token comment">// 从IoC容器中获取service，即从spring配置文件中获取service</span></span>
<span class="line"><span class="token comment">// 获取spring的IoC容器</span></span>
<span class="line"><span class="token class-name">ClassPathXmlApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;spring.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 从IoC容器中获取service</span></span>
<span class="line"><span class="token class-name">IUserService</span> service <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 执行service</span></span>
<span class="line">service<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>service层面</p><blockquote><ul><li>在类的头部添加<code>@Component</code>注解，IoC容器会在扫描到后，将该类添加到容器中并实例化。</li><li>在依赖dao层的代码的地方，头部添加<code>@Autowired</code>注解，IoC容器将会自动进行依赖绑定，将dao层的实现对象赋值给变量。</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Component</span>   <span class="token comment">// spring的IoC容器扫描的注解，将被添加到IoC容器中</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token comment">// 依赖spring注入（DI）  </span></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span>          <span class="token comment">// spring的依赖绑定的注解</span></span>
<span class="line">    <span class="token class-name">IUserDao</span> userDao<span class="token punctuation">;</span>   <span class="token comment">// 此处无需赋值</span></span>
<span class="line">  </span>
<span class="line">    <span class="token annotation punctuation">@Override</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        userDao<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">IUserDao</span> <span class="token function">getUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> userDao<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token class-name">IUserDao</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dao层面</p><blockquote><ul><li>在类的头部添加<code>@Component</code>注解，IoC容器会在扫描到后，将该类添加到容器中并实例化。</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span>   <span class="token comment">// spring的IoC容器扫描的注解，将被添加到IoC容器中</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token keyword">implements</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;具体查询数据库的代码，查询用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java配置类" tabindex="-1"><a class="header-anchor" href="#java配置类"><span>Java配置类</span></a></h3><blockquote><ul><li>编写Java配置类，该类添加<code>@Configuration</code>和<code>@ComponentScan(&lt;包扫描路径&gt;)</code>注解，并添加bean。</li></ul></blockquote><p>IoC容器层面</p><blockquote><ul><li>创建java代码，文件例如：<code>SpringConfig.java</code></li><li>并添加如下内容：</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Configuration</span>              <span class="token comment">// 标记为是spring的xml配置文件</span></span>
<span class="line"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.cykj&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 指定包扫描路径，通过查找注解的方式来确定bean对象，并添加到IoC容器中进行管理</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>servlet层面</p><blockquote><ul><li>在<code>servlet</code>层中的代码，获取IoC容器的Java配置类，并从中获取<code>service</code>。</li><li>添加如下代码：</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 获取IoC容器的Java配置类  </span></span>
<span class="line"><span class="token class-name">AnnotationConfigApplicationContext</span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token comment">// 从IoC容器中获取service  </span></span>
<span class="line"><span class="token class-name">IUserService</span> service <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token comment">// 执行service  </span></span>
<span class="line">service<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>service层面</p><blockquote><ul><li>在类的头部添加<code>@Component</code>注解，IoC容器会在扫描到后，将该类添加到容器中并实例化。</li><li>在依赖dao层的代码的地方，头部添加<code>@Autowired</code>注解，IoC容器将会自动进行依赖绑定，将dao层的实现对象赋值给变量。</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Component</span>   <span class="token comment">// spring的IoC容器扫描的注解，将被添加到IoC容器中</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token comment">// 依赖spring注入（DI）  </span></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span>          <span class="token comment">// spring的依赖绑定的注解</span></span>
<span class="line">    <span class="token class-name">IUserDao</span> userDao<span class="token punctuation">;</span>   <span class="token comment">// 此处无需赋值</span></span>
<span class="line">  </span>
<span class="line">    <span class="token annotation punctuation">@Override</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        userDao<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">IUserDao</span> <span class="token function">getUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> userDao<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token class-name">IUserDao</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dao层面</p><blockquote><ul><li>在类的头部添加<code>@Component</code>注解，IoC容器会在扫描到后，将该类添加到容器中并实例化。</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span>   <span class="token comment">// spring的IoC容器扫描的注解，将被添加到IoC容器中</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token keyword">implements</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;具体查询数据库的代码，查询用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置静态资源路径映射" tabindex="-1"><a class="header-anchor" href="#配置静态资源路径映射"><span>配置静态资源路径映射</span></a></h3><blockquote><ul><li>作用：当web服务器的<code>DispatcherServlet</code>拦截到url时判断是否是静态资源，并返回静态资源。</li></ul></blockquote><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token comment">&lt;!--配置静态资源路径映射--&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!--将拦截到的url,满足该条件的url,映射到指定本地路径，并返回静态资源--&gt;</span></span>
<span class="line">    <span class="token comment">&lt;!--    - mapping：设置URL上的路径，从“请求资源路径”的根路径开始，\`**\`代表全部资源--&gt;</span></span>
<span class="line">    <span class="token comment">&lt;!--    - location：设置项目本地下的目录位置，\`webapp/\`是本地静态资源根路径--&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/static/**<span class="token punctuation">&quot;</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/static/<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,77))])}const b=o(d,[["render",k]]),g=JSON.parse('{"path":"/software/Library-Maven-SpringFramework6.html","title":"Library - Maven - SpringFramework 6","lang":"zh-CN","frontmatter":{"title":"Library - Maven - SpringFramework 6","author":"魔术桌","cover":"","category":["软件程序/类库"],"date":"2024-07-17T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： 基于Java实现MVC模型的轻量级Web框架。 注释 Spring框架设计思想 使用对象时不仅可以直接从IoC容器中获取bean对象，并且DI绑定好了所需的依赖关系。 通过xml配置文件的方式来降低耦合度。 通过注解的方式来减少配置文件中的数量。 简介 简要说明 SpringFramework是一种基于Java实现MVC模型的轻量级Web框...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Library - Maven - SpringFramework 6\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-03T09:56:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Library-Maven-SpringFramework6.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Library - Maven - SpringFramework 6"}],["meta",{"property":"og:description","content":"文章摘要： 基于Java实现MVC模型的轻量级Web框架。 注释 Spring框架设计思想 使用对象时不仅可以直接从IoC容器中获取bean对象，并且DI绑定好了所需的依赖关系。 通过xml配置文件的方式来降低耦合度。 通过注解的方式来减少配置文件中的数量。 简介 简要说明 SpringFramework是一种基于Java实现MVC模型的轻量级Web框..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T09:56:57.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-07-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-03T09:56:57.000Z"}]]},"git":{"updatedTime":1759485417000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Library-Maven-SpringFramework6.md","excerpt":"<p><strong>文章摘要：</strong> 基于Java实现MVC模型的轻量级Web框架。</p>\\n"}');export{b as comp,g as data};
