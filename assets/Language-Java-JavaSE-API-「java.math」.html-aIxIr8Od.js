import{_ as i,c as a,a as o,o as l}from"./app-D67BBu3k.js";const t={};function c(n,e){return l(),a("div",null,e[0]||(e[0]=[o('<p><strong>文章摘要：</strong> 提供了一些用于执行任意精度整数运算（BigInteger）和任意精度浮点数运算（BigDecimal）的类。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>简要说明</p><ul><li>提供了一些用于执行任意精度整数运算（BigInteger）和任意精度浮点数运算（BigDecimal）的类。</li><li>适用于那些需要超出标准 Java 基本数据类型（如 int、long、float、double）精度范围的计算。</li></ul><p>主要功能</p><ul><li><strong>BigInteger</strong>：用于表示不可变的任意精度的整数。可以执行所有基本的数学运算，如加、减、乘、除，以及模运算。</li><li><strong>BigDecimal</strong>：用于表示不可变的任意精度的浮点数。它提供了精确的数值运算，避免了二进制浮点运算中常见的精度问题。</li></ul><p>注意事项</p><ul><li><strong>性能</strong>：BigInteger 和 BigDecimal 的操作通常比原始数据类型的操作要慢，因为它们提供了更高的精度和更大的数值范围。</li><li><strong>精度</strong>：在使用 BigDecimal 进行运算时，需要注意精度和舍入模式，以避免意外的结果。</li><li><strong>不可变性</strong>：BigInteger 和 BigDecimal 都是不可变的，所有的运算都会返回一个新的实例。</li><li><strong>初始化</strong>：在创建 BigInteger 或 BigDecimal 实例时，应使用字符串构造器来避免由浮点数构造器引入的精度问题。</li></ul><p>适用场景</p><ul><li><strong>高精度整数运算</strong>：当整数的大小超出了 long 类型的范围时，或者需要执行精确的整数运算时，使用 BigInteger。</li><li><strong>金融计算</strong>：在金融应用程序中，经常需要精确的货币计算，BigDecimal 用于避免浮点数运算中的舍入误差。</li><li><strong>科学计算</strong>：在需要非常高精度的科学计算中，BigDecimal 提供了比 double 更精确的数值表示。</li><li><strong>精确的数学运算</strong>：任何需要精确数学运算的场景，例如在需要精确结果的算法中。</li></ul><h3 id="biginteger" tabindex="-1"><a class="header-anchor" href="#biginteger"><span>BigInteger</span></a></h3><p><code>BigInteger</code> 类用于表示不可变的任意精度的整数。它可以用于表示比 <code>long</code> 类型更大的整数值。</p><h4 id="主要特性" tabindex="-1"><a class="header-anchor" href="#主要特性"><span>主要特性：</span></a></h4><ul><li><strong>不可变性</strong>: 一旦创建了 <code>BigInteger</code> 对象，其值就不能更改。</li><li><strong>大数运算</strong>: 支持所有基本的数学运算，如加、减、乘、除等。</li></ul><h4 id="常用构造方法" tabindex="-1"><a class="header-anchor" href="#常用构造方法"><span>常用构造方法：</span></a></h4><ul><li><code>BigInteger(String val)</code>: 根据字符串构建 <code>BigInteger</code>。</li><li><code>BigInteger(byte[] val)</code>: 根据字节数组构建 <code>BigInteger</code>。</li></ul><h4 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法：</span></a></h4><ul><li><code>add(BigInteger val)</code>: 返回两个大整数的和。</li><li><code>subtract(BigInteger val)</code>: 返回两个大整数的差。</li><li><code>multiply(BigInteger val)</code>: 返回两个大整数的乘积。</li><li><code>divide(BigInteger val)</code>: 返回两个大整数的商。</li><li><code>remainder(BigInteger val)</code>: 返回两个大整数相除的余数。</li><li><code>gcd(BigInteger val)</code>: 返回大整数的最大公约数。</li><li><code>modPow(BigInteger exponent, BigInteger m)</code>: 返回大整数的指数运算结果的模。</li><li><code>modInverse(BigInteger m)</code>: 返回大整数的模逆。</li><li><code>shiftLeft(int n)</code>: 将大整数左移 n 位。</li><li><code>shiftRight(int n)</code>: 将大整数右移 n 位。</li><li><code>and(BigInteger val)</code>, <code>or(BigInteger val)</code>, <code>xor(BigInteger val)</code>: 执行位运算。</li><li><code>compareTo(BigInteger val)</code>: 比较两个大整数的大小。</li></ul><h3 id="bigdecimal" tabindex="-1"><a class="header-anchor" href="#bigdecimal"><span>BigDecimal</span></a></h3><p><code>BigDecimal</code> 类用于表示不可变的任意精度的十进制数。它常用于金融应用程序和需要高精度计算的场合。</p><h4 id="主要特性-1" tabindex="-1"><a class="header-anchor" href="#主要特性-1"><span>主要特性：</span></a></h4><ul><li><strong>不可变性</strong>: 与 <code>BigInteger</code> 一样，<code>BigDecimal</code> 也是不可变的。</li><li><strong>精确十进制运算</strong>: <code>BigDecimal</code> 提供了精确的十进制运算。</li></ul><h4 id="常用构造方法-1" tabindex="-1"><a class="header-anchor" href="#常用构造方法-1"><span>常用构造方法：</span></a></h4><ul><li><code>BigDecimal(String val)</code>: 根据字符串构建 <code>BigDecimal</code>。</li><li><code>BigDecimal(double val)</code>: 根据双精度浮点数构建 <code>BigDecimal</code>（不建议使用，因为 <code>double</code> 本身是不精确的）。</li></ul><h4 id="常用方法-1" tabindex="-1"><a class="header-anchor" href="#常用方法-1"><span>常用方法：</span></a></h4><ul><li><code>add(BigDecimal augend)</code>: 返回两个 <code>BigDecimal</code> 的和。</li><li><code>subtract(BigDecimal subtrahend)</code>: 返回两个 <code>BigDecimal</code> 的差。</li><li><code>multiply(BigDecimal multiplicand)</code>: 返回两个 <code>BigDecimal</code> 的乘积。</li><li><code>divide(BigDecimal divisor, int scale, RoundingMode roundingMode)</code>: 返回两个 <code>BigDecimal</code> 的商，可以指定小数点后的位数和舍入模式。</li><li><code>setScale(int newScale, RoundingMode roundingMode)</code>: 设置 <code>BigDecimal</code> 的小数位数，并指定舍入模式。</li><li><code>compareTo(BigDecimal val)</code>: 比较两个 <code>BigDecimal</code> 的大小。</li><li><code>stripTrailingZeros()</code>: 返回一个 <code>BigDecimal</code>，其表示去掉尾随零的数值。</li><li><code>precision()</code>: 返回 <code>BigDecimal</code> 的精度。</li><li><code>setScale(int newScale)</code>: 设置 <code>BigDecimal</code> 的小数位数。</li></ul><h4 id="舍入模式-roundingmode" tabindex="-1"><a class="header-anchor" href="#舍入模式-roundingmode"><span>舍入模式（RoundingMode）：</span></a></h4><ul><li><code>UP</code>: 向远离零的方向舍入。</li><li><code>DOWN</code>: 向接近零的方向舍入。</li><li><code>CEILING</code>: 向正无穷大方向舍入。</li><li><code>FLOOR</code>: 向负无穷大方向舍入。</li><li><code>HALF_UP</code>: 四舍五入。</li><li><code>HALF_DOWN</code>: 五舍六入。</li><li><code>HALF_EVEN</code>: 向最近的偶数舍入。</li></ul><h3 id="学习总结" tabindex="-1"><a class="header-anchor" href="#学习总结"><span>学习总结</span></a></h3><ul><li><strong>精度问题</strong>: 在处理金融数据和高精度计算时，应使用 <code>BigDecimal</code> 而不是 <code>double</code> 或 <code>float</code>。</li><li><strong>构造方法</strong>: 避免使用 <code>BigDecimal(double)</code> 构造方法，因为它可能会导致精度损失。</li><li><strong>舍入模式</strong>: 根据具体需求选择合适的舍入模式。</li><li><strong>性能考虑</strong>: <code>BigInteger</code> 和 <code>BigDecimal</code> 的运算比基本类型要慢，因此在不必要的情况下应避免使用。</li><li><strong>不可变性</strong>: 由于 <code>BigInteger</code> 和 <code>BigDecimal</code> 是不可变的，每次运算都会创建一个新的对象。</li><li><strong>方法链</strong>: 可以通过方法链的方式连续调用方法，以编写更简洁的代码。</li></ul>',30)]))}const g=i(t,[["render",c]]),r=JSON.parse('{"path":"/software/Language-Java-JavaSE-API-%E3%80%8Cjava.math%E3%80%8D.html","title":"Language - Java - Java SE - API - 「java.math」","lang":"zh-CN","frontmatter":{"title":"Language - Java - Java SE - API - 「java.math」","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2024-12-24T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： 提供了一些用于执行任意精度整数运算（BigInteger）和任意精度浮点数运算（BigDecimal）的类。 介绍 简要说明 提供了一些用于执行任意精度整数运算（BigInteger）和任意精度浮点数运算（BigDecimal）的类。 适用于那些需要超出标准 Java 基本数据类型（如 int、long、float、double）精度范围的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Java - Java SE - API - 「java.math」\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Java-JavaSE-API-%E3%80%8Cjava.math%E3%80%8D.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Java - Java SE - API - 「java.math」"}],["meta",{"property":"og:description","content":"文章摘要： 提供了一些用于执行任意精度整数运算（BigInteger）和任意精度浮点数运算（BigDecimal）的类。 介绍 简要说明 提供了一些用于执行任意精度整数运算（BigInteger）和任意精度浮点数运算（BigDecimal）的类。 适用于那些需要超出标准 Java 基本数据类型（如 int、long、float、double）精度范围的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-12-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Java-JavaSE-API-「java.math」.md","excerpt":"<p><strong>文章摘要：</strong> 提供了一些用于执行任意精度整数运算（BigInteger）和任意精度浮点数运算（BigDecimal）的类。</p>\\n"}');export{g as comp,r as data};
