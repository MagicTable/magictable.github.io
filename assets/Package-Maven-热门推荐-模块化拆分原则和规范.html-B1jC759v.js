import{_ as t,c as a,a as o,o as l}from"./app-D67BBu3k.js";const i={};function r(n,e){return l(),a("div",null,e[0]||(e[0]=[o('<p><strong>文章摘要：</strong> 项目的组件/模块化拆分方案。</p><p>模块化拆分是提高项目可维护性和扩展性的重要手段。以下是一些拆分方案的指导原则：</p><ol><li><strong>按功能拆分：</strong></li></ol><ul><li>将具有相同业务功能的代码组织在同一个模块中。</li><li>例如，一个电商系统可以分为订单模块、用户模块、商品模块等。</li></ul><ol start="2"><li><strong>按层拆分：</strong></li></ol><ul><li>将不同层次的代码分开，如将持久层、服务层、表现层分别放在不同的模块中。</li><li>例如，可以将数据访问逻辑放在 <code>dao</code> 模块，业务逻辑放在 <code>service</code> 模块。</li></ul><ol start="3"><li><strong>按技术拆分：</strong></li></ol><ul><li>如果项目使用了多种技术栈，可以根据技术类型将相关代码分开。</li><li>例如，前端代码可以放在一个模块，后端逻辑放在另一个模块。</li></ul><ol start="4"><li><strong>按部署拆分：</strong></li></ol><ul><li>根据部署的需要拆分模块，比如将公共的配置和服务模块分开，以便于独立部署。</li></ul><ol start="5"><li><strong>通用模块：</strong></li></ol><ul><li>抽取项目中通用的代码和资源，形成工具类模块或公共组件模块，供其他模块使用。</li></ul><ol start="6"><li><strong>依赖管理：</strong></li></ol><ul><li>确保模块间的依赖关系清晰明确，避免循环依赖。</li><li>使用 Maven 的聚合和继承特性管理模块。</li></ul>',14)]))}const s=t(i,[["render",r]]),m=JSON.parse('{"path":"/software/Package-Maven-%E7%83%AD%E9%97%A8%E6%8E%A8%E8%8D%90-%E6%A8%A1%E5%9D%97%E5%8C%96%E6%8B%86%E5%88%86%E5%8E%9F%E5%88%99%E5%92%8C%E8%A7%84%E8%8C%83.html","title":"Package - Maven - 热门推荐 - 模块化拆分原则和规范","lang":"zh-CN","frontmatter":{"title":"Package - Maven - 热门推荐 - 模块化拆分原则和规范","author":"魔术桌","cover":"","category":["软件程序/软件包"],"date":"2024-03-31T00:00:00.000Z","tag":["进度-已完成","热门推荐"],"description":"文章摘要： 项目的组件/模块化拆分方案。 模块化拆分是提高项目可维护性和扩展性的重要手段。以下是一些拆分方案的指导原则： 按功能拆分： 将具有相同业务功能的代码组织在同一个模块中。 例如，一个电商系统可以分为订单模块、用户模块、商品模块等。 按层拆分： 将不同层次的代码分开，如将持久层、服务层、表现层分别放在不同的模块中。 例如，可以将数据访问逻辑放在...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Package - Maven - 热门推荐 - 模块化拆分原则和规范\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Package-Maven-%E7%83%AD%E9%97%A8%E6%8E%A8%E8%8D%90-%E6%A8%A1%E5%9D%97%E5%8C%96%E6%8B%86%E5%88%86%E5%8E%9F%E5%88%99%E5%92%8C%E8%A7%84%E8%8C%83.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Package - Maven - 热门推荐 - 模块化拆分原则和规范"}],["meta",{"property":"og:description","content":"文章摘要： 项目的组件/模块化拆分方案。 模块化拆分是提高项目可维护性和扩展性的重要手段。以下是一些拆分方案的指导原则： 按功能拆分： 将具有相同业务功能的代码组织在同一个模块中。 例如，一个电商系统可以分为订单模块、用户模块、商品模块等。 按层拆分： 将不同层次的代码分开，如将持久层、服务层、表现层分别放在不同的模块中。 例如，可以将数据访问逻辑放在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"热门推荐"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-03-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Package-Maven-热门推荐-模块化拆分原则和规范.md","excerpt":"<p><strong>文章摘要：</strong> 项目的组件/模块化拆分方案。</p>\\n"}');export{s as comp,m as data};
