import{_ as l,c as i,b as n,a as o,d as s,e as t,w as p,r as c,o as r}from"./app-D67BBu3k.js";const u={},d={class:"hint-container info"};function h(m,a){const e=c("RouteLink");return r(),i("div",null,[a[14]||(a[14]=n("p",null,[n("strong",null,"文章摘要："),s(" Java是编程语言，跨平台、强类型、多线程、面向对象编程的编程语言。")],-1)),n("div",d,[a[10]||(a[10]=n("p",{class:"hint-container-title"},"相关信息",-1)),a[11]||(a[11]=n("p",null,"外部相关文章",-1)),a[12]||(a[12]=n("ul",null,[n("li")],-1)),a[13]||(a[13]=n("p",null,"内部相关文章",-1)),n("ul",null,[n("li",null,[a[1]||(a[1]=s("Java版本命名规范：")),t(e,{to:"/software/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E8%A7%84%E8%8C%83-%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E7%89%88%E6%9C%AC%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83.html"},{default:p(()=>a[0]||(a[0]=[s("基础知识-规范-基于时间的版本格式规范")])),_:1,__:[0]})]),n("li",null,[a[3]||(a[3]=s("数据结构：")),t(e,{to:"/software/DataStructure%EF%BC%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89.html"},{default:p(()=>a[2]||(a[2]=[s("DataStructure（数据结构）")])),_:1,__:[2]})]),n("li",null,[a[5]||(a[5]=s("设计模式：")),t(e,{to:"/software/DesignPattern%EF%BC%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%89.html"},{default:p(()=>a[4]||(a[4]=[s("DesignPattern（设计模式）")])),_:1,__:[4]})]),n("li",null,[a[7]||(a[7]=s("算法设计：")),t(e,{to:"/software/Algorithm%EF%BC%88%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%EF%BC%89.html"},{default:p(()=>a[6]||(a[6]=[s("Algorithm（算法设计）")])),_:1,__:[6]})]),n("li",null,[a[9]||(a[9]=s("软件架构：")),t(e,{to:"/software/Architecture%EF%BC%88%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%89.html"},{default:p(()=>a[8]||(a[8]=[s("Architecture（软件架构）")])),_:1,__:[8]})])])]),a[15]||(a[15]=o(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li></li></ul><p>主要功能</p><ul><li></li></ul><p>注意事项</p><ul><li></li></ul><p>适用场景</p><ul><li></li></ul><h2 id="同一个文件中的多个类" tabindex="-1"><a class="header-anchor" href="#同一个文件中的多个类"><span>同一个文件中的多个类</span></a></h2><ul><li>如果需要用于封装目的,可以在同一源文件中定义多个类</li></ul><p>例如在以下示例中:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultipleClassesInSameFile</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">GenerateMessage</span><span class="token punctuation">.</span><span class="token function">generateMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">AnotherMessage</span><span class="token punctuation">.</span><span class="token function">generateAnotherMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">GenerateMessage</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">generateMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Here is one message&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">AnotherMessage</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">generateAnotherMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Here is another message&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jdk类与非jdk类" tabindex="-1"><a class="header-anchor" href="#jdk类与非jdk类"><span>JDK类与非JDK类</span></a></h2><p>JDK类与非JDK类的区别</p><ul><li><strong>JDK类</strong>：属于Java核心库的一部分，如<code>Scanner</code>和<code>MatchResult</code>。这些类在Java运行时环境中已经内置，因此无需额外添加到类路径中。</li><li><strong>非JDK类</strong>：不属于Java核心库，如Apache Commons Lang中的<code>RandomUtils</code>。这些类需要外部库的支持，因此需要将相应的jar文件添加到类路径中。</li></ul><p>编译和运行时的类路径管理</p><ul><li><strong>JDK类</strong>：直接编译和运行即可，无需额外配置类路径。</li><li><strong>非JDK类</strong>：需要使用<code>-cp</code>或<code>--class-path</code>选项指定外部库的路径，例如<code>java -cp /path/to/commons-lang3-3.12.0.jar ReferenceNonJDKClass.java</code>。</li></ul><div class="hint-container note"><p class="hint-container-title">注释</p><p>注意事项</p><ul><li>确保使用的非JDK类库版本与代码兼容。</li><li>管理好类路径，避免出现路径错误或冲突。</li><li>可以使用构建工具（如Maven或Gradle）自动管理依赖和类路径，简化开发流程。</li><li>了解Java模块系统（JPMS）可以更好地管理大型项目的依赖和类路径。</li></ul></div><h2 id="简单源文件和实例主要方法" tabindex="-1"><a class="header-anchor" href="#简单源文件和实例主要方法"><span>简单源文件和实例主要方法</span></a></h2><h2 id="未命名模式和变量" tabindex="-1"><a class="header-anchor" href="#未命名模式和变量"><span>未命名模式和变量</span></a></h2><h2 id="字符串模板" tabindex="-1"><a class="header-anchor" href="#字符串模板"><span>字符串模板</span></a></h2><h2 id="记录模式" tabindex="-1"><a class="header-anchor" href="#记录模式"><span>记录模式</span></a></h2><h2 id="switch表达式和语句的匹配模式" tabindex="-1"><a class="header-anchor" href="#switch表达式和语句的匹配模式"><span>switch表达式和语句的匹配模式</span></a></h2><h2 id="密封类" tabindex="-1"><a class="header-anchor" href="#密封类"><span>密封类</span></a></h2><h2 id="纪录类" tabindex="-1"><a class="header-anchor" href="#纪录类"><span>纪录类</span></a></h2><h2 id="instanceof运算符的模式匹配" tabindex="-1"><a class="header-anchor" href="#instanceof运算符的模式匹配"><span>instanceof运算符的模式匹配</span></a></h2><h2 id="文本块" tabindex="-1"><a class="header-anchor" href="#文本块"><span>文本块</span></a></h2><h2 id="lambda参数的局部变量语法" tabindex="-1"><a class="header-anchor" href="#lambda参数的局部变量语法"><span>Lambda参数的局部变量语法</span></a></h2><h2 id="局部变量类型推理" tabindex="-1"><a class="header-anchor" href="#局部变量类型推理"><span>局部变量类型推理</span></a></h2><h2 id="java平台模块系统" tabindex="-1"><a class="header-anchor" href="#java平台模块系统"><span>Java平台模块系统</span></a></h2><h2 id="小的语言增强" tabindex="-1"><a class="header-anchor" href="#小的语言增强"><span>小的语言增强</span></a></h2><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h2><h2 id="问题总结" tabindex="-1"><a class="header-anchor" href="#问题总结"><span>问题总结</span></a></h2><p>详细总结：<a href=""></a></p>`,35))])}const k=l(u,[["render",h]]),g=JSON.parse('{"path":"/software/Language-Java-JavaSE-%E6%9F%A5%E8%AF%A2%E6%89%8B%E5%86%8C-JavaSE21.html","title":"Language - Java - Java SE - 查询手册 - Java SE 21","lang":"zh-CN","frontmatter":{"title":"Language - Java - Java SE - 查询手册 - Java SE 21","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2024-11-26T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： Java是编程语言，跨平台、强类型、多线程、面向对象编程的编程语言。 相关信息 外部相关文章 内部相关文章 Java版本命名规范： 数据结构： 设计模式： 算法设计： 软件架构： 简介 简要说明 主要功能 注意事项 适用场景 同一个文件中的多个类 如果需要用于封装目的,可以在同一源文件中定义多个类 例如在以下示例中: JDK类与非JDK类 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Java - Java SE - 查询手册 - Java SE 21\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-03T09:56:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Java-JavaSE-%E6%9F%A5%E8%AF%A2%E6%89%8B%E5%86%8C-JavaSE21.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Java - Java SE - 查询手册 - Java SE 21"}],["meta",{"property":"og:description","content":"文章摘要： Java是编程语言，跨平台、强类型、多线程、面向对象编程的编程语言。 相关信息 外部相关文章 内部相关文章 Java版本命名规范： 数据结构： 设计模式： 算法设计： 软件架构： 简介 简要说明 主要功能 注意事项 适用场景 同一个文件中的多个类 如果需要用于封装目的,可以在同一源文件中定义多个类 例如在以下示例中: JDK类与非JDK类 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T09:56:57.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-11-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-03T09:56:57.000Z"}]]},"git":{"updatedTime":1759485417000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Java-JavaSE-查询手册-JavaSE21.md","excerpt":"<p><strong>文章摘要：</strong> Java是编程语言，跨平台、强类型、多线程、面向对象编程的编程语言。</p>\\n"}');export{k as comp,g as data};
