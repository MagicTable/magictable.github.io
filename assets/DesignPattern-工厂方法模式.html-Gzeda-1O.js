import{_ as s,c as a,a as e,o as p}from"./app-D67BBu3k.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p><strong>文章摘要：</strong> 工厂模式使用总结。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>工厂模式（Factory Pattern）是一种创建型设计模式。</li><li>定义一个用于创建对象的接口，让子类决定实例化哪一个类。</li><li>工厂方法使一个类的实例化延迟到其子类。</li></ul><p>主要功能</p><ul><li><strong>复制对象：</strong> 提供了一种创建新对象的方式，不是通过传统的构造函数，而是通过复制一个已存在的对象（原型），以此来避免创建成本高昂的对象。</li><li><strong>定制复制：</strong> 允许对象在不暴露其创建逻辑的情况下定制复制过程，可以通过深拷贝或浅拷贝来实现。</li><li><strong>解耦框架与客户端：</strong> 客户端代码不需要知道所创建对象的类信息，只需要知道它实现了原型接口即可。</li><li><strong>动态配置：</strong> 可以在运行时动态地增加或减少产品类，而不会影响到客户端代码。</li></ul><p>注意事项</p><ul><li><strong>避免过度使用</strong>：不要为每个类都创建一个工厂类，这会导致系统中类的数量急剧增加，增加系统的复杂性。</li><li><strong>保持简单性</strong>：尽量保持工厂方法的简单性，避免复杂的逻辑判断。</li><li><strong>遵循开闭原则</strong>：在添加新的产品类时，应该不需要修改已有的工厂类，而是通过添加新的工厂子类来扩展。</li><li><strong>接口的一致性</strong>：确保所有通过工厂创建的对象都实现相同的接口或继承自相同的抽象类，这样客户端代码才能一致地使用这些对象。</li><li><strong>处理依赖关系</strong>：在工厂方法中处理对象的依赖关系，确保创建的对象是完整的，并且处于有效状态。</li><li><strong>易于理解和维护</strong>：尽管工厂模式可以增加系统的灵活性，但也可能使得系统更加复杂。因此，应该确保代码易于理解和维护。</li><li><strong>考虑性能因素</strong>：在某些情况下，频繁地使用工厂模式可能会带来性能上的开销，尤其是在创建对象成本较高时。需要权衡利弊。</li></ul><p>适用场景</p><ul><li><strong>对象的创建逻辑复杂</strong>：当创建一个对象不仅仅是简单的new操作，而是需要一系列的操作时，可以使用工厂模式来封装这一系列操作。</li><li><strong>需要解耦</strong>：当需要将对象的创建和使用分离，使得两者可以独立变化时。</li><li><strong>需要扩展性和灵活性</strong>：当系统需要支持多种类型的对象创建，而这些对象有共同的接口时，可以通过扩展工厂来支持新的对象类型。</li><li><strong>测试友好</strong>：工厂模式可以使代码更易于测试，因为它允许你通过接口来创建对象，这使得替换实现变得容易。</li></ul><h2 id="java-8" tabindex="-1"><a class="header-anchor" href="#java-8"><span>Java 8</span></a></h2><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 定义一个任务处理器接口。</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TaskProcessor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">executeTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 为每种任务创建具体的处理器类。</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 电子邮件功能</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailSender</span> <span class="token keyword">implements</span> <span class="token class-name">TaskProcessor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Sending email...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 实现发送邮件的逻辑</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 文件备份功能</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileBackup</span> <span class="token keyword">implements</span> <span class="token class-name">TaskProcessor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Backing up files...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 实现文件备份的逻辑</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 数据库更新功能</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseUpdater</span> <span class="token keyword">implements</span> <span class="token class-name">TaskProcessor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Updating database...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 实现数据库更新的逻辑</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 创建一个工厂类，根据任务类型来创建对应的处理器实例。</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 任务处理器工厂</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskProcessorFactory</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TaskProcessor</span> <span class="token function">getProcessor</span><span class="token punctuation">(</span><span class="token class-name">String</span> taskType<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>taskType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EmailSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>taskType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;backup&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FileBackup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>taskType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DatabaseUpdater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown task type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 使用工厂模式来创建和处理不同类型的任务。</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutomationAgent</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 客户端代码</span></span>
<span class="line">        <span class="token class-name">TaskProcessor</span> emailTask <span class="token operator">=</span> <span class="token class-name">TaskProcessorFactory</span><span class="token punctuation">.</span><span class="token function">getProcessor</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        emailTask<span class="token punctuation">.</span><span class="token function">executeTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TaskProcessor</span> backupTask <span class="token operator">=</span> <span class="token class-name">TaskProcessorFactory</span><span class="token punctuation">.</span><span class="token function">getProcessor</span><span class="token punctuation">(</span><span class="token string">&quot;backup&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        backupTask<span class="token punctuation">.</span><span class="token function">executeTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TaskProcessor</span> updateTask <span class="token operator">=</span> <span class="token class-name">TaskProcessorFactory</span><span class="token punctuation">.</span><span class="token function">getProcessor</span><span class="token punctuation">(</span><span class="token string">&quot;update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        updateTask<span class="token punctuation">.</span><span class="token function">executeTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16)]))}const i=s(t,[["render",l]]),u=JSON.parse('{"path":"/software/DesignPattern-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html","title":"DesignPattern - 工厂方法模式","lang":"zh-CN","frontmatter":{"title":"DesignPattern - 工厂方法模式","author":"魔术桌","cover":"","category":["软件程序/设计模式"],"date":"2024-11-05T00:00:00.000Z","tag":["进度-已完成","知识总结"],"description":"文章摘要： 工厂模式使用总结。 简介 简要说明 工厂模式（Factory Pattern）是一种创建型设计模式。 定义一个用于创建对象的接口，让子类决定实例化哪一个类。 工厂方法使一个类的实例化延迟到其子类。 主要功能 复制对象： 提供了一种创建新对象的方式，不是通过传统的构造函数，而是通过复制一个已存在的对象（原型），以此来避免创建成本高昂的对象。 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DesignPattern - 工厂方法模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/DesignPattern-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"DesignPattern - 工厂方法模式"}],["meta",{"property":"og:description","content":"文章摘要： 工厂模式使用总结。 简介 简要说明 工厂模式（Factory Pattern）是一种创建型设计模式。 定义一个用于创建对象的接口，让子类决定实例化哪一个类。 工厂方法使一个类的实例化延迟到其子类。 主要功能 复制对象： 提供了一种创建新对象的方式，不是通过传统的构造函数，而是通过复制一个已存在的对象（原型），以此来避免创建成本高昂的对象。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-11-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/DesignPattern-工厂方法模式.md","excerpt":"<p><strong>文章摘要：</strong> 工厂模式使用总结。</p>\\n"}');export{i as comp,u as data};
