import{_ as n,c as s,a as e,o as t}from"./app-D67BBu3k.js";const p={};function i(l,a){return t(),s("div",null,a[0]||(a[0]=[e(`<p><strong>文章摘要：</strong> 在Java中，注解（Annotation）是一种用于修饰代码的元数据，可以提供有关程序代码的信息，但不直接参与程序的执行。元注解是用于定义注解的注解。</p><div class="hint-container note"><p class="hint-container-title">注释</p><ul><li>元注解来自<code>javax.annotation</code></li></ul></div><h2 id="override" tabindex="-1"><a class="header-anchor" href="#override"><span><code>@Override</code></span></a></h2><ul><li>定义在<code>java.lang.Override</code></li><li>该注解只适用于修辞手法，表示一个方法表明打算重写基类中的另一个方法声明。</li></ul><h2 id="deprecated" tabindex="-1"><a class="header-anchor" href="#deprecated"><span><code>@Deprecated</code></span></a></h2><ul><li>包路径：<code>java.lang.Deprecated</code></li><li>可以用于修饰方法、属性、类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或者存在更好的选择。</li></ul><h2 id="suppresswarnings" tabindex="-1"><a class="header-anchor" href="#suppresswarnings"><span><code>@SuppressWarnings</code></span></a></h2><ul><li>包路径：<code>java.lang.SuppressWarnings</code></li><li>用来抑制编译时的警告信息。</li></ul><h2 id="target" tabindex="-1"><a class="header-anchor" href="#target"><span><code>@Target</code></span></a></h2><p>定义</p><ul><li>用于指定注解可以应用的目标元素类型，使用范围。</li><li>目标元素类型指的是注解可以修饰的Java语言元素，比如类、接口、方法等。</li></ul><p>参数</p><p><code>ElementType</code>:该注解的值是一个枚举类型。</p><ul><li><code>ANNOTATION_TYPE</code>：注解类型声明</li><li><code>CONSTRUCTOR</code>：构造方法声明</li><li><code>FIELD</code>：字段声明（包括枚举常量）</li><li><code>LOCAL_VARIABLE</code>：局部变量声明</li><li><code>METHOD</code>：方法声明</li><li><code>PACKAGE</code>：包声明</li><li><code>PARAMETER</code>：参数声明</li><li><code>TYPE</code>：类、接口（包括注解类型）或枚举声明</li></ul><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="retention" tabindex="-1"><a class="header-anchor" href="#retention"><span><code>@Retention</code></span></a></h2><p>定义</p><ul><li>用于指定注解的信息保留到什么阶段。它控制注解的生命周期。</li></ul><p>参数</p><p><code>RetentionPolicy</code>：该注解的值是一个枚举类型 <code>RetentionPolicy</code>。它包括以下几种：</p><ul><li><code>SOURCE</code>：注解只保留在源代码中，编译器会忽略。</li><li><code>CLASS</code>：注解在编译时被保留在.class文件中，但不会被加载到JVM中。</li><li><code>RUNTIME</code>：注解会被加载到JVM中，因此在运行时可以反射性地读取。</li></ul><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="documented" tabindex="-1"><a class="header-anchor" href="#documented"><span><code>@Documented</code></span></a></h2><p>定义</p><ul><li>用于表明注解应该被 javadoc 工具记录。</li><li>如果一个注解被 <code>@Documented</code> 标记，那么它的注解信息会被包含在生成的文档中。</li></ul><p>参数</p><ul><li>无</li></ul><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Documented</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Documented</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="inherited" tabindex="-1"><a class="header-anchor" href="#inherited"><span><code>@Inherited</code></span></a></h2><p>定义</p><ul><li>用于表明注解类型是可以被继承的。</li><li>如果一个注解被 <code>@Inherited</code> 标记，并且该注解被用于一个类，那么这个注解也会被用于该类的子类。</li></ul><p>参数</p><ul><li>无</li></ul><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Inherited</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Inherited</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38)]))}const o=n(p,[["render",i]]),d=JSON.parse('{"path":"/software/Language-Java-JavaSE-%E5%85%83%E6%B3%A8%E8%A7%A3.html","title":"Language - Java - Java SE - 元注解","lang":"zh-CN","frontmatter":{"title":"Language - Java - Java SE - 元注解","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2024-11-10T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： 在Java中，注解（Annotation）是一种用于修饰代码的元数据，可以提供有关程序代码的信息，但不直接参与程序的执行。元注解是用于定义注解的注解。 注释 元注解来自javax.annotation @Override 定义在java.lang.Override 该注解只适用于修辞手法，表示一个方法表明打算重写基类中的另一个方法声明。 @...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Java - Java SE - 元注解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-03T09:56:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Java-JavaSE-%E5%85%83%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Java - Java SE - 元注解"}],["meta",{"property":"og:description","content":"文章摘要： 在Java中，注解（Annotation）是一种用于修饰代码的元数据，可以提供有关程序代码的信息，但不直接参与程序的执行。元注解是用于定义注解的注解。 注释 元注解来自javax.annotation @Override 定义在java.lang.Override 该注解只适用于修辞手法，表示一个方法表明打算重写基类中的另一个方法声明。 @..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T09:56:57.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-11-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-03T09:56:57.000Z"}]]},"git":{"updatedTime":1759485417000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Java-JavaSE-元注解.md","excerpt":"<p><strong>文章摘要：</strong> 在Java中，注解（Annotation）是一种用于修饰代码的元数据，可以提供有关程序代码的信息，但不直接参与程序的执行。元注解是用于定义注解的注解。</p>\\n"}');export{o as comp,d as data};
