import{_ as s,c as a,a as e,o as p}from"./app-D67BBu3k.js";const t={};function c(l,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p><strong>文章摘要：</strong> 门面模式使用总结。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>门面模式（Facade Pattern）是一种结构型设计模式。</li><li>提供了一个统一的高层接口，用来访问子系统中的一群接口，使得子系统更容易使用。</li></ul><p>主要功能</p><ul><li>为子系统中的一组接口提供一个统一的接口。</li><li>定义了一个高层接口，使得子系统更加易于使用。</li><li>客户端与子系统之间的解耦，使得子系统内部的改变不会影响到客户端。</li></ul><p>注意事项</p><ul><li>门面模式可能会引入单点失败问题，因为所有请求都通过门面进行。</li><li>如果子系统接口很多，门面类可能会变得庞大且难以维护。</li><li>门面模式可能会隐藏子系统的复杂性，导致在需要直接使用子系统时产生困难。</li></ul><p>适用场景</p><ul><li>当你要为一个复杂子系统提供一个简单接口时。</li><li>客户端与多个子系统之间存在很大的依赖性。</li><li>当你需要将一个子系统划分成几个相互协作的类时。</li></ul><h2 id="java-8" tabindex="-1"><a class="header-anchor" href="#java-8"><span>Java 8</span></a></h2><p>案例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 子系统A</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SubsystemA</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Subsystem A: Operation A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 子系统B</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SubsystemB</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Subsystem B: Operation B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 子系统C</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SubsystemC</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Subsystem C: Operation C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 门面类，提供了一个简化的接口</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 引用子系统对象</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">SubsystemA</span> subsystemA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubsystemA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">SubsystemB</span> subsystemB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubsystemB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">SubsystemC</span> subsystemC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubsystemC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 提供一个简单的操作方法，隐藏子系统复杂性</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        subsystemA<span class="token punctuation">.</span><span class="token function">operationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        subsystemB<span class="token punctuation">.</span><span class="token function">operationB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        subsystemC<span class="token punctuation">.</span><span class="token function">operationC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 客户端代码，使用门面模式</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FacadePatternDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 创建门面对象</span></span>
<span class="line">        <span class="token class-name">Facade</span> facade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 客户端只需要与门面交互，而不需要直接与子系统交互</span></span>
<span class="line">        facade<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注释</p><ul><li>在这个例子中，我们定义了三个子系统<code>SubsystemA</code>、<code>SubsystemB</code>和<code>SubsystemC</code>，每个子系统都有一个操作方法。门面类<code>Facade</code>提供了这些子系统的简化接口，它内部包含了子系统对象的引用，并定义了一个<code>operation</code>方法来隐藏子系统的复杂性。</li><li>客户端代码通过门面类<code>Facade</code>的<code>operation</code>方法与子系统交互，而不需要直接与每个子系统进行交互。这样，客户端代码就与子系统的具体实现解耦了，使得代码更加简洁，也更容易维护。</li></ul></div>`,14)]))}const o=s(t,[["render",c]]),u=JSON.parse('{"path":"/software/DesignPattern-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F.html","title":"DesignPattern - 门面模式","lang":"zh-CN","frontmatter":{"title":"DesignPattern - 门面模式","author":"魔术桌","cover":"","category":["软件程序/设计模式"],"date":"2024-11-18T00:00:00.000Z","tag":["进度-已完成","知识总结"],"description":"文章摘要： 门面模式使用总结。 简介 简要说明 门面模式（Facade Pattern）是一种结构型设计模式。 提供了一个统一的高层接口，用来访问子系统中的一群接口，使得子系统更容易使用。 主要功能 为子系统中的一组接口提供一个统一的接口。 定义了一个高层接口，使得子系统更加易于使用。 客户端与子系统之间的解耦，使得子系统内部的改变不会影响到客户端。 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DesignPattern - 门面模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-03T09:56:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/DesignPattern-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"DesignPattern - 门面模式"}],["meta",{"property":"og:description","content":"文章摘要： 门面模式使用总结。 简介 简要说明 门面模式（Facade Pattern）是一种结构型设计模式。 提供了一个统一的高层接口，用来访问子系统中的一群接口，使得子系统更容易使用。 主要功能 为子系统中的一组接口提供一个统一的接口。 定义了一个高层接口，使得子系统更加易于使用。 客户端与子系统之间的解耦，使得子系统内部的改变不会影响到客户端。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T09:56:57.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-11-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-03T09:56:57.000Z"}]]},"git":{"updatedTime":1759485417000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/DesignPattern-门面模式.md","excerpt":"<p><strong>文章摘要：</strong> 门面模式使用总结。</p>\\n"}');export{o as comp,u as data};
