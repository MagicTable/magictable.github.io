import{_ as o,c as a,a as l,b as n,d as t,e as r,w as s,r as d,o as c}from"./app-D67BBu3k.js";const p="/assets/Package-Kubectl-Kubernetes(k8s)-%E6%B5%81%E7%A8%8B%E5%9B%BE.excalidraw-CMpmG2do.svg",u={};function h(b,e){const i=d("RouteLink");return c(),a("div",null,[e[2]||(e[2]=l('<p><strong>文章摘要：</strong> Kubernetes通常简称为K8s，是一个开源的容器编排平台，用于自动化计算机容器化应用程序的部署、扩展和管理。</p><blockquote><p><img src="'+p+'" alt="流程图"></p></blockquote><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>允许你在集群中调度和运行容器，集群可以由物理机或虚拟机组成。</li><li>Kubernetes隐藏了底层硬件层的复杂性，使得部署和管理容器化的应用程序变得更加简单。</li></ul><p>主要功能</p><ul><li><strong>自动装箱</strong>：基于容器的资源需求，自动决定在哪个节点上运行。</li><li><strong>自我修复</strong>：如果容器失败，Kubernetes会重启它；如果节点失败，则将容器重新调度到其他节点。</li><li><strong>水平扩展</strong>：通过简单的命令或基于自动化的CPU等使用情况，可以很容易地增加或减少应用程序的副本数量。</li><li><strong>服务发现和负载均衡</strong>：Kubernetes可以使用DNS名或自己的IP地址自动发现容器，如果容器的流量过大，可以负载均衡流量，确保部署稳定。</li><li><strong>自动部署和回滚</strong>：可以描述应用程序的预期状态，Kubernetes可以改变实际状态至预期状态，如果有什么不对，可以回滚到之前的版本。</li><li><strong>密钥与配置管理</strong>：无需改动镜像配置，就可以更新应用程序配置和密钥。</li></ul><p>注意事项</p><ul><li><strong>学习曲线</strong>：Kubernetes相对复杂，有陡峭的学习曲线。</li><li><strong>资源需求</strong>：运行Kubernetes集群需要相对较多的计算资源。</li><li><strong>安全性</strong>：需要确保集群的安全，防止未授权访问。</li><li><strong>版本兼容性</strong>：在升级Kubernetes版本时，需要确保所有组件都与新版本兼容。</li><li><strong>监控和日志</strong>：需要设置适当的监控和日志记录机制来确保集群的稳定运行。</li></ul><p>适用场景</p><ul><li><strong>微服务架构</strong>：适用于需要快速、频繁部署的微服务架构。</li><li><strong>自动化和弹性</strong>：适用于需要高度自动化和弹性伸缩的应用程序。</li><li><strong>资源优化</strong>：适用于希望最大化资源利用率和降低成本的环境。</li><li><strong>多云和混合云</strong>：适用于需要在多个云环境或混合云环境中部署应用程序的场景。</li><li><strong>持续集成/持续部署（CI/CD）</strong>：适用于实现CI/CD流程，以支持敏捷开发和持续交付。</li></ul><h2 id="命令行工具" tabindex="-1"><a class="header-anchor" href="#命令行工具"><span>命令行工具</span></a></h2>',12)),n("p",null,[e[1]||(e[1]=t("命令行工具详细总结：")),r(i,{to:"/software/Package-Kubectl.html"},{default:s(()=>e[0]||(e[0]=[t("Package-Kubectl")])),_:1,__:[0]})]),e[3]||(e[3]=l('<h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><h3 id="pod" tabindex="-1"><a class="header-anchor" href="#pod"><span>Pod</span></a></h3><ul><li>Pod是Kubernetes的最小工作单元。</li><li>每个Pod包含一个或多个容器。</li><li>Pod中的容器会作为一个整体被Master调度到一个Node上运行。</li><li>Pod有自己独立的IP。</li><li>Pod可以被创建、销毁。</li><li>当扩容和缩容时，Pod的数量会发生变化。</li><li>当Pod故障时，会创建新的Pod。</li></ul><div class="hint-container note"><p class="hint-container-title">注释</p><ul><li>将联系紧密的容器封装在一个Pod单元内，以Pod整体进行调度、扩展和实现生命周期管理。</li><li>Pod内所有容器使用相同的网络和共享存储。容器之间直接通过本地网络直接通讯，提高沟通效率。</li></ul></div><h3 id="控制器-controller" tabindex="-1"><a class="header-anchor" href="#控制器-controller"><span>控制器（Controller）</span></a></h3><ul><li>负载均衡是在Pod之上的抽象，通过<code>控制器</code>实现一系列基于Pod的高级特性。</li><li>我们通常使用<code>控制器</code>来做应用真正的管理，而Pod是组成负载最小的单元。</li></ul><p>ReplicationController</p><ul><li>用来确保容器应用的副本数始终保持在用户定义的副本数。</li><li>如果有容器异常退出，会自动创建新的Pod来替代。</li><li>如果有异常多出来的容器也会自动回收。</li></ul><p>ReplicaSet</p><ul><li>与ReplicationController没有本质的不同，但支持集合式的selector。</li></ul><p>建议使用Deployment来自动管理ReplicaSet，这样就无需担心跟其他机制的不兼容问题。</p><p>Horizontal Pod Autoscaling 仅限于ReplicaSet和Deployment，对Pod进行水平扩容和缩容。</p><p>StatefulSet解决有状态服务的问题</p><ul><li>稳定的持久化存储，即Pod重新调度后还是能访问到相同的持久化数据，基于PVC实现。</li><li>稳定的网络标志，即Pod重新调度后其PodName和HostName不变，基于Headless Service来实现。</li><li>有序部署，有序扩展，即Pod是有序的，在部署或者扩展的时候要依据定义的顺序一次进行，基于init containers来实现。</li><li>有序回收，有序删除。</li></ul><p>DaemonSet</p><ul><li>确保全部（或者一些）Node上运行一个Pod的副本。</li><li>当有Node加入集群时，也会为他们新增一个Pod。</li><li>当有Node从集群移除时，这些Pod也会被回收。</li><li>删除DaemonSet将会删除它创建的所有Pod。</li></ul><p>Job</p><ul><li>负责批处理任务，即仅执行一次的任务。</li><li>保证批处理认为的一个或多个Pod成功结束。</li></ul><p>Cron Job管理基于时间的Job</p><ul><li>在给定时间点只运行一次。</li><li>周期性地在给定时间点运行。</li></ul><h3 id="服务-service" tabindex="-1"><a class="header-anchor" href="#服务-service"><span>服务（Service）</span></a></h3><ul><li><code>服务</code>是一种抽象概念，定义了Pod逻辑集合以及访问它们的策略。</li><li><code>服务</code>定义了外界访问一组特定Pod的方式。</li><li><code>服务</code>有自己的IP和端口，</li><li><code>服务</code>为Pod提供了负载均衡。</li></ul><div class="hint-container note"><p class="hint-container-title">注释</p><ul><li>在Kubernetes中，Pod副本发生迁移或伸缩的时候会发生变化，IP也会发生变化。</li><li><code>服务</code>会监听Pod的IP变化，并统一对外提供IP。</li></ul></div><h3 id="容量-volume" tabindex="-1"><a class="header-anchor" href="#容量-volume"><span>容量（Volume）</span></a></h3><ul><li>用来管理Kubernetes存储。</li><li>声明在Pod中的容器可以访问的文件目录。</li><li>可以被挂载在Pod中一个或多个容器的指定路径下。</li><li>支持多种后端存储（本地存储、分布式存储、云存储）。</li></ul><h3 id="标签-label" tabindex="-1"><a class="header-anchor" href="#标签-label"><span>标签（Label）</span></a></h3><ul><li>通过<code>标签</code>来实现资源分类管理。</li></ul><h3 id="命名空间-namespace" tabindex="-1"><a class="header-anchor" href="#命名空间-namespace"><span>命名空间（Namespace）</span></a></h3><ul><li><code>命名空间</code>是对一组资源和对象的抽象整合。</li><li>在同一个集群内容可创建不同的<code>命名空间</code>，不同<code>命名空间</code>中的数据彼此隔离，实现共享同一个集群服务并且互不干扰。</li></ul><p>集群默认存在以下<code>命名空间</code>：</p><ul><li><code>default</code>：所有未指定<code>命名空间</code>的对象都会被分配在名为<code>default</code>的<code>命名空间</code>。</li><li><code>kube-public</code>：在<code>命名空间</code>下的资源可以被所有人访问（包含未认证用户），用来部署公共插件、容器模板等。</li><li><code>kube-system</code>：所有由 Kubernetes 系统创建的资源都处于这个<code>命名空间</code>。</li><li><code>kube-nade-lease</code>：每个节点在该<code>命名空间</code>中都有一个关联的<code>标签</code>对象，该对象由节点定期更新，被用来记录Note节点的心跳信号。</li></ul><h2 id="架构" tabindex="-1"><a class="header-anchor" href="#架构"><span>架构</span></a></h2><ul><li>一个基础的Kubernetes集群（Cluster）通常包含一个Master节点和多个Note节点。</li><li>每个阶段都是一台物理机，也可以是一台虚拟机。</li></ul><p>Master节点</p><ul><li>提供集群控制，对集群做出全局性决策。</li><li><strong>Kube-apiserver</strong>：前端控制层，Kubernetes API，水平扩展架构，通过部署更多实例来承载业务。</li><li><strong>etcd</strong>：后端存储，存储集群数据，提供数据备份。</li><li><strong>Kube-controller-manager</strong>：控制器，负责策略控制，针对不同的工作负载执行不同的策略。</li><li><strong>Kube-scheduler</strong>：任务调度，监控没有分配节点的新创建的Pod，选择一个节点供Pod运行。</li></ul><p>Node节点</p><ul><li>运行容器应用，由Master管理，负责健康并汇总容器状态，同时根据Master的要求管理容器的生命周期。</li><li><strong>Kubelet</strong>：在集群内每个节点中运行的一个代理，用于保证Pod的与性能，接受Master的指令，负责管理容器（Pod）。</li><li><strong>Kube-proxy</strong>：负责做负载均衡工作，管理Service的访问入口。</li><li><strong>Add-ons</strong>：插件，用于扩展Kubernetes的功能。</li><li><strong>Container runtime</strong>：通常使用Docker来运行容器。</li></ul><div class="hint-container note"><p class="hint-container-title">注释</p><ul><li>通常在Master节点上不运行用户容器。为了提高高可用可以创建多个Master节点。</li></ul></div><p>架构图</p><h2 id="开放接口" tabindex="-1"><a class="header-anchor" href="#开放接口"><span>开放接口</span></a></h2><div class="hint-container note"><p class="hint-container-title">注释</p><ul><li>Kubernetes作为云原生应用的基础调度平台，相当于云原生的操作系统。</li><li>为了便于系统的扩展，Kubernetes中开放来以下接口，可以分别对接不同的后端，实现自己的业务逻辑。</li></ul></div><p>CRI（Container Runtime Interface）</p><ul><li>容器运行时接口。</li><li>提供计算能力，定义来容器和镜像的服务接口。</li><li>常见的CRI后端有Docker、rkt、kata-containers等。</li></ul><p>CNI（Container Network Interface）</p><ul><li>容器网络接口。</li><li>提供网络能力，由一组用于配置Linux容器的网络接口的规范和库组成。</li><li>仅关注容器创建是的网络分配和当容器被删除是释放网络资源。</li></ul><p>CSI（Container Storage Interface）</p><ul><li>容器存储接口。</li><li>提供存储能力，Kubernetes可以将任意存储系统暴露给自己的容器工作负载。</li></ul><h2 id="工作负载对象" tabindex="-1"><a class="header-anchor" href="#工作负载对象"><span>工作负载对象</span></a></h2><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><p><strong>无状态</strong></p><p>管理的Pod集合是相互等价的，需要的时候可以被替换。</p><ul><li>Deployment（部署）</li><li>ReplicaSet（副本设置）</li></ul><p><strong>有状态</strong></p><p>为每个Pod维护一个唯一的ID,能够保证Pod的顺序性和唯一性，每个Pod是不可替代的。可以使用持久存储来保存服务产生的状态。</p><ul><li>StatefulSet（状态设置）</li></ul><p><strong>守护进程</strong></p><p>保证每个节点上运行着守护进程。</p><ul><li>DaemonSet（守护程序设置）</li></ul><p><strong>批处理</strong>：</p><p>一次性的任务。</p><ul><li>Job（任务）</li><li>CronJob（定时任务）</li></ul><h3 id="deployment" tabindex="-1"><a class="header-anchor" href="#deployment"><span>Deployment</span></a></h3><p>简要说明</p><ul><li>不具有唯一标识的多个Pod的集合。</li></ul><p>主要功能</p><ul><li>确保集群中期望数量的Pod运行。</li><li>提供多种升级策略以及意见回滚能力。</li><li>提供暂停/恢复的能力。</li></ul><p>适用场景</p><ul><li>Web Server等无状态应用。</li></ul><h3 id="replicaset" tabindex="-1"><a class="header-anchor" href="#replicaset"><span>ReplicaSet</span></a></h3><p>简要说明</p><ul><li></li></ul><p>主要功能</p><ul><li>Pod有稳定的网格标识符，Pod重新调度后Pod名称和Host名称不变。</li><li>每个Pod有单独存储，保证Pod重新调度后还是能访问到相同的数据。</li></ul><p>适用场景</p><ul><li>在某些分布式的场景，要求每个Pod都有自己单独的状态时。</li></ul><h2 id="服务发现" tabindex="-1"><a class="header-anchor" href="#服务发现"><span>服务发现</span></a></h2><h2 id="pod生命周期" tabindex="-1"><a class="header-anchor" href="#pod生命周期"><span>Pod生命周期</span></a></h2>',77))])}const m=o(u,[["render",h]]),P=JSON.parse('{"path":"/software/Package-Kubectl-Kubernetes(k8s)%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html","title":"Package - Kubectl - Kubernetes(k8s)基础知识","lang":"zh-CN","frontmatter":{"title":"Package - Kubectl - Kubernetes(k8s)基础知识","author":"魔术桌","cover":"","category":["软件程序/软件包"],"date":"2024-12-08T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： Kubernetes通常简称为K8s，是一个开源的容器编排平台，用于自动化计算机容器化应用程序的部署、扩展和管理。 流程图 简介 简要说明 允许你在集群中调度和运行容器，集群可以由物理机或虚拟机组成。 Kubernetes隐藏了底层硬件层的复杂性，使得部署和管理容器化的应用程序变得更加简单。 主要功能 自动装箱：基于容器的资源需求，自动决定...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Package - Kubectl - Kubernetes(k8s)基础知识\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-06T02:37:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Package-Kubectl-Kubernetes(k8s)%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Package - Kubectl - Kubernetes(k8s)基础知识"}],["meta",{"property":"og:description","content":"文章摘要： Kubernetes通常简称为K8s，是一个开源的容器编排平台，用于自动化计算机容器化应用程序的部署、扩展和管理。 流程图 简介 简要说明 允许你在集群中调度和运行容器，集群可以由物理机或虚拟机组成。 Kubernetes隐藏了底层硬件层的复杂性，使得部署和管理容器化的应用程序变得更加简单。 主要功能 自动装箱：基于容器的资源需求，自动决定..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-06T02:37:54.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-12-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-06T02:37:54.000Z"}]]},"git":{"updatedTime":1759718274000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":2},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2fee46a18beafc4284ad1e19b3f2684c7954037e","time":1759718274000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"手机端同步笔记"},{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Package-Kubectl-Kubernetes(k8s)基础知识.md","excerpt":"<p><strong>文章摘要：</strong> Kubernetes通常简称为K8s，是一个开源的容器编排平台，用于自动化计算机容器化应用程序的部署、扩展和管理。</p>\\n"}');export{m as comp,P as data};
