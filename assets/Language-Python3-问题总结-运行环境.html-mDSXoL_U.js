import{_ as t,c as o,a,o as n}from"./app-D67BBu3k.js";const p={};function i(s,e){return n(),o("div",null,e[0]||(e[0]=[a(`<p><strong>文章摘要：</strong> 摘要内容。</p><p>python的创建虚拟环境是什么？如何创建？ <a href="https://zhuanlan.zhihu.com/p/108534526" target="_blank" rel="noopener noreferrer">虚拟环境介绍</a></p><h2 id="环境是什么" tabindex="-1"><a class="header-anchor" href="#环境是什么"><span>环境是什么？</span></a></h2><p>环境是指python代码的运行环境，包含了以下信息：</p><ul><li><p>python解释器，用哪个解释器来执行代码？</p></li><li><p>python库的位置，应该去哪里import导入所需要的模块？</p></li><li><p>可执行程序的位置，比如安装了pip那么pip命令是在哪里？</p></li><li><p>当我们说包的路径在 <code>Lib</code>文件夹里和第三方包路径在<code>Lib/site-packages</code>文件夹里的时候，虽然大多数的情况下就是这样的，但是实际上并不准确。</p></li><li><p>包的搜寻路径是通过 Python 系统中的一个变量决定的，也就是 <code>sys.path</code>，是一个内置函数，也是一个标准（标配/内置）包。</p></li></ul><p>我们先来打印一下看看：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">&gt;&gt;&gt; import sys</span>
<span class="line">&gt;&gt;&gt; from pprint import pprint</span>
<span class="line">&gt;&gt;&gt; pprint(sys.path)</span>
<span class="line">[&#39;&#39;,   # 注意，别忽视了第 1 个</span>
<span class="line"> &#39;C:\\\\Users\\\\Davy\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python38\\\\python38.zip&#39;,</span>
<span class="line"> &#39;C:\\\\Users\\\\Davy\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python38\\\\DLLs&#39;,</span>
<span class="line"> &#39;C:\\\\Users\\\\Davy\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python38\\\\lib&#39;,</span>
<span class="line"> &#39;C:\\\\Users\\\\Davy\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python38&#39;,</span>
<span class="line"> &#39;C:\\\\Users\\\\Davy\\\\AppData\\\\Roaming\\\\Python\\\\Python38\\\\site-packages&#39;,</span>
<span class="line"> &#39;C:\\\\Users\\\\Davy\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python38\\\\lib\\\\site-packages&#39;]</span>
<span class="line">&gt;&gt;&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>pprint</code> 是内置的 pretty-print 模块，可以自动换行，让打印结果好看一点。</p><p>注意：第 1 项是一个空字符串，它代表的是当前路径，也就是你启动程序的地方。比如说，我们默认情况下进入命令行就自动进入到当前用户的目录，例如 <code>C:\\Users\\Davy</code>，那么当前目录就是这个。</p><p>如果你还感到疑惑，可以用下面的语句打印出绝对路径：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">&gt;&gt;&gt; import os.path</span>
<span class="line">&gt;&gt;&gt; Eos.path.abspath(&#39;&#39;)</span>
<span class="line">&#39;C:\\\\Users\\\\Davy&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是虚拟环境" tabindex="-1"><a class="header-anchor" href="#什么是虚拟环境"><span>什么是虚拟环境？</span></a></h2><p>虚拟环境是Python环境的一个副本。</p><p>要得到这样一个副本的步骤</p><ul><li>要给它单独找个文件夹存起来</li><li>要给它取个名字</li></ul><p>这个文件夹的名字也就是这个虚拟环境的名字，此文件夹下面有这些东西：</p><ul><li>一个python.exe</li><li>一个Scripts目录</li><li>一个Lib目录</li></ul><p>这里虚拟环境和普通环境有不一样的地方:</p><ul><li>python.exe也放在了Scripts目录下面</li><li>Lib目录下面只有site-packages目录</li></ul><h2 id="为什么要有虚拟环境" tabindex="-1"><a class="header-anchor" href="#为什么要有虚拟环境"><span>为什么要有虚拟环境</span></a></h2><p>当我们安装一个python程序或者库的时候，一般情况下我们虽然是想要安装一个包，但是，比如安装TensorFlow（机器学习）库时，实际安装的是一堆包，这些包默认都会安装到python环境的Lib/site-packages文件夹下面。</p><p>等到下次再安装其他包时，如果这个包的某个依赖包已经存在则不会重复下载（之前有下载过）。</p><p>这样会使得如果要删除一个包的时候是需要自己手动删除此包的依赖包的，会使得自己都不知道要删除那些依赖包。而且有可能会出现版本不兼容的问题。</p><h2 id="venv模块" tabindex="-1"><a class="header-anchor" href="#venv模块"><span>venv模块</span></a></h2><p>在Python 2.X的时候，创建虚拟环境还需要安装第三方的virtualenv库；</p><p>==现在Python3.3版本之后，标准库中有内置的venv模块，可以用来创建虚拟环境。==</p><h5 id="venv模块的基本操作" tabindex="-1"><a class="header-anchor" href="#venv模块的基本操作"><span>venv模块的基本操作</span></a></h5><p><strong>windows平台的操作方法：</strong></p><ol><li>创建虚拟环境</li></ol><blockquote><p>方法一： <code>python -m venv [虚拟环境名字]</code></p><blockquote><p>///这行代码中的<code>python</code>可以根据自己改为<code>python2</code>或者<code>python3</code>，<code>python</code>是只有一个版本的时候才推荐使用。</p></blockquote><p>方法二： <code>py -3 -m venv [虚拟环境名字]</code></p><blockquote><p>///这行代码中的<code>py</code>等同于<code>python</code>，而后面的<code>-3</code>就是python的大版本，可以是<code>-2</code>or<code>-3</code>or只有一个版本的时候可以选择不写。</p></blockquote><p>执行完上一步，会在所在位置建立一个文件夹（虚拟环境名字），文件夹中有三个&quot;lnclude、Lib、Scripts&quot;文件夹和一个&quot;pyvenv.cfg&quot;文件。并且以后我们在虚拟环境中所有的操作以及下载的库文件，都会在这个文件夹中。</p></blockquote><ol start="2"><li>激活虚拟环境</li></ol><blockquote><p><code>完整路径\\[虚拟环境名字]\\Scripts\\activate</code></p><blockquote><p>==///后面的Scripts、activate两个文件夹是什么我还不是很清楚，知道后再修改。== ==待完善==</p></blockquote><p>执行完上一步，会自动会刷新命令行界面，以括号内嵌虚拟环境名字的形式来提示用户，现在是处于venv虚拟环境中。</p></blockquote><ol start="3"><li>使用虚拟环境</li></ol><blockquote><p>虚拟环境除了 Python 一些核心的包、pip 工具等等，其他都没有，因此，当前项目需要什么，则使用下载工具下载即可。其他的使用方法，与系统环境下的使用没有什么不同。</p></blockquote><ol start="4"><li>退出虚拟环境</li></ol><blockquote><p><code>deactivate</code></p><blockquote><p>///退出虚拟环境很简单，各平台都是一样的，从虚拟环境中退出到系统环境是很明显的，因为前面的虚拟环境名称提示符消失了。</p></blockquote></blockquote><p>==如果不需要这个虚拟环境了，就直接删除该虚拟环境创建的整个文件夹就可以了。==</p><p><strong>MacOS或者Linux平台的操作方法：</strong></p><ol><li>创建虚拟环境</li></ol><blockquote><p><code>python3 -m venv [虚拟环境名字]</code></p><blockquote><p>///这行代码中的<code>python3</code>可以根据自己python的大版本改为<code>python2</code>或者<code>python3</code>。</p></blockquote><p>执行完上一步，会在所在位置建立一个文件夹（虚拟环境名字），文件夹中有三个&quot;lnclude、Lib、Scripts&quot;文件夹和一个&quot;pyvenv.cfg&quot;文件。并且以后我们在虚拟环境中所有的操作以及下载的库文件，都会在这个文件夹中。</p></blockquote><ol start="2"><li>激活虚拟环境</li></ol><blockquote><p><code>suurce [虚拟环境名字]/bin/activate</code></p><blockquote><p>==///具体这个文件夹干什么还不清楚。== ==待完善==</p></blockquote><p>执行完上一步，会自动会刷新命令行界面，以括号内嵌虚拟环境名字的形式来提示用户，现在是处于venv虚拟环境中。</p></blockquote><ol start="3"><li>使用虚拟环境</li></ol><blockquote><p>虚拟环境除了 Python 一些核心的包、pip 工具等等，其他都没有，因此，当前项目需要什么，则使用下载工具下载即可。其他的使用方法，与系统环境下的使用没有什么不同。</p></blockquote><ol start="4"><li>退出虚拟环境</li></ol><blockquote><p><code>deactivate</code></p><blockquote><p>///退出虚拟环境很简单，各平台都是一样的，从虚拟环境中退出到系统环境是很明显的，因为前面的虚拟环境名称提示符消失了。</p></blockquote></blockquote><p>==如果不需要这个虚拟环境了，就直接删除该虚拟环境创建的整个文件夹就可以了。==</p><h2 id="结束语" tabindex="-1"><a class="header-anchor" href="#结束语"><span>结束语</span></a></h2><p>《Flask Web Development 2nd Edition》的作者所说的：</p><ul><li>在系统环境中，使用最基本的 Python 解释器提供虚拟环境 venv 的功能，然后在各个虚拟环境中完成我们的项目，这样是比较好的项目组织方式。</li></ul>`,50)]))}const c=t(p,[["render",i]]),r=JSON.parse('{"path":"/software/Language-Python3-%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93-%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83.html","title":"Language - Python 3 - 问题总结 - 运行环境","lang":"zh-CN","frontmatter":{"title":"Language - Python 3 - 问题总结 - 运行环境","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2024-11-21T00:00:00.000Z","tag":["进度-已停滞","查询手册"],"description":"文章摘要： 摘要内容。 python的创建虚拟环境是什么？如何创建？ 虚拟环境介绍 环境是什么？ 环境是指python代码的运行环境，包含了以下信息： python解释器，用哪个解释器来执行代码？ python库的位置，应该去哪里import导入所需要的模块？ 可执行程序的位置，比如安装了pip那么pip命令是在哪里？ 当我们说包的路径在 Lib文件夹...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Python 3 - 问题总结 - 运行环境\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Python3-%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93-%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Python 3 - 问题总结 - 运行环境"}],["meta",{"property":"og:description","content":"文章摘要： 摘要内容。 python的创建虚拟环境是什么？如何创建？ 虚拟环境介绍 环境是什么？ 环境是指python代码的运行环境，包含了以下信息： python解释器，用哪个解释器来执行代码？ python库的位置，应该去哪里import导入所需要的模块？ 可执行程序的位置，比如安装了pip那么pip命令是在哪里？ 当我们说包的路径在 Lib文件夹..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"查询手册"}],["meta",{"property":"article:tag","content":"进度-已停滞"}],["meta",{"property":"article:published_time","content":"2024-11-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Python3-问题总结-运行环境.md","excerpt":"<p><strong>文章摘要：</strong> 摘要内容。</p>\\n"}');export{c as comp,r as data};
