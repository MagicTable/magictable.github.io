import{_ as s,c as a,a as e,o as p}from"./app-D67BBu3k.js";const t={};function l(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p><strong>文章摘要：</strong> 二叉树排序算法通常指的是通过构建一棵二叉搜索树（BST）来进行排序。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>二叉树排序算法通常指的是通过构建一棵二叉搜索树（BST）来进行排序。在这种方法中，数据元素被插入到二叉搜索树中，树的每个节点都遵循左子树小于父节点，右子树大于父节点的规则。</li><li>排序过程是通过中序遍历这棵树来完成的，因为中序遍历会按照升序访问所有节点。</li></ul><p>主要功能</p><ul><li>对一组数据进行排序。</li><li>通过构建二叉搜索树，将数据元素插入到适当的位置。</li><li>通过中序遍历二叉搜索树来获取有序的数据序列。</li></ul><p>注意事项</p><ul><li>二叉树排序的性能依赖于树的结构。如果树极度不平衡，性能会下降到接近O(n^2)。</li><li>为了避免性能问题，有时会使用平衡二叉树（如AVL树或红黑树）来保证排序的效率。</li></ul><p>适用场景</p><ul><li>适用于不需要稳定排序的场景。</li><li>适用于数据动态插入和删除的场景，因为二叉搜索树可以高效地进行这些操作。</li></ul><p>时间复杂度</p><ul><li>最坏情况：O(n^2)，当树退化成链表时。</li><li>平均情况：O(n log n)，在平衡树的情况下。</li><li>最好情况：O(n log n)，在平衡树的情况下。</li></ul><p>空间复杂度</p><ul><li>O(n)，因为需要存储整个数据集。</li></ul><h2 id="java-8" tabindex="-1"><a class="header-anchor" href="#java-8"><span>Java 8</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Node</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        value <span class="token operator">=</span> item<span class="token punctuation">;</span></span>
<span class="line">        left <span class="token operator">=</span> right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">BinaryTreeSort</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Node</span> root<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 插入节点到二叉搜索树</span></span>
<span class="line">    <span class="token class-name">Node</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 如果树为空，返回新的节点</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 否则，递归地插入到左子树或右子树</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 返回节点指针</span></span>
<span class="line">        <span class="token keyword">return</span> node<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 中序遍历二叉搜索树，打印排序后的结果</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">BinaryTreeSort</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 将值插入到二叉搜索树</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            tree<span class="token punctuation">.</span>root <span class="token operator">=</span> tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>root<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 中序遍历二叉搜索树并打印排序后的数组</span></span>
<span class="line">        tree<span class="token punctuation">.</span><span class="token function">inorderTraversal</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注释</p><p>在这个Java案例中，我们定义了一个<code>Node</code>类来表示二叉树的节点，以及一个<code>BinaryTreeSort</code>类来执行二叉树排序。<code>insert</code>方法用于将新值插入到二叉搜索树中，而<code>inorderTraversal</code>方法用于中序遍历树并打印排序后的值。</p></div>`,17)]))}const i=s(t,[["render",l]]),u=JSON.parse('{"path":"/software/Algorithm-%E6%8E%92%E5%BA%8F-%E4%BA%8C%E5%8F%89%E6%A0%91%E6%8E%92%E5%BA%8F.html","title":"Algorithm - 排序 - 二叉树排序","lang":"zh-CN","frontmatter":{"title":"Algorithm - 排序 - 二叉树排序","author":"魔术桌","cover":"","category":["软件程序/算法设计"],"date":"2024-05-01T00:00:00.000Z","tag":["进度-已完成","知识总结"],"description":"文章摘要： 二叉树排序算法通常指的是通过构建一棵二叉搜索树（BST）来进行排序。 简介 简要说明 二叉树排序算法通常指的是通过构建一棵二叉搜索树（BST）来进行排序。在这种方法中，数据元素被插入到二叉搜索树中，树的每个节点都遵循左子树小于父节点，右子树大于父节点的规则。 排序过程是通过中序遍历这棵树来完成的，因为中序遍历会按照升序访问所有节点。 主要功...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Algorithm - 排序 - 二叉树排序\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-03T09:56:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Algorithm-%E6%8E%92%E5%BA%8F-%E4%BA%8C%E5%8F%89%E6%A0%91%E6%8E%92%E5%BA%8F.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Algorithm - 排序 - 二叉树排序"}],["meta",{"property":"og:description","content":"文章摘要： 二叉树排序算法通常指的是通过构建一棵二叉搜索树（BST）来进行排序。 简介 简要说明 二叉树排序算法通常指的是通过构建一棵二叉搜索树（BST）来进行排序。在这种方法中，数据元素被插入到二叉搜索树中，树的每个节点都遵循左子树小于父节点，右子树大于父节点的规则。 排序过程是通过中序遍历这棵树来完成的，因为中序遍历会按照升序访问所有节点。 主要功..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T09:56:57.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-03T09:56:57.000Z"}]]},"git":{"updatedTime":1759485417000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Algorithm-排序-二叉树排序.md","excerpt":"<p><strong>文章摘要：</strong> 二叉树排序算法通常指的是通过构建一棵二叉搜索树（BST）来进行排序。</p>\\n"}');export{i as comp,u as data};
