import{_ as s,c as a,a as e,o as p}from"./app-D67BBu3k.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p><strong>文章摘要：</strong> 摘要内容。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li></li></ul><p>主要功能</p><ul><li></li></ul><p>注意事项</p><ul><li></li></ul><p>适用场景</p><ul><li></li></ul><p>时间复杂度</p><ul><li>最坏情况：<code>O(log n)</code></li><li>最好情况：若带查找元素恰好在数组中央位置，只需要循环一次 <code>O(1)</code></li></ul><p>空间复杂度</p><ul><li>需要常数个指针<code>i、j、m</code>，因此额外占用的空间是<code>O(1)</code></li></ul><h2 id="java-8" tabindex="-1"><a class="header-anchor" href="#java-8"><span>Java 8</span></a></h2><p>提示：将<code>(i + j) / 2</code>改为<code>(i + j) &gt;&gt;&gt; 1</code>。</p><ul><li>当<code>j</code>的取值范围非常大，比如<code>j</code>达到了整数数据类型规定的最大值，当进行第一次区中间值后，在取第二个中间值时，<code>i</code>将等于中间值，这时会进行<code>i + j</code>的操作，数值将超出整数数据类型规定的最大值，最终得到的结果会变成负数，问题就此出现。</li><li>java将一个数的二进制表示时，会把最高位的一个二进制数作为符号位。当二进制的最高位为1的时候就代表是负数。</li><li>该符号<code>&gt;&gt;&gt;</code>代表无符号右移运算符，将在二进制数下将所有0和1向右移，高位补零。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 待查找的数组</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 调用算法函数</span></span>
<span class="line">        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 显示结果</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 算法</span>
<span class="line">     * Params:</span>
<span class="line">     *     - array：待查找的数组</span>
<span class="line">     *     - target：待查找的目标值</span>
<span class="line">     * Returns:</span>
<span class="line">     *     - 若找到则返回索引</span>
<span class="line">     *     - 若没找到则返回-1</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token comment">// 数组左边边界的下标</span></span>
<span class="line">        <span class="token keyword">int</span> j <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 数组右边边界的下标</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// i~j 将要查找的范围内还有数值</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// \`(i + j) &gt;&gt;&gt; 1\`代表转换为二进制下进行无符号右移1位</span></span>
<span class="line">            <span class="token comment">// 二进制右移1位相当于除以2并取整的功能</span></span>
<span class="line">            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">// 创建一个中间值</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">// 目标在中间值的左边</span></span>
<span class="line">                j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 目标在中间值的右边</span></span>
<span class="line">                i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                       <span class="token comment">// 目标正好就是中间值</span></span>
<span class="line">                <span class="token comment">// 在数组成功中找到需要查找的值，返回值在该数组中的下标</span></span>
<span class="line">                <span class="token keyword">return</span> m<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 在数组中并没有找到需要查找的值，值不在该数组中</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)]))}const i=s(t,[["render",l]]),r=JSON.parse('{"path":"/software/Algorithm-%E6%9F%A5%E6%89%BE-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html","title":"Algorithm - 查找 - 二分查找","lang":"zh-CN","frontmatter":{"title":"Algorithm - 查找 - 二分查找","author":"魔术桌","cover":"","category":["软件程序/算法设计"],"date":"2024-05-01T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： 摘要内容。 简介 简要说明 主要功能 注意事项 适用场景 时间复杂度 最坏情况：O(log n) 最好情况：若带查找元素恰好在数组中央位置，只需要循环一次 O(1) 空间复杂度 需要常数个指针i、j、m，因此额外占用的空间是O(1) Java 8 提示：将(i + j) / 2改为(i + j) >>> 1。 当j的取值范围非常大，比如j达...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Algorithm - 查找 - 二分查找\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Algorithm-%E6%9F%A5%E6%89%BE-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Algorithm - 查找 - 二分查找"}],["meta",{"property":"og:description","content":"文章摘要： 摘要内容。 简介 简要说明 主要功能 注意事项 适用场景 时间复杂度 最坏情况：O(log n) 最好情况：若带查找元素恰好在数组中央位置，只需要循环一次 O(1) 空间复杂度 需要常数个指针i、j、m，因此额外占用的空间是O(1) Java 8 提示：将(i + j) / 2改为(i + j) >>> 1。 当j的取值范围非常大，比如j达..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Algorithm-查找-二分查找.md","excerpt":"<p><strong>文章摘要：</strong> 摘要内容。</p>\\n"}');export{i as comp,r as data};
