import{_ as a,c as n,a as o,o as s}from"./app-D67BBu3k.js";const i={};function l(t,e){return s(),n("div",null,e[0]||(e[0]=[o(`<p><strong>文章摘要：</strong> 为输入输出提供缓冲区的类。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>简要说明</p><ul><li>提供用于高性能I/O操作的API。</li><li>包含了一套新的抽象，如缓冲区（Buffers）、通道（Channels）和选择器（Selectors），这些抽象支持非阻塞I/O操作，是Java New I/O API的核心。</li></ul><p>主要功能</p><ul><li><strong>缓冲区（Buffers）</strong>：提供了一组用于存储不同数据类型的容器，如ByteBuffer、CharBuffer等，这些缓冲区是通道读写数据的中介。</li><li><strong>通道（Channels）</strong>：代表打开到I/O设备（如文件、套接字等）的连接。通道用于从缓冲区读取数据或将数据写入缓冲区。</li><li><strong>选择器（Selectors）</strong>：用于监控多个通道的事件（如连接、接受、读取、写入），使得单个线程可以管理多个通道，适用于实现多路复用、非阻塞I/O。</li><li><strong>文件系统（FileSystems）</strong>：提供了访问文件系统的高级API，支持文件属性的查询和修改，以及文件系统的遍历。</li></ul><p>注意事项</p><ul><li><strong>内存管理</strong>：在使用缓冲区时，需要注意内存分配和释放，避免内存泄漏。</li><li><strong>线程安全</strong>：缓冲区不是线程安全的，多线程操作同一缓冲区时需要外部同步。</li><li><strong>性能影响</strong>：非阻塞I/O可以提高应用程序的性能，但同时也增加了编程的复杂性。</li><li><strong>正确的资源关闭</strong>：使用完通道和其他资源后，应该正确地关闭它们以释放系统资源。</li></ul><p>适用场景</p><ul><li><strong>高性能网络编程</strong>：使用NIO实现非阻塞网络通信，适用于需要高并发处理的网络应用。</li><li><strong>文件处理</strong>：使用NIO的文件通道和文件属性视图进行高效的文件读写操作。</li><li><strong>大规模数据处理</strong>：当需要处理大量数据时，NIO的缓冲区可以提供更高效的数据传输方式。</li><li><strong>需要非阻塞I/O的场景</strong>：在需要同时处理多个I/O操作而不希望为每个操作创建一个线程时，NIO的选择器非常有用。</li></ul><h3 id="主要组件" tabindex="-1"><a class="header-anchor" href="#主要组件"><span>主要组件</span></a></h3><h4 id="channels" tabindex="-1"><a class="header-anchor" href="#channels"><span>Channels</span></a></h4><p>通道是用于 I/O 操作的途径，与传统的流不同，通道是双向的，可以用于读写操作。</p><ul><li><code>FileChannel</code>: 用于文件的数据读写。</li><li><code>SocketChannel</code>: 用于 TCP 网络的数据读写。</li><li><code>ServerSocketChannel</code>: 监听 TCP 连接请求，并为每个请求创建一个 <code>SocketChannel</code>。</li><li><code>DatagramChannel</code>: 用于 UDP 网络的数据读写。</li></ul><h4 id="buffers" tabindex="-1"><a class="header-anchor" href="#buffers"><span>Buffers</span></a></h4><p>缓冲区是数据的容器，用于与通道进行数据交换。</p><ul><li><code>ByteBuffer</code>: 最常用的缓冲区，可以存储字节数据。</li><li><code>CharBuffer</code>, <code>ShortBuffer</code>, <code>IntBuffer</code>, <code>LongBuffer</code>, <code>FloatBuffer</code>, <code>DoubleBuffer</code>: 用于存储不同类型的数据。</li></ul><h4 id="selectors" tabindex="-1"><a class="header-anchor" href="#selectors"><span>Selectors</span></a></h4><p>选择器用于检查一个或多个通道是否准备好进行 I/O 操作，是支持非阻塞 I/O 的核心。</p><h4 id="files" tabindex="-1"><a class="header-anchor" href="#files"><span>Files</span></a></h4><p><code>Files</code> 类提供了大量用于操作文件和文件系统的静态方法。</p><h3 id="主要类和方法" tabindex="-1"><a class="header-anchor" href="#主要类和方法"><span>主要类和方法</span></a></h3><h4 id="bytebuffer" tabindex="-1"><a class="header-anchor" href="#bytebuffer"><span>ByteBuffer</span></a></h4><ul><li><code>allocate(int capacity)</code>: 分配一个新的字节缓冲区。</li><li><code>flip()</code>: 切换读写模式，将缓冲区的 limit 设置为 position，position 设置为 0。</li><li><code>clear()</code>: 清空缓冲区，准备下一次读写操作。</li><li><code>rewind()</code>: 重置 position 为 0，limit 保持不变。</li><li><code>remaining()</code>: 返回当前位置和限制之间的元素数。</li></ul><h4 id="filechannel" tabindex="-1"><a class="header-anchor" href="#filechannel"><span>FileChannel</span></a></h4><ul><li><code>read(ByteBuffer dst)</code>: 从通道读取数据到缓冲区。</li><li><code>write(ByteBuffer src)</code>: 从缓冲区写入数据到通道。</li><li><code>position()</code>: 返回通道的当前位置。</li><li><code>size()</code>: 返回通道所关联文件的大小。</li><li><code>transferFrom(ReadableByteChannel src, long position, long count)</code>: 从给定通道传输数据到这个通道。</li><li><code>transferTo(long position, long count, WritableByteChannel target)</code>: 从这个通道传输数据到给定的通道。</li></ul><h4 id="selector" tabindex="-1"><a class="header-anchor" href="#selector"><span>Selector</span></a></h4><ul><li><code>open()</code>: 打开一个选择器。</li><li><code>select()</code>: 选择一组键，其相应的通道已准备好进行 I/O 操作。</li><li><code>selectedKeys()</code>: 返回此选择器的已选择键集。</li></ul><h4 id="files-1" tabindex="-1"><a class="header-anchor" href="#files-1"><span>Files</span></a></h4><ul><li><code>readAllBytes(Path path)</code>: 读取整个文件内容到字节序列。</li><li><code>write(Path path, byte[] bytes, OpenOption... options)</code>: 将字节序列写入文件。</li><li><code>newBufferedReader(Path path, Charset cs)</code>: 打开一个用于读取文本文件的缓冲字符输入流。</li><li><code>newBufferedWriter(Path path, Charset cs, OpenOption... options)</code>: 打开一个用于写入文本文件的缓冲字符输出流。</li><li><code>copy(Path source, OutputStream out)</code>: 将文件内容复制到输出流。</li><li><code>walk(Path start, FileVisitOption... options)</code>: 遍历文件树。</li></ul><h3 id="学习总结" tabindex="-1"><a class="header-anchor" href="#学习总结"><span>学习总结</span></a></h3><ul><li><strong>非阻塞I/O</strong>: <code>java.nio</code> 提供的非阻塞 I/O 特性允许单个线程管理多个通道，从而提高性能。</li><li><strong>通道和缓冲区</strong>: 通道用于传输数据，缓冲区用于存储数据。通道的所有读写操作都是通过缓冲区来完成的。</li><li><strong>内存映射文件</strong>: <code>FileChannel</code> 支持内存映射文件，可以非常高效地读写文件内容。</li><li><strong>文件系统操作</strong>: <code>Files</code> 类提供了丰富的文件操作方法，包括文件读写、复制、遍历等。</li><li><strong>选择器</strong>: 选择器用于实现多路复用 I/O，可以在单个线程中处理多个通道。</li><li><strong>性能</strong>: 相比于传统的基于流的 I/O，<code>java.nio</code> 可以提供更高的性能，尤其是在处理大量数据时。</li><li><strong>安全性</strong>: 使用 <code>java.nio</code> 时需要注意资源管理和异常处理，以避免资源泄露和错误处理。</li></ul><h2 id="java-nio-channels" tabindex="-1"><a class="header-anchor" href="#java-nio-channels"><span><code>java.nio.channels</code></span></a></h2><p>定义通道，这些通道表示与能够执行 I/O 操作的实体（例如文件和套接字）的连接;定义选择器，用于多路复用、非阻塞 I/O 操作。</p><h2 id="java-nio-channels-spi" tabindex="-1"><a class="header-anchor" href="#java-nio-channels-spi"><span><code>java.nio.channels.spi</code></span></a></h2><p>java.nio.channels Service-provider 类。</p><h2 id="java-nio-charset" tabindex="-1"><a class="header-anchor" href="#java-nio-charset"><span><code>java.nio.charset</code></span></a></h2><p>定义字符集、解码器和编码器，用于在字节和 Unicode 字符之间进行转换。</p><h2 id="java-nio-charset-spi" tabindex="-1"><a class="header-anchor" href="#java-nio-charset-spi"><span><code>java.nio.charset.spi</code></span></a></h2><p>java.nio.charset Service-provider 类。</p><h2 id="java-nio-file" tabindex="-1"><a class="header-anchor" href="#java-nio-file"><span><code>java.nio.file</code></span></a></h2><p>定义 Java 虚拟机访问文件、文件属性和文件系统的接口和类。</p><h2 id="java-nio-file-attribute" tabindex="-1"><a class="header-anchor" href="#java-nio-file-attribute"><span><code>java.nio.file.attribute</code></span></a></h2><p>提供对文件和文件系统属性的访问的接口和类。</p><h2 id="java-nio-file-spi" tabindex="-1"><a class="header-anchor" href="#java-nio-file-spi"><span><code>java.nio.file.spi</code></span></a></h2><p>java.nio.file Service-provider 类。</p><h1 id="cache" tabindex="-1"><a class="header-anchor" href="#cache"><span>cache</span></a></h1><h2 id="path" tabindex="-1"><a class="header-anchor" href="#path"><span><code>Path</code></span></a></h2><h2 id="paths" tabindex="-1"><a class="header-anchor" href="#paths"><span><code>Paths</code></span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 相对路径</span></span>
<span class="line"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;x1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 绝对路径</span></span>
<span class="line"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/home/user/x1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 目录拼接，代表 /home/user/x1.txt</span></span>
<span class="line"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/home/user“, &quot;</span>x1<span class="token punctuation">.</span>txt&quot;<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="核心类和接口" tabindex="-1"><a class="header-anchor" href="#核心类和接口"><span>核心类和接口</span></a></h2><ul><li><p><code>Buffer</code>：所有缓冲区的超类，提供了一系列用于数据存取的方法。</p><ul><li><code>ByteBuffer</code></li><li><code>CharBuffer</code></li><li><code>ShortBuffer</code></li><li><code>IntBuffer</code></li><li><code>LongBuffer</code></li><li><code>FloatBuffer</code></li><li><code>DoubleBuffer</code></li><li><code>MappedByteBuffer</code></li></ul></li><li><p><code>Channel</code>：用于I/O操作的数据传输通道，类似于流。</p><ul><li><code>FileChannel</code>：用于文件的数据读写。</li><li><code>SocketChannel</code>：用于TCP网络的数据读写。</li><li><code>ServerSocketChannel</code>：用于监听TCP连接请求。</li><li><code>DatagramChannel</code>：用于UDP网络的数据读写。</li></ul></li><li><p><code>Selector</code>：用于检查一个或多个NIO通道的状态是否准备好进行数据读写。</p></li><li><p><code>SelectionKey</code>：表示SelectableChannel在Selector中注册的标记，包含了通道操作的状态和兴趣集合。</p></li></ul><h2 id="文件系统类和接口" tabindex="-1"><a class="header-anchor" href="#文件系统类和接口"><span>文件系统类和接口</span></a></h2><ul><li><code>Path</code>：表示文件系统中的路径。</li><li><code>Paths</code>：用于获取Path实例的工厂类。</li><li><code>Files</code>：提供文件操作的方法，如读写、创建、删除等。</li><li><code>FileVisitor</code>：用于文件遍历的访问者接口。</li><li><code>FileSystem</code>：表示文件系统。</li><li><code>FileStore</code>：提供文件存储区域的信息。</li><li><code>WatchService</code>：用于监控文件系统事件。</li></ul><h2 id="网络类" tabindex="-1"><a class="header-anchor" href="#网络类"><span>网络类</span></a></h2><ul><li><code>Socket</code>：表示网络套接字。</li><li><code>ServerSocket</code>：用于监听客户端的套接字连接。</li><li><code>DatagramSocket</code>：用于发送和接收UDP数据报包。</li></ul><h2 id="属性类" tabindex="-1"><a class="header-anchor" href="#属性类"><span>属性类</span></a></h2><ul><li><code>FileAttribute</code>：用于配置文件系统的文件属性。</li><li><code>PosixFilePermission</code>：用于POSIX文件权限。</li></ul><h2 id="其他类和接口" tabindex="-1"><a class="header-anchor" href="#其他类和接口"><span>其他类和接口</span></a></h2><ul><li><code>charset</code>：用于字符集编码和解码。</li><li><code>StandardCharsets</code>：提供标准字符集的常量。</li><li><code>FileSystemProvider</code>：文件系统提供者的抽象类。</li><li><code>AsynchronousFileChannel</code>：用于异步文件读写操作的文件通道。</li><li><code>AsynchronousSocketChannel</code>：用于异步TCP套接字连接的数据读写。</li><li><code>AsynchronousServerSocketChannel</code>：用于异步监听TCP连接请求。</li><li><code>AsynchronousChannelGroup</code>：用于异步通道的分组管理。</li></ul>`,60)]))}const r=a(i,[["render",l]]),d=JSON.parse('{"path":"/software/Language-Java-JavaSE-API-%E3%80%8Cjava.nio%E3%80%8D.html","title":"Language - Java - Java SE - API - 「java.nio」","lang":"zh-CN","frontmatter":{"title":"Language - Java - Java SE - API - 「java.nio」","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2024-11-24T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： 为输入输出提供缓冲区的类。 介绍 简要说明 提供用于高性能I/O操作的API。 包含了一套新的抽象，如缓冲区（Buffers）、通道（Channels）和选择器（Selectors），这些抽象支持非阻塞I/O操作，是Java New I/O API的核心。 主要功能 缓冲区（Buffers）：提供了一组用于存储不同数据类型的容器，如Byte...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Java - Java SE - API - 「java.nio」\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Java-JavaSE-API-%E3%80%8Cjava.nio%E3%80%8D.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Java - Java SE - API - 「java.nio」"}],["meta",{"property":"og:description","content":"文章摘要： 为输入输出提供缓冲区的类。 介绍 简要说明 提供用于高性能I/O操作的API。 包含了一套新的抽象，如缓冲区（Buffers）、通道（Channels）和选择器（Selectors），这些抽象支持非阻塞I/O操作，是Java New I/O API的核心。 主要功能 缓冲区（Buffers）：提供了一组用于存储不同数据类型的容器，如Byte..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-11-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Java-JavaSE-API-「java.nio」.md","excerpt":"<p><strong>文章摘要：</strong> 为输入输出提供缓冲区的类。</p>\\n"}');export{r as comp,d as data};
