import{_ as n,c as s,a as e,o as t}from"./app-D67BBu3k.js";const p={};function c(o,a){return t(),s("div",null,a[0]||(a[0]=[e(`<p><strong>文章摘要：</strong> 提供了用于加密和解密的类和接口。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>简要说明</p><ul><li>提供了用于加密和解密的类和接口。</li><li>支持多种加密标准，包括对称加密（如 AES、DES）、非对称加密（如 RSA）、消息摘要（如 MD5、SHA）以及密钥生成和管理等功能。</li></ul><p>主要功能</p><ul><li><strong>对称加密</strong>：支持常用的对称加密算法，如 AES、DES、DESede（Triple DES）等。</li><li><strong>非对称加密</strong>：支持非对称加密算法，如 RSA。</li><li><strong>密钥生成</strong>：提供密钥生成器（KeyGenerator）和密钥对生成器（KeyPairGenerator）用于生成密钥。</li><li><strong>密钥协商</strong>：支持密钥协商协议，如 Diffie-Hellman。</li><li><strong>密钥管理</strong>：提供密钥库（KeyStore）和密钥规范（KeySpec）等类来管理密钥。</li><li><strong>加密模式</strong>：支持不同的加密模式，如 ECB、CBC、CFB、OFB 等。</li><li><strong>填充模式</strong>：支持不同的填充模式，如 NoPadding、PKCS5Padding 等。</li><li><strong>消息摘要</strong>：虽然消息摘要主要在 <code>java.security.MessageDigest</code> 中，但 <code>javax.crypto</code> 也支持与加密相关的摘要操作。</li></ul><p>注意事项</p><ul><li><strong>安全性</strong>：加密算法和实现的选择对安全性至关重要。应避免使用不再安全的算法（如 MD5、SHA-1）。</li><li><strong>密钥管理</strong>：密钥的安全管理是加密过程中的关键部分，需要妥善处理密钥的生成、存储、传输和销毁。</li><li><strong>性能</strong>：加密操作可能非常耗时，尤其是在处理大量数据时，应考虑性能影响。</li><li><strong>兼容性</strong>：不同的 Java 版本和不同的 JCA（Java Cryptography Architecture）提供者可能支持不同的加密算法和功能。</li></ul><p>适用场景</p><ul><li><strong>数据加密</strong>：在需要保护数据隐私的场景中，如网络通信、数据存储等。</li><li><strong>安全认证</strong>：在需要验证数据完整性和来源的场景中，可以使用加密算法生成摘要或签名。</li><li><strong>密钥交换</strong>：在需要安全交换密钥的场景中，如 SSL/TLS 协议中。</li><li><strong>安全协议实现</strong>：在实现基于加密的安全协议时，如 HTTPS、VPN 等。</li></ul><h3 id="主要类和接口" tabindex="-1"><a class="header-anchor" href="#主要类和接口"><span>主要类和接口</span></a></h3><h4 id="_2-1-cipher类" tabindex="-1"><a class="header-anchor" href="#_2-1-cipher类"><span>2.1 Cipher类</span></a></h4><ul><li>用于加密和解密数据。</li><li>支持多种加密模式，如 ECB、CBC、CFB、OFB 等。</li><li>支持多种填充模式，如 NoPadding、PKCS5Padding 等。</li></ul><h4 id="_2-2-keygenerator类" tabindex="-1"><a class="header-anchor" href="#_2-2-keygenerator类"><span>2.2 KeyGenerator类</span></a></h4><ul><li>用于生成对称密钥。</li></ul><h4 id="_2-3-keyagreement类" tabindex="-1"><a class="header-anchor" href="#_2-3-keyagreement类"><span>2.3 KeyAgreement类</span></a></h4><ul><li>用于密钥协商，如 Diffie-Hellman 密钥交换。</li></ul><h4 id="_2-4-secretkey类" tabindex="-1"><a class="header-anchor" href="#_2-4-secretkey类"><span>2.4 SecretKey类</span></a></h4><ul><li>表示对称密钥。</li></ul><h4 id="_2-5-keypair类" tabindex="-1"><a class="header-anchor" href="#_2-5-keypair类"><span>2.5 KeyPair类</span></a></h4><ul><li>用于非对称加密的公钥和私钥对。</li></ul><h4 id="_2-6-keypairgenerator类" tabindex="-1"><a class="header-anchor" href="#_2-6-keypairgenerator类"><span>2.6 KeyPairGenerator类</span></a></h4><ul><li>用于生成非对称密钥对。</li></ul><h4 id="_2-7-mac类" tabindex="-1"><a class="header-anchor" href="#_2-7-mac类"><span>2.7 Mac类</span></a></h4><ul><li>提供消息认证码（MAC）功能。</li></ul><h4 id="_2-8-sealedobject类" tabindex="-1"><a class="header-anchor" href="#_2-8-sealedobject类"><span>2.8 SealedObject类</span></a></h4><ul><li>用于封装加密的对象，以便安全传输。</li></ul><h4 id="_2-9-cipherinputstream和cipheroutputstream类" tabindex="-1"><a class="header-anchor" href="#_2-9-cipherinputstream和cipheroutputstream类"><span>2.9 CipherInputStream和CipherOutputStream类</span></a></h4><ul><li>用于加密和解密数据流。</li></ul><h3 id="_3-使用场景" tabindex="-1"><a class="header-anchor" href="#_3-使用场景"><span>3. 使用场景</span></a></h3><ul><li>加密敏感数据，如用户密码、信用卡信息等。</li><li>实现安全的通信通道，如 SSL/TLS。</li><li>生成和验证数字签名。</li><li>实现基于密钥的安全认证。</li></ul><h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">Cipher</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">KeyGenerator</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">SecretKey</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">SecretKeySpec</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CryptoExample</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 生成 AES 密钥</span></span>
<span class="line">        <span class="token class-name">KeyGenerator</span> keyGenerator <span class="token operator">=</span> <span class="token class-name">KeyGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        keyGenerator<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">SecretKey</span> secretKey <span class="token operator">=</span> keyGenerator<span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 转换为字节数组</span></span>
<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes <span class="token operator">=</span> secretKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">SecretKeySpec</span> secretKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 创建 Cipher 实例并初始化为加密模式</span></span>
<span class="line">        <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES/ECB/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> secretKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 加密数据</span></span>
<span class="line">        <span class="token class-name">String</span> originalText <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encryptedText <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>originalText<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 初始化 Cipher 为解密模式</span></span>
<span class="line">        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> secretKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 解密数据</span></span>
<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decryptedText <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>encryptedText<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Decrypted Text: &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decryptedText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="javax-crypto-interfaces" tabindex="-1"><a class="header-anchor" href="#javax-crypto-interfaces"><span><code>javax.crypto.interfaces</code></span></a></h2><p>为 RSA Laboratories 的 PKCS #3 中定义的 Diffie-Hellman 密钥提供接口。</p><h2 id="javax-crypto-spec" tabindex="-1"><a class="header-anchor" href="#javax-crypto-spec"><span><code>javax.crypto.spec</code></span></a></h2><p>提供关键规范和算法参数规范的类和接口。</p>`,37)]))}const i=n(p,[["render",c]]),r=JSON.parse('{"path":"/software/Language-Java-JavaSE-API-%E3%80%8Cjavax.crypto%E3%80%8D.html","title":"Language - Java - Java SE - API - 「javax.crypto」","lang":"zh-CN","frontmatter":{"title":"Language - Java - Java SE - API - 「javax.crypto」","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2024-12-24T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： 提供了用于加密和解密的类和接口。 介绍 简要说明 提供了用于加密和解密的类和接口。 支持多种加密标准，包括对称加密（如 AES、DES）、非对称加密（如 RSA）、消息摘要（如 MD5、SHA）以及密钥生成和管理等功能。 主要功能 对称加密：支持常用的对称加密算法，如 AES、DES、DESede（Triple DES）等。 非对称加密：支...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Java - Java SE - API - 「javax.crypto」\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Java-JavaSE-API-%E3%80%8Cjavax.crypto%E3%80%8D.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Java - Java SE - API - 「javax.crypto」"}],["meta",{"property":"og:description","content":"文章摘要： 提供了用于加密和解密的类和接口。 介绍 简要说明 提供了用于加密和解密的类和接口。 支持多种加密标准，包括对称加密（如 AES、DES）、非对称加密（如 RSA）、消息摘要（如 MD5、SHA）以及密钥生成和管理等功能。 主要功能 对称加密：支持常用的对称加密算法，如 AES、DES、DESede（Triple DES）等。 非对称加密：支..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-12-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Java-JavaSE-API-「javax.crypto」.md","excerpt":"<p><strong>文章摘要：</strong> 提供了用于加密和解密的类和接口。</p>\\n"}');export{i as comp,r as data};
