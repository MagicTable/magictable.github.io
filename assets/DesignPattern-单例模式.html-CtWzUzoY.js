import{_ as s,c as a,a as e,o as t}from"./app-D67BBu3k.js";const l={};function p(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<p><strong>文章摘要：</strong> 单例模式使用总结。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>单例模式（Singleton Pattern）是一种创建型设计模式。</li><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的实例。</li><li>单例类必须给所有其他对象提供仅这唯一实例。</li></ul><p>主要功能</p><ul><li>控制实例的数量，确保全局只有一个实例。</li><li>提供全局访问点。</li></ul><p>注意事项</p><ul><li><strong>线程安全</strong>：确保单例模式在多线程环境中正确实现，避免多个线程同时创建单例类的多个实例。</li><li><strong>延迟加载</strong>：如果单例类在初始化时需要消耗大量资源，应考虑使用延迟加载（懒汉模式），以避免不必要的资源消耗。</li><li><strong>序列化问题</strong>：如果单例类需要被序列化，需要确保反序列化时不会创建新的实例。</li><li><strong>防止反射攻击</strong>：反射可以破坏单例模式，需要采取措施防止通过反射创建多个实例。</li><li><strong>避免全局状态</strong>：单例模式可能导致全局状态，这在某些情况下可能导致代码难以测试和维护。</li><li><strong>资源释放</strong>：单例类可能会长时间存在于系统中，需要确保适时释放其持有的资源，避免内存泄漏。</li><li><strong>依赖注入</strong>：尽量使用依赖注入而非单例模式来提供实例，这样可以提高代码的灵活性和可测试性。</li><li><strong>单例的范围</strong>：确定单例的范围，是进程级别的还是类加载器级别的，根据需求合理选择。</li></ul><p>适用场景</p><ul><li><strong>资源共享</strong>：当系统中需要一个类来控制对某种资源的访问，确保资源不被重复创建，如数据库连接池、线程池、文件系统操作等。</li><li><strong>全局配置</strong>：需要全局访问的配置对象，例如系统的配置信息。</li><li><strong>全局控制</strong>：某些需要全局统一管理或调度的类，如日志管理器、全局唯一序列号生成器。</li><li><strong>唯一序列号生成器</strong>：生成唯一序列号，确保系统内不会产生重复的序列号。</li><li><strong>同步访问</strong>：需要同步访问的资源或服务，确保操作的原子性。</li></ul><h2 id="java-8" tabindex="-1"><a class="header-anchor" href="#java-8"><span>Java 8</span></a></h2><p>案例 - 懒汉式的单例模式</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token comment">// 私有、静态的变量  </span></span>
<span class="line">    <span class="token comment">// 存储该类的实例化对象  </span></span>
<span class="line">    <span class="token comment">// 确保外部获取到的是唯一的  </span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Test</span> test<span class="token punctuation">;</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token comment">// 构造方法 - 私有  </span></span>
<span class="line">    <span class="token comment">// 不允许外部通过构造方法创建该类的对象  </span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token comment">// 对外提供获取该类对象的方法  </span></span>
<span class="line">    <span class="token comment">// 静态、线程安全  </span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Test</span> <span class="token function">getTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token comment">// 判断该类创建的对象是否存在  </span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>test <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token comment">// 创建对象，并赋值给成员变量中  </span></span>
<span class="line">            test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        <span class="token keyword">return</span> test<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>案例 - 饿汉式的单例模式</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token comment">// 私有、静态的变量  </span></span>
<span class="line">    <span class="token comment">// 存储该类的实例化对象  </span></span>
<span class="line">    <span class="token comment">// 确保外部获取到的是唯一的  </span></span>
<span class="line">    <span class="token comment">// 此处直接初始化，创建该类的实例对象  </span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token comment">// 构造方法 - 私有  </span></span>
<span class="line">    <span class="token comment">// 不允许外部通过构造方法创建该类的对象  </span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token comment">// 对外提供获取该类对象的方法  </span></span>
<span class="line">    <span class="token comment">// 静态、没有线程安全  </span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Test</span> <span class="token function">getTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token comment">// 不需要再判断是否已经实例化，因为从一开始已经完成创建  </span></span>
<span class="line">        <span class="token keyword">return</span> test<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)]))}const o=s(l,[["render",p]]),r=JSON.parse('{"path":"/software/DesignPattern-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html","title":"DesignPattern - 单例模式","lang":"zh-CN","frontmatter":{"title":"DesignPattern - 单例模式","author":"魔术桌","cover":"","category":["软件程序/设计模式"],"date":"2024-06-17T00:00:00.000Z","tag":["进度-已完成","知识总结"],"description":"文章摘要： 单例模式使用总结。 简介 简要说明 单例模式（Singleton Pattern）是一种创建型设计模式。 单例类只能有一个实例。 单例类必须自己创建自己的实例。 单例类必须给所有其他对象提供仅这唯一实例。 主要功能 控制实例的数量，确保全局只有一个实例。 提供全局访问点。 注意事项 线程安全：确保单例模式在多线程环境中正确实现，避免多个线程...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DesignPattern - 单例模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-02T13:54:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/DesignPattern-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"DesignPattern - 单例模式"}],["meta",{"property":"og:description","content":"文章摘要： 单例模式使用总结。 简介 简要说明 单例模式（Singleton Pattern）是一种创建型设计模式。 单例类只能有一个实例。 单例类必须自己创建自己的实例。 单例类必须给所有其他对象提供仅这唯一实例。 主要功能 控制实例的数量，确保全局只有一个实例。 提供全局访问点。 注意事项 线程安全：确保单例模式在多线程环境中正确实现，避免多个线程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-02T13:54:50.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-已完成"}],["meta",{"property":"article:published_time","content":"2024-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-02T13:54:50.000Z"}]]},"git":{"updatedTime":1759413290000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":1}],"changelog":[{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/DesignPattern-单例模式.md","excerpt":"<p><strong>文章摘要：</strong> 单例模式使用总结。</p>\\n"}');export{o as comp,r as data};
