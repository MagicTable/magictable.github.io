import{_ as e,c as g,a as l,b as i,d as r,e as s,w as o,r as a,o as E}from"./app-D67BBu3k.js";const u={};function d(p,t){const n=a("RouteLink");return E(),g("div",null,[t[38]||(t[38]=l('<p><strong>文章摘要：</strong> 软件架构相关知识总结和内部文章汇总。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>简要说明</p><ul><li>软件架构是指软件系统的结构，包括其组件、它们之间的关系以及与环境的关系。</li><li>软件架构为系统的设计、实现、部署和维护提供了一个蓝图。</li></ul><div class="hint-container note"><p class="hint-container-title">注释</p><p>一个复杂的项目通常会采用多种架构模式和设计原则，而不是单一的结构。</p></div><p>主要功能</p><ul><li><strong>组件划分</strong>：将系统分解为多个组件，每个组件负责实现特定的功能。</li><li><strong>接口定义</strong>：明确组件之间的交互接口，确保组件间的有效通信。</li><li><strong>数据管理</strong>：设计数据存储、访问和传输的方式，保证数据的完整性和安全性。</li><li><strong>系统整合</strong>：将不同的组件和子系统整合为一个协同工作的整体。</li><li><strong>性能优化</strong>：确保系统在各种负载下都能保持良好的性能。</li><li><strong>可伸缩性</strong>：设计能够随着用户数量和数据量增长而扩展的系统。</li><li><strong>安全性</strong>：构建系统的安全机制，防止非法访问和数据泄露。</li></ul><p>注意事项</p><ul><li><strong>需求理解</strong>：必须充分理解业务需求，以确保架构设计满足实际需求。</li><li><strong>技术选型</strong>：根据项目需求和团队能力，选择合适的技术栈和工具。</li><li><strong>灵活性与可维护性</strong>：架构设计应考虑未来的变更，易于维护和升级。</li><li><strong>标准化</strong>：遵循行业标准和最佳实践，以提高系统的可靠性和互操作性。</li><li><strong>风险评估</strong>：识别潜在的技术和业务风险，并制定相应的应对策略。</li></ul><p>适用场景</p><ul><li><strong>大型软件系统</strong>：需要复杂的组件和子系统协同工作的系统。</li><li><strong>企业级应用</strong>：需要处理大量数据和用户请求的应用。</li><li><strong>分布式系统</strong>：跨多个服务器和网络环境部署的系统。</li><li><strong>互联网服务</strong>：面向大量用户的在线服务，如电子商务、社交媒体等。</li><li><strong>移动应用</strong>：需要后端服务和数据库支持的移动应用程序。</li><li><strong>嵌入式系统</strong>：资源受限，对性能和可靠性有严格要求的系统。</li></ul><h2 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识"><span>基础知识</span></a></h2><h2 id="客户端-服务器架构-c-s" tabindex="-1"><a class="header-anchor" href="#客户端-服务器架构-c-s"><span>客户端-服务器架构（C/S）</span></a></h2><ul><li><strong>英文</strong>：Server/Client（C/S）Architecture</li><li><strong>简要说明</strong>：C/S架构因其结构简单、易于管理和扩展，被广泛应用于各种网络应用和服务中。</li><li><strong>主要特点</strong>：客户端发送请求，服务器响应请求。</li><li><strong>注意事项</strong>：不适用于需要高度分布式处理或对网络依赖较低的环境中。</li><li><strong>适用场景</strong>：需要稳定服务器和多个客户端的场景。</li></ul>',14)),i("p",null,[t[1]||(t[1]=r("详细总结：")),s(n,{to:"/software/Architecture-%E5%AE%A2%E6%88%B7%E7%AB%AF&%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[0]||(t[0]=[r("客户端&服务器架构")])),_:1,__:[0]})]),t[39]||(t[39]=l('<h2 id="浏览器-服务器架构-b-s" tabindex="-1"><a class="header-anchor" href="#浏览器-服务器架构-b-s"><span>浏览器-服务器架构（B/S）</span></a></h2><ul><li><strong>英文</strong>：Browser/Server（B/S）Architecture</li><li><strong>简要说明</strong>：B/S架构因其易于访问、维护和管理，以及良好的跨平台特性，在现代Web应用中得到了广泛的应用。</li><li>不适合需要高性能图形用户界面或离线工作的场景。</li><li><strong>主要特点</strong>：通过Web浏览器访问服务器端应用程序。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：Web应用和服务。</li></ul>',2)),i("p",null,[t[3]||(t[3]=r("详细总结：")),s(n,{to:"/software/Architecture-%E6%B5%8F%E8%A7%88%E5%99%A8&%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[2]||(t[2]=[r("浏览器&服务器架构")])),_:1,__:[2]})]),t[40]||(t[40]=l('<h2 id="事件驱动架构-eda" tabindex="-1"><a class="header-anchor" href="#事件驱动架构-eda"><span>事件驱动架构（EDA）</span></a></h2><ul><li><strong>英文</strong>：Event Driven Architecture（EDA）</li><li><strong>简要说明</strong>：事件驱动架构特别适用于那些需要高度响应性和灵活性的系统，以及在组件之间需要松耦合的应用场景。</li><li><strong>主要特点</strong>：组件之间通过事件进行通信。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：需要高度响应性和组件松耦合的场景。</li></ul>',2)),i("p",null,[t[5]||(t[5]=r("详细总结：")),s(n,{to:"/software/Architecture-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[4]||(t[4]=[r("事件驱动架构")])),_:1,__:[4]})]),t[41]||(t[41]=l('<h2 id="面向服务架构-soa" tabindex="-1"><a class="header-anchor" href="#面向服务架构-soa"><span>面向服务架构（SOA）</span></a></h2><ul><li><strong>英文</strong>：Service-Oriented Architecture（SOA）</li><li>又称：服务导向架构</li><li><strong>简要说明</strong>：SOA 适用于那些需要高度灵活性和可扩展性的企业级应用，尤其是在需要整合现有系统、支持业务流程变化以及实现跨组织协作的情况下。强调的是服务的集成和互操作性，通常会有一个服务总线（Service Bus）来协调服务之间的通信。围绕其他应用提供的应用服务。提供上层服务。</li><li><strong>主要特点</strong>：服务作为基本构建块，通过服务总线进行集成。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：大型企业应用，需要系统整合和互操作性。</li></ul>',2)),i("p",null,[t[7]||(t[7]=r("详细总结：")),s(n,{to:"/software/Architecture-%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[6]||(t[6]=[r("面向服务架构")])),_:1,__:[6]})]),t[42]||(t[42]=l('<h2 id="单体架构" tabindex="-1"><a class="header-anchor" href="#单体架构"><span>单体架构</span></a></h2><ul><li><strong>英文</strong>：Monolithic Architecture</li><li><strong>简要说明</strong>：单体架构适合于简单、小规模的应用场景，但随着应用的增长和复杂性的增加，需要考虑向微服务架构或其他分布式架构迁移。</li><li><strong>主要特点</strong>：所有功能模块集中在一个单一的代码库中。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：小型、简单的应用。</li></ul>',2)),i("p",null,[t[9]||(t[9]=r("详细总结：")),s(n,{to:"/software/Architecture-%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[8]||(t[8]=[r("单体架构")])),_:1,__:[8]})]),t[43]||(t[43]=l('<h2 id="分层架构" tabindex="-1"><a class="header-anchor" href="#分层架构"><span>分层架构</span></a></h2><ul><li><strong>英文</strong>：Layered Architecture</li><li><strong>简要说明</strong>：分层软件架构因其结构清晰、易于理解和维护，被广泛应用于各种类型的软件项目中。</li><li><strong>主要特点</strong>：系统按照不同的职责划分为多个层次。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：大多数类型的项目，特别是那些需要清晰职责划分的项目。</li></ul>',2)),i("p",null,[t[11]||(t[11]=r("详细总结：")),s(n,{to:"/software/Architecture-%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[10]||(t[10]=[r("分层架构")])),_:1,__:[10]})]),t[44]||(t[44]=l('<h2 id="组件化架构" tabindex="-1"><a class="header-anchor" href="#组件化架构"><span>组件化架构</span></a></h2><ul><li><strong>英文</strong>：</li><li><strong>简要说明</strong>：应用程序由独立的、可替换的组件构成，提高系统的模块化和可维护性。</li><li><strong>主要特点</strong>：系统由独立的、可替换的组件构成。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：- 需要高度模块化和可维护性的系统。</li></ul>',2)),i("p",null,[t[13]||(t[13]=r("详细总结：")),s(n,{to:"/software/Architecture-%E7%BB%84%E4%BB%B6%E5%8C%96%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[12]||(t[12]=[r("组件化架构")])),_:1,__:[12]})]),t[45]||(t[45]=l('<h2 id="微内核架构" tabindex="-1"><a class="header-anchor" href="#微内核架构"><span>微内核架构</span></a></h2><ul><li><strong>英文</strong>：Microkernel Architecture</li><li><strong>简要说明</strong>：将系统的主要功能划分为一系列独立的、可替换的模块，这些模块通常称为插件。微内核架构关注于如何将系统核心功能与高级功能分离，以实现系统的灵活性和可扩展性。</li><li><strong>主要特点</strong>：核心功能简单，大部分功能通过插件实现。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：需要高度可扩展性和灵活性的系统。</li></ul>',2)),i("p",null,[t[15]||(t[15]=r("详细总结：")),s(n,{to:"/software/Architecture-%E5%BE%AE%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[14]||(t[14]=[r("微内核架构")])),_:1,__:[14]})]),t[46]||(t[46]=l('<h2 id="模型-视图-控制器-mvc" tabindex="-1"><a class="header-anchor" href="#模型-视图-控制器-mvc"><span>模型-视图-控制器（MVC）</span></a></h2><ul><li><strong>英文</strong>：Model-View-Controller（MVC）</li><li><strong>简要说明</strong>：MVC架构因其清晰的结构和良好的组织性，被广泛应用于各种类型的应用程序开发中。有助于提高代码的可读性、可维护性和可扩展性。</li><li><strong>主要特点</strong>：分离模型、视图和控制器，以实现业务逻辑和用户界面的分离。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：大多数需要用户界面的应用程序。</li></ul>',2)),i("p",null,[t[17]||(t[17]=r("详细总结：")),s(n,{to:"/software/Architecture-%E6%A8%A1%E5%9E%8B&%E8%A7%86%E5%9B%BE&%E6%8E%A7%E5%88%B6%E5%99%A8%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[16]||(t[16]=[r("模型&视图&控制器架构")])),_:1,__:[16]})]),t[47]||(t[47]=l('<h2 id="模型-视图-viewmodel-mvvm" tabindex="-1"><a class="header-anchor" href="#模型-视图-viewmodel-mvvm"><span>模型-视图-ViewModel（MVVM）</span></a></h2><ul><li><strong>英文</strong>：Model-View-ViewModel（MVVM）</li><li><strong>简要说明</strong>：MVVM 特别适合于那些需要将 UI 逻辑与业务逻辑分离，以及需要高可测试性的应用程序。使得前端开发者可以专注于 UI 设计，而后端开发者可以专注于业务逻辑和数据模型。</li><li><strong>主要特点</strong>：进一步抽象MVC，以支持更复杂的用户界面逻辑。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：具有复杂UI逻辑的应用程序。</li></ul>',2)),i("p",null,[t[19]||(t[19]=r("详细总结：")),s(n,{to:"/software/Architecture-%E6%A8%A1%E5%9E%8B&%E8%A7%86%E5%9B%BE&ViewModel%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[18]||(t[18]=[r("模型&视图&ViewModel架构")])),_:1,__:[18]})]),t[48]||(t[48]=l('<h2 id="cqrs架构" tabindex="-1"><a class="header-anchor" href="#cqrs架构"><span>CQRS架构</span></a></h2><ul><li><strong>英文</strong>：Command Query Responsibility Segregation（CQRS） Architecture</li><li><strong>简要说明</strong>：将命令（写操作）和查询（读操作）分离，提高系统的性能和可扩展性。</li><li><strong>主要特点</strong>：分离命令和查询操作，优化读写性能。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：读写操作差异较大的系统。</li></ul>',2)),i("p",null,[t[21]||(t[21]=r("详细总结：")),s(n,{to:"/software/Architecture-CQRS%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[20]||(t[20]=[r("CQRS架构")])),_:1,__:[20]})]),t[49]||(t[49]=l('<h2 id="事件溯源架构" tabindex="-1"><a class="header-anchor" href="#事件溯源架构"><span>事件溯源架构</span></a></h2><ul><li><strong>英文</strong>：</li><li><strong>简要说明</strong>：通过记录和存储系统中的所有域事件来构建应用程序的状态。系统状态的变化被记录为一系列事件，可以重放事件来重建系统状态。</li><li><strong>主要特点</strong>：通过记录事件来跟踪和重建系统状态。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：需要完整审计日志和可追溯性的系统。</li></ul>',2)),i("p",null,[t[23]||(t[23]=r("详细总结：")),s(n,{to:"/software/Architecture-%E4%BA%8B%E4%BB%B6%E6%BA%AF%E6%BA%90%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[22]||(t[22]=[r("事件溯源架构")])),_:1,__:[22]})]),t[50]||(t[50]=l('<h2 id="微服务架构" tabindex="-1"><a class="header-anchor" href="#微服务架构"><span>微服务架构</span></a></h2><ul><li><strong>英文</strong>：Microservices Architecture</li><li><strong>简要说明</strong>：将应用程序作为一套小服务的集合来构建，每个服务运行在自己的进程中，并且与轻量级机制通信。服务围绕业务功能组织，每个服务都可以独立部署和扩展。围绕开发者提供的功能服务。提供底层服务。</li><li><strong>主要特点</strong>：应用程序由多个独立部署和运行的小服务组成。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：大型、复杂的系统，需要快速迭代和部署。</li></ul>',2)),i("p",null,[t[25]||(t[25]=r("详细总结：")),s(n,{to:"/software/Architecture-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[24]||(t[24]=[r("微服务架构")])),_:1,__:[24]})]),t[51]||(t[51]=l('<h2 id="分布式架构" tabindex="-1"><a class="header-anchor" href="#分布式架构"><span>分布式架构</span></a></h2><ul><li><strong>英文</strong>：Distributed Architecture</li><li><strong>简要说明</strong>：将请求均匀分配到不同的服务器上，提高系统的可伸缩性和容错性。分布式架构关注于如何在多个网络节点间分配系统组件，以实现高可用性、可扩展性和容错性。</li><li><strong>主要特点</strong>：系统组件分布在多个服务器和网络节点上。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：需要高可用性、可伸缩性和负载均衡的系统。</li></ul>',2)),i("p",null,[t[27]||(t[27]=r("详细总结：")),s(n,{to:"/software/Architecture-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[26]||(t[26]=[r("分布式架构")])),_:1,__:[26]})]),t[52]||(t[52]=l('<h2 id="对等网络架构-p2p" tabindex="-1"><a class="header-anchor" href="#对等网络架构-p2p"><span>对等网络架构（P2P）</span></a></h2><ul><li><strong>英文</strong>：Peer-to-Peer Architecture（P2P）</li><li>又称为：点对点网络架构。</li><li><strong>简要说明</strong>：所有节点的地位平等，没有固定的服务器和客户端角色，每个节点既可以是服务的提供者，也可以是服务的消费者，节点之间直接进行通信和数据交换</li><li>网络中的节点既作为客户端又作为服务器，实现去中心化的通信和数据共享。</li><li><strong>主要特点</strong>：所有节点既是客户端又是服务器，实现去中心化。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：文件共享、分布式计算等场景。</li></ul>',2)),i("p",null,[t[29]||(t[29]=r("详细总结：")),s(n,{to:"/software/Architecture-%E5%AF%B9%E7%AD%89%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[28]||(t[28]=[r("对等网络架构")])),_:1,__:[28]})]),t[53]||(t[53]=l('<h2 id="无服务架构" tabindex="-1"><a class="header-anchor" href="#无服务架构"><span>无服务架构</span></a></h2><ul><li><strong>英文</strong>：Serverless Architecture</li><li><strong>简要说明</strong>：云提供商会自动管理基础设备，让开发者可以专注于编写和部署代码，而不必担心基础架构的运行和维护。</li><li><strong>主要特点</strong>：云服务提供商管理所有基础架构，开发者只需关注代码。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：不需要持续运行的服务，关注成本效益和快速开发。</li></ul>',2)),i("p",null,[t[31]||(t[31]=r("详细总结：")),s(n,{to:"/software/Architecture-%E6%97%A0%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[30]||(t[30]=[r("无服务架构")])),_:1,__:[30]})]),t[54]||(t[54]=l('<h2 id="管道-过滤器架构" tabindex="-1"><a class="header-anchor" href="#管道-过滤器架构"><span>管道-过滤器架构</span></a></h2><ul><li><strong>英文</strong>：Bucshmann &amp; Meunier</li><li><strong>简要说明</strong>：数据通过一系列处理步骤（过滤器）流动，每个步骤对数据进行处理。这种架构风格非常适合于数据处理和转换任务。</li><li><strong>主要特点</strong>：数据通过一系列处理步骤流动。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：数据处理和转换任务。</li></ul>',2)),i("p",null,[t[33]||(t[33]=r("详细总结：")),s(n,{to:"/software/Architecture-%E7%AE%A1%E9%81%93&%E8%BF%87%E6%BB%A4%E5%99%A8%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[32]||(t[32]=[r("管道&过滤器架构")])),_:1,__:[32]})]),t[55]||(t[55]=l('<h2 id="黑板架构" tabindex="-1"><a class="header-anchor" href="#黑板架构"><span>黑板架构</span></a></h2><ul><li><strong>英文</strong>：</li><li><strong>简要说明</strong>：黑板架构是一种用于解决问题和知识处理的软件架构风格，它模拟了人类专家解决问题时的推理过程。多个知识源（专家）通过共享数据结构（黑板）进行协作，适用于问题解决和决策支持系统。</li><li><strong>主要特点</strong>：多个知识源通过共享数据结构协作解决问题。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：问题解决和决策支持系统。</li></ul>',2)),i("p",null,[t[35]||(t[35]=r("详细总结：")),s(n,{to:"/software/Architecture-%E9%BB%91%E6%9D%BF%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[34]||(t[34]=[r("黑板架构")])),_:1,__:[34]})]),t[56]||(t[56]=l('<h2 id="清洁架构" tabindex="-1"><a class="header-anchor" href="#清洁架构"><span>清洁架构</span></a></h2><ul><li><strong>英文</strong>：Clean Architecture</li><li><strong>简要说明</strong>：强调软件的分层，其中核心业务逻辑与外部关注点（如UI、数据库）分离。</li><li><strong>主要特点</strong>：强调软件分层，核心业务逻辑与外部关注点分离。</li><li><strong>注意事项</strong>：</li><li><strong>适用场景</strong>：需要长期维护和高度模块化的系统。</li></ul>',2)),i("p",null,[t[37]||(t[37]=r("详细总结：")),s(n,{to:"/software/Architecture-%E6%B8%85%E6%B4%81%E6%9E%B6%E6%9E%84.html"},{default:o(()=>t[36]||(t[36]=[r("清洁架构")])),_:1,__:[36]})]),t[57]||(t[57]=l('<h2 id="主从模式架构" tabindex="-1"><a class="header-anchor" href="#主从模式架构"><span>主从模式架构</span></a></h2><h2 id="六边形" tabindex="-1"><a class="header-anchor" href="#六边形"><span>六边形</span></a></h2><h2 id="菱形架构" tabindex="-1"><a class="header-anchor" href="#菱形架构"><span>菱形架构</span></a></h2>',3))])}const A=e(u,[["render",d]]),m=JSON.parse('{"path":"/software/Architecture%EF%BC%88%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%89.html","title":"Architecture（软件架构）","lang":"zh-CN","frontmatter":{"title":"Architecture（软件架构）","author":"魔术桌","cover":"","category":["软件程序/软件架构"],"tag":["进度-进行中","知识总结"],"date":"2024-12-02T00:00:00.000Z","star":true,"description":"文章摘要： 软件架构相关知识总结和内部文章汇总。 简介 简要说明 软件架构是指软件系统的结构，包括其组件、它们之间的关系以及与环境的关系。 软件架构为系统的设计、实现、部署和维护提供了一个蓝图。 注释 一个复杂的项目通常会采用多种架构模式和设计原则，而不是单一的结构。 主要功能 组件划分：将系统分解为多个组件，每个组件负责实现特定的功能。 接口定义：明...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Architecture（软件架构）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-03T09:56:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Architecture%EF%BC%88%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Architecture（软件架构）"}],["meta",{"property":"og:description","content":"文章摘要： 软件架构相关知识总结和内部文章汇总。 简介 简要说明 软件架构是指软件系统的结构，包括其组件、它们之间的关系以及与环境的关系。 软件架构为系统的设计、实现、部署和维护提供了一个蓝图。 注释 一个复杂的项目通常会采用多种架构模式和设计原则，而不是单一的结构。 主要功能 组件划分：将系统分解为多个组件，每个组件负责实现特定的功能。 接口定义：明..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T09:56:57.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-进行中"}],["meta",{"property":"article:published_time","content":"2024-12-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-03T09:56:57.000Z"}]]},"git":{"updatedTime":1759485417000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Architecture（软件架构）.md","excerpt":"<p><strong>文章摘要：</strong> 软件架构相关知识总结和内部文章汇总。</p>\\n"}');export{A as comp,m as data};
