import{_ as n,c as l,a as s,b as d,d as e,e as o,w as i,r as c,o as r}from"./app-D67BBu3k.js";const p={};function g(u,t){const a=c("RouteLink");return r(),l("div",null,[t[2]||(t[2]=s(`<p><strong>文章摘要：</strong> 摘要内容。</p><div class="hint-container note"><p class="hint-container-title">注释</p><ul><li>属性 == 对象的成员变量</li><li>方法 == 对象的成员函数</li><li>对象的属性，其实可以“二次修改赋值”和“获取”。</li></ul></div><h2 id="输出方式" tabindex="-1"><a class="header-anchor" href="#输出方式"><span>输出方式</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">/*写入到警告框，并弹出警告框*/</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*写入到HTML文件中，在页面中显示*/</span></span>
<span class="line">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;要输出的内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*写入到浏览器的控制台上显示*/</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*打印获取到的DOM对象*/</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token string">&quot;DOM对象&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*写入 HTML 元素*/</span></span>
<span class="line">innerHTML<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换"><span>数据类型转换</span></a></h2><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>parseInt(&lt;数据&gt;)</code></td><td style="text-align:left;">转换为<code>number</code>数字类型</td></tr></tbody></table><p><strong>案例</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 转换为数字类型</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;12&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 结果：12</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;12A45&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 结果：12</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;A12&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 结果：NAN</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array数组" tabindex="-1"><a class="header-anchor" href="#array数组"><span>Array数组</span></a></h2><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;Array&gt;.length</code></td><td style="text-align:left;">获取数组的长度</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;Array&gt;.length</code></td><td style="text-align:left;">获取数组的长度</td></tr><tr><td style="text-align:left;"><code>&lt;Array&gt;.forEach()</code></td><td style="text-align:left;">遍历数组中<strong>有值的元素</strong>，并调用一次传入的函数</td></tr><tr><td style="text-align:left;"><code>&lt;Array&gt;.push(&lt;元素&gt;, &lt;元素&gt;...)</code></td><td style="text-align:left;">在数组末尾追加新元素，并返回新的长度</td></tr><tr><td style="text-align:left;"><code>&lt;Array&gt;.splice(&lt;元素下标&gt;, &lt;删除元素的个数&gt;)</code></td><td style="text-align:left;">删除元素</td></tr></tbody></table><h2 id="string字符串" tabindex="-1"><a class="header-anchor" href="#string字符串"><span>String字符串</span></a></h2><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;String&gt;.length</code></td><td style="text-align:left;">获取字符串的长度</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;String&gt;.length</code></td><td style="text-align:left;">获取字符串的长度</td></tr><tr><td style="text-align:left;"><code>&lt;String&gt;.charAt(&lt;下标&gt;)</code></td><td style="text-align:left;">返回在指定下标位置的字符</td></tr><tr><td style="text-align:left;"><code>&lt;String&gt;.indexOf(&lt;需要查找的字符串&gt;)</code></td><td style="text-align:left;">检索字符串，返回下标数字</td></tr><tr><td style="text-align:left;"><code>&lt;String&gt;.trim()</code></td><td style="text-align:left;">去除字符串两边的空格，返回新字符串</td></tr><tr><td style="text-align:left;"><code>&lt;String&gt;.substring(&lt;起始下标&gt;, &lt;结束下标&gt;)</code></td><td style="text-align:left;">提取字符串中两个指定的索引号之间的字符</td></tr></tbody></table><h2 id="json对象" tabindex="-1"><a class="header-anchor" href="#json对象"><span>JSON对象</span></a></h2><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>JSON.parse(&lt;json字符串&gt;)</code></td><td style="text-align:left;">将JSON字符串转换为JS对象</td></tr><tr><td style="text-align:left;"><code>JSON.string(&lt;js对象&gt;)</code></td><td style="text-align:left;">将JS对象转换为JSON字符串</td></tr></tbody></table><h2 id="window浏览器窗口对象" tabindex="-1"><a class="header-anchor" href="#window浏览器窗口对象"><span>Window浏览器窗口对象</span></a></h2><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>window.history</code></td><td style="text-align:left;">对<strong>History历史记录对象</strong>的只读引用</td></tr><tr><td style="text-align:left;"><code>window.location</code></td><td style="text-align:left;">用于窗口或框架的<strong>Location地址栏对象</strong></td></tr><tr><td style="text-align:left;"><code>window.location.href</code></td><td style="text-align:left;">返回完整的URL字符串，重新赋值URL并跳转到新页面</td></tr><tr><td style="text-align:left;"><code>window.navigator</code></td><td style="text-align:left;">对<strong>Navigator浏览器对象</strong>的只读引用</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:center;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>window.alert()</code></td><td style="text-align:center;"></td><td style="text-align:left;">显示带有一段消息和一个确认按钮的警告框</td></tr><tr><td style="text-align:left;"><code>window.confirm()</code></td><td style="text-align:center;"><code>boolean</code></td><td style="text-align:left;">显示带有一段消息以及确认按钮和取消按钮的对话框</td></tr><tr><td style="text-align:left;"><code>window.setInterval(&lt;匿名函数&gt;, &lt;毫秒数&gt;)</code></td><td style="text-align:center;"></td><td style="text-align:left;">计时器，按照指定的周期（毫秒）来调用函数或计算表达式</td></tr><tr><td style="text-align:left;"><code>window.setTimeout()</code></td><td style="text-align:center;"></td><td style="text-align:left;">延迟器，在指定的毫秒数后调用一次函数或计算表达式</td></tr></tbody></table><h2 id="dom文档对象模型" tabindex="-1"><a class="header-anchor" href="#dom文档对象模型"><span>DOM文档对象模型</span></a></h2><h3 id="获取" tabindex="-1"><a class="header-anchor" href="#获取"><span>获取</span></a></h3><p><code>var myvideo = document.querySelector(&#39;button&#39;);</code></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:center;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>document.getElementsByTagName(&quot;&lt;标签名称&gt;&quot;)</code></td><td style="text-align:center;">元素对象数组</td><td style="text-align:left;">根据“标签名”获取</td></tr><tr><td style="text-align:left;"><code>document.getElementById(&quot;&lt;id属性的值&gt;&quot;)</code></td><td style="text-align:center;">单个元素对象</td><td style="text-align:left;">根据“id标签的属性值”获取</td></tr><tr><td style="text-align:left;"><code>document.getElementsByClassName(&quot;&lt;class标签的值&gt;&quot;)</code></td><td style="text-align:center;">元素对象数组</td><td style="text-align:left;">根据“class标签的属性值”获取</td></tr><tr><td style="text-align:left;"><code>document.getElementsByName(&quot;&lt;标签的name值&gt;&quot;)</code></td><td style="text-align:center;">元素对象数组</td><td style="text-align:left;">根据“标签的name属性值”获取</td></tr></tbody></table><h3 id="修改" tabindex="-1"><a class="header-anchor" href="#修改"><span>修改</span></a></h3><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:center;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;元素对象&gt;.innerHTML</code></td><td style="text-align:center;"></td><td style="text-align:left;">重新赋值，修改标签的内容</td></tr></tbody></table><h2 id="事件监听" tabindex="-1"><a class="header-anchor" href="#事件监听"><span>事件监听</span></a></h2><ul><li>事件监听可以理解为比较特殊的修改元素属性值的操作。</li></ul><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;元素对象&gt;.onclick</code></td><td style="text-align:center;">鼠标点击</td></tr><tr><td style="text-align:left;"><code>&lt;元素对象&gt;.onblur</code></td><td style="text-align:center;">元素失去焦点</td></tr><tr><td style="text-align:left;"><code>&lt;元素对象&gt;.onfocus</code></td><td style="text-align:center;">元素获得焦点</td></tr><tr><td style="text-align:left;"><code>&lt;元素对象&gt;.onload</code></td><td style="text-align:center;">某个页面或图像被完成加载</td></tr><tr><td style="text-align:left;"><code>&lt;元素对象&gt;.onsubmit</code></td><td style="text-align:center;">当表单提交时出发该事件</td></tr><tr><td style="text-align:left;"><code>&lt;元素对象&gt;.onkeydown</code></td><td style="text-align:center;">某个键盘的键被按下</td></tr><tr><td style="text-align:left;"><code>&lt;元素对象&gt;.onmouseover</code></td><td style="text-align:center;">鼠标被移到某个元素上</td></tr><tr><td style="text-align:left;"><code>&lt;元素对象&gt;.onmouseout</code></td><td style="text-align:center;">鼠标从某个元素上移开</td></tr></tbody></table><h2 id="存储数据在浏览器" tabindex="-1"><a class="header-anchor" href="#存储数据在浏览器"><span>存储数据在浏览器</span></a></h2><h3 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage"><span>localStorage</span></a></h3><ul><li>一种允许网站在用户浏览器中存储键值对的方法，数据在浏览器会话之间持久存在，即使关闭浏览器窗口也不会被清除。</li><li><code>localStorage</code>中的数据存储在客户端，并且是同步的，这意味着在读取或写入数据时会阻塞其他JavaScript代码的执行。</li></ul><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>localStorage.setItem(&#39;key&#39;, &#39;value&#39;)</code></td><td style="text-align:center;">存储数据</td></tr><tr><td style="text-align:left;"><code>&lt;变量&gt; = localStorage.getItem(&#39;key&#39;)</code></td><td style="text-align:center;">读取数据，根据<code>key</code>返回对应的值</td></tr><tr><td style="text-align:left;"><code>localStorage.removeItem(&#39;key&#39;)</code></td><td style="text-align:center;">删除数据</td></tr><tr><td style="text-align:left;"><code>localStorage.clear()</code></td><td style="text-align:center;">清空所有</td></tr></tbody></table><h3 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage"><span>sessionStorage</span></a></h3><ul><li>存储的数据只在会话期间存在，当用户关闭浏览器窗口或标签页时，数据会被清除。</li></ul><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>sessionStorage.setItem(&#39;key&#39;, &#39;value&#39;)</code></td><td style="text-align:center;">存储数据</td></tr><tr><td style="text-align:left;"><code>&lt;变量&gt; = sessionStorage.getItem(&#39;key&#39;)</code></td><td style="text-align:center;">读取数据</td></tr><tr><td style="text-align:left;"><code>sessionStorage.removeItem(&#39;key&#39;)</code></td><td style="text-align:center;">删除数据</td></tr><tr><td style="text-align:left;"><code>sessionStorage.clear()</code></td><td style="text-align:center;">清空所有</td></tr></tbody></table><h3 id="cookies-待完善" tabindex="-1"><a class="header-anchor" href="#cookies-待完善"><span>cookies（待完善）</span></a></h3><ul><li>在每次HTTP请求中都会被发送到服务器，因此它们可以用于维持用户的会话状态。</li><li><code>cookies</code>可以设置过期时间，也可以设置为在浏览器关闭时删除。</li></ul><p>==待完善==</p><ul><li>设置 cookie：<code>document.cookie = &#39;key=value; expires=Fri, 31 Dec 2023 23:59:59 GMT; path=/&#39;;</code></li><li>读取 cookie：<code>var cookieValue = document.cookie.split(&#39;; &#39;).find(row =&gt; row.startsWith(&#39;key=&#39;)).split(&#39;=&#39;)[1];</code></li><li>删除 cookie：<code>document.cookie = &#39;key=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/&#39;;</code></li></ul><p>==待完善==</p><h2 id="jquery" tabindex="-1"><a class="header-anchor" href="#jquery"><span>JQuery</span></a></h2>`,41)),d("p",null,[t[1]||(t[1]=e("详细总结：")),o(a,{to:"/software/Language-JavaScript-API-JQuery.html"},{default:i(()=>t[0]||(t[0]=[e("Language-JavaScript-API-JQuery")])),_:1,__:[0]})])])}const y=n(p,[["render",g]]),x=JSON.parse(`{"path":"/software/Language-JavaScript-API.html","title":"Language - JavaScript - API","lang":"zh-CN","frontmatter":{"title":"Language - JavaScript - API","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2024-05-23T00:00:00.000Z","tag":["进度-已停滞","查询手册"],"description":"文章摘要： 摘要内容。 注释 属性 == 对象的成员变量 方法 == 对象的成员函数 对象的属性，其实可以“二次修改赋值”和“获取”。 输出方式 数据类型转换 案例 Array数组 String字符串 JSON对象 Window浏览器窗口对象 DOM文档对象模型 获取 var myvideo = document.querySelector('butt...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - JavaScript - API\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-03T09:56:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-JavaScript-API.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - JavaScript - API"}],["meta",{"property":"og:description","content":"文章摘要： 摘要内容。 注释 属性 == 对象的成员变量 方法 == 对象的成员函数 对象的属性，其实可以“二次修改赋值”和“获取”。 输出方式 数据类型转换 案例 Array数组 String字符串 JSON对象 Window浏览器窗口对象 DOM文档对象模型 获取 var myvideo = document.querySelector('butt..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T09:56:57.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"查询手册"}],["meta",{"property":"article:tag","content":"进度-已停滞"}],["meta",{"property":"article:published_time","content":"2024-05-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-03T09:56:57.000Z"}]]},"git":{"updatedTime":1759485417000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-JavaScript-API.md","excerpt":"<p><strong>文章摘要：</strong> 摘要内容。</p>\\n"}`);export{y as comp,x as data};
