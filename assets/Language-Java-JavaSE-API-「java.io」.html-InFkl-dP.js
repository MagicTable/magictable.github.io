import{_ as s,c as a,a as t,o as e}from"./app-D67BBu3k.js";const p="/assets/Language-Java8-API-IO-%E6%A1%86%E6%9E%B6%E5%9B%BE-BpcTMYAr.png",l={};function c(i,n){return e(),a("div",null,n[0]||(n[0]=[t(`<p><strong>文章摘要：</strong> Java 平台提供的一组输入/输出（I/O）相关的 API。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>简要说明</p><ul><li>通过数据流、序列化和文件系统提供系统输入和输出。</li><li>Java 平台提供的一组输入/输出（I/O）相关的 API。</li><li>用于处理数据流、文件操作以及其他与 I/O 相关的任务。</li><li>提供了丰富的类和接口，以支持不同类型的 I/O 操作。</li></ul><p>主要功能</p><ul><li><strong>流操作</strong>：提供了字节流（InputStream 和 OutputStream）和字符流（Reader 和 Writer）来处理二进制和文本数据。</li><li><strong>文件操作</strong>：提供了 File 类来表示文件和目录路径信息，并可以进行创建、删除、重命名等操作。</li><li><strong>序列化与反序列化</strong>：支持对象的序列化（将对象状态保存到字节流）和反序列化（从字节流恢复对象状态）。</li><li><strong>缓冲区操作</strong>：提供了缓冲流（BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter）来提高 I/O 操作的效率。</li><li><strong>数据操作</strong>：提供了 DataInputStream 和 DataOutputStream 用于读写基本数据类型。</li><li><strong>对象流操作</strong>：提供了 ObjectInputStream 和 ObjectOutputStream 用于对象的序列化和反序列化。</li><li><strong>随机访问文件</strong>：提供了 RandomAccessFile 类用于随机访问文件内容。</li></ul><p>注意事项</p><ul><li><strong>资源管理</strong>：在使用 I/O 资源时，应该始终注意资源的关闭，以避免资源泄露。Java 7 引入了 try-with-resources 语句来简化资源管理。</li><li><strong>异常处理</strong>：I/O 操作可能抛出 IOException，因此需要妥善处理这些异常。</li><li><strong>性能考虑</strong>：使用缓冲流可以提高 I/O 操作的性能，特别是在处理大量数据时。</li><li><strong>字符编码</strong>：在处理文本数据时，需要特别注意字符编码问题，以避免乱码。</li></ul><p>适用场景</p><ul><li><strong>文件读写</strong>：当需要读取或写入文件时，<code>java.io</code> 提供了丰富的类和方法来支持这些操作。</li><li><strong>网络通信</strong>：在网络编程中，经常需要使用 <code>java.io</code> 来处理网络数据流。</li><li><strong>数据序列化</strong>：当需要将对象状态持久化或通过网络传输对象时，可以使用 <code>java.io</code> 的序列化机制。</li><li><strong>系统间数据交换</strong>：<code>java.io</code> 可以用于不同系统或组件之间的数据交换。</li><li><strong>基础数据处理</strong>：在处理基本数据类型和字符串时，<code>java.io</code> 提供了方便的 API。</li></ul><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><ul><li><strong>流（Stream）</strong>: 数据的流动，可以是输入流（读取数据）或输出流（写入数据）。</li><li><strong>字节流（Byte Stream）</strong>: 以字节为单位进行读写，适用于所有类型的文件数据。</li><li><strong>字符流（Character Stream）</strong>: 以字符为单位进行读写，适用于文本文件。</li><li><strong>过滤器流（Filter Stream）</strong>: 用于装饰其他流，提供额外的功能，如缓冲、数据压缩、加密等。</li></ul><h3 id="主要类和接口" tabindex="-1"><a class="header-anchor" href="#主要类和接口"><span>主要类和接口</span></a></h3><h4 id="输入流-inputstream-和-reader" tabindex="-1"><a class="header-anchor" href="#输入流-inputstream-和-reader"><span>输入流（InputStream 和 Reader）</span></a></h4><ul><li><strong>InputStream</strong>: 所有输入字节流的超类，提供读取字节的基本方法。</li><li><strong>Reader</strong>: 所有输入字符流的超类，提供读取字符的基本方法。</li><li><strong>FileInputStream</strong>: 用于从文件系统中的文件读取数据。</li><li><strong>FileReader</strong>: 用于从文件系统中的文件读取文本数据。</li><li><strong>BufferedInputStream</strong>: 用于包装另一个输入流，提供缓冲功能，提高读取效率。</li><li><strong>BufferedReader</strong>: 用于包装另一个输入流，提供缓冲功能，提高文本读取效率。</li></ul><h4 id="输出流-outputstream-和-writer" tabindex="-1"><a class="header-anchor" href="#输出流-outputstream-和-writer"><span>输出流（OutputStream 和 Writer）</span></a></h4><ul><li><strong>OutputStream</strong>: 所有输出字节流的超类，提供写入字节的基本方法。</li><li><strong>Writer</strong>: 所有输出字符流的超类，提供写入字符的基本方法。</li><li><strong>FileOutputStream</strong>: 用于向文件系统中的文件写入数据。</li><li><strong>FileWriter</strong>: 用于向文件系统中的文件写入文本数据。</li><li><strong>BufferedOutputStream</strong>: 用于包装另一个输出流，提供缓冲功能，提高写入效率。</li><li><strong>BufferedWriter</strong>: 用于包装另一个输出流，提供缓冲功能，提高文本写入效率。</li></ul><h4 id="其他重要类" tabindex="-1"><a class="header-anchor" href="#其他重要类"><span>其他重要类</span></a></h4><ul><li><strong>File</strong>: 提供文件和目录路径名的操作。</li><li><strong>RandomAccessFile</strong>: 支持随机访问文件的读写操作。</li><li><strong>ObjectInputStream/ObjectOutputStream</strong>: 用于对象的序列化和反序列化。</li><li><strong>InputStreamReader/OutputStreamWriter</strong>: 用于在字节流和字符流之间转换。</li></ul><h3 id="学习总结" tabindex="-1"><a class="header-anchor" href="#学习总结"><span>学习总结</span></a></h3><h4 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作"><span>文件操作</span></a></h4><ul><li><strong>文件读写</strong>: 学习如何使用 FileInputStream/FileOutputStream 和 FileReader/FileWriter 进行文件的基本读写操作。</li><li><strong>随机访问文件</strong>: 了解 RandomAccessFile 的使用，它可以跳转到文件的任意位置进行读写。</li></ul><h4 id="流操作" tabindex="-1"><a class="header-anchor" href="#流操作"><span>流操作</span></a></h4><ul><li><strong>流类型</strong>: 区分字节流和字符流，了解它们的使用场景。</li><li><strong>缓冲流</strong>: 学习使用 BufferedInputStream/BufferedReader 和 BufferedOutputStream/BufferedWriter 来提高 I/O 操作的效率。</li><li><strong>过滤器流</strong>: 掌握如何使用过滤器流（如 DataInputStream/DataOutputStream）来处理不同类型的数据。</li></ul><h4 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化"><span>序列化</span></a></h4><ul><li><strong>对象序列化</strong>: 学习如何使用 ObjectOutputStream 和 ObjectInputStream 来序列化和反序列化对象。</li></ul><h4 id="资源管理" tabindex="-1"><a class="header-anchor" href="#资源管理"><span>资源管理</span></a></h4><ul><li><strong>关闭流</strong>: 确保在不再需要时关闭流，释放系统资源，可以使用 try-with-resources 语句来自动关闭资源。</li><li><strong>异常处理</strong>: 学习如何处理 IOException 和其他相关异常。</li></ul><h4 id="实践建议" tabindex="-1"><a class="header-anchor" href="#实践建议"><span>实践建议</span></a></h4><ul><li><strong>使用缓冲</strong>: 总是使用缓冲流来包装原始流，以提高性能。</li><li><strong>异常处理</strong>: 在 I/O 操作中总是包含异常处理逻辑。</li><li><strong>资源管理</strong>: 使用 try-with-resources 语句来管理资源，避免资源泄露。</li><li><strong>文件路径</strong>: 注意操作系统之间的文件路径差异。</li><li><strong>编码问题</strong>: 在处理文本文件时，注意字符编码和解码的问题。</li></ul><h2 id="java-io-file" tabindex="-1"><a class="header-anchor" href="#java-io-file"><span><code>java.io.File</code></span></a></h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>File对象用于代表硬盘中的一个文件或文件夹。</li><li>File对象只能对文件本身进行操作，不能读写文件里面存储的数据进行操作。</li><li>File对象能接收一个不存在的文件或文件夹。</li><li>支持“绝对路径、相对路径”的文件路径。</li><li>类库路径：<code>java.io.File</code></li></ul></div><h3 id="实例化file对象" tabindex="-1"><a class="header-anchor" href="#实例化file对象"><span>实例化File对象</span></a></h3><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>new File(String &lt;文件路径&gt;)</code></td><td style="text-align:left;">根据文件路径创建文件对象</td></tr><tr><td style="text-align:left;"><code>new File(String &lt;父级路径&gt;, String &lt;子路径&gt;)</code></td><td style="text-align:left;">根据父级路径和子路径名称创建文件对象</td></tr><tr><td style="text-align:left;"><code>new File(File &lt;父级路径&gt;, String &lt;子路径&gt;)</code></td><td style="text-align:left;">根据父级路径对应文件对象和子路径名称</td></tr></tbody></table><h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建"><span>创建</span></a></h3><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;File&gt;.createNewFile()</code></td><td style="text-align:left;">创建文件，若创建成功则返回<code>true</code></td></tr><tr><td style="text-align:left;"><code>&lt;File&gt;.mkdir()</code></td><td style="text-align:left;">创建文件夹，只能创建一级文件夹，若创建成功则返回<code>true</code></td></tr><tr><td style="text-align:left;"><code>&lt;File&gt;.mkdirs()</code></td><td style="text-align:left;">创建文件夹，可以创建多层级文件夹，若创建成功则返回<code>true</code></td></tr></tbody></table><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;File&gt;.delete()</code></td><td style="text-align:left;">删除文件或空目录，若删除成功则返回<code>true</code></td></tr></tbody></table><h3 id="修改" tabindex="-1"><a class="header-anchor" href="#修改"><span>修改</span></a></h3><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;File&gt;.renameTo()</code></td><td style="text-align:left;">修改文件名称</td></tr></tbody></table><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h3><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;File&gt;.exists()</code></td><td style="text-align:left;">判断文件是否存在，若存在则返回<code>true</code></td></tr><tr><td style="text-align:left;"><code>&lt;File&gt;.isFile()</code></td><td style="text-align:left;">判断文件是否是文件，若是文件则返回<code>true</code></td></tr><tr><td style="text-align:left;"><code>&lt;File&gt;.isDirectory()</code></td><td style="text-align:left;">判断文件是否是文件夹，若是文件夹则返回<code>true</code></td></tr><tr><td style="text-align:left;"><code>&lt;File&gt;.getName()</code></td><td style="text-align:left;">获取文件的名称（包含后缀）</td></tr><tr><td style="text-align:left;"><code>&lt;File&gt;.length()</code></td><td style="text-align:left;">获取文件的大小，返回字节个数</td></tr><tr><td style="text-align:left;"><code>&lt;File&gt;.lastModified()</code></td><td style="text-align:left;">获取文件的最后修改时间</td></tr><tr><td style="text-align:left;"><code>&lt;File&gt;.getPath()</code></td><td style="text-align:left;">获取创建文件时使用的路径</td></tr><tr><td style="text-align:left;"><code>&lt;File&gt;.getAbsolutePath()</code></td><td style="text-align:left;">获取文件的绝对路径</td></tr><tr><td style="text-align:left;"><code>&lt;File&gt;.getParent()</code></td><td style="text-align:left;">获取文件所在的父级目录</td></tr><tr><td style="text-align:left;"><code>&lt;File&gt;.list()</code></td><td style="text-align:left;">获取当前目录下所有的“一级文件和文件夹的名称”，返回<code>String[]</code></td></tr><tr><td style="text-align:left;"><code>&lt;File&gt;.listFiles()</code></td><td style="text-align:left;">获取当前目录下所有的“一级文件和文件夹的对象”，返回<code>File[]</code></td></tr></tbody></table><blockquote><ul><li><code>&lt;File&gt;.canWrite()</code>：是否可写</li><li><code>&lt;File&gt;.isFile()</code>：是否隐藏</li></ul></blockquote><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h3><p>分析：</p><blockquote><ul><li>输入文件夹，作为查找范围</li><li>遍历全部一级文件对象，判断是否是文件</li><li>若是文件，判断是否是自己想要的文件</li><li>若是文件夹，则获取该文件夹下全部一级文件，重复上述过程</li></ul></blockquote><p>代码</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 创建存放查找结果的文件列表</span></span>
<span class="line">        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fileList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 调用方法</span></span>
<span class="line">        <span class="token comment">// - 传入查找目录范围（File对象）</span></span>
<span class="line">        <span class="token comment">// - 查找的目标文件名</span></span>
<span class="line">        <span class="token comment">// - 保存查找到的文件列表</span></span>
<span class="line">        <span class="token function">searchFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/magictable/Projec/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Main.java&quot;</span><span class="token punctuation">,</span> fileList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 判断文件列表中的最新数据是否为0</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;未找到目标文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 输出文件列表中存储的最新数据</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fileList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 格式化输出结果</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;结果&quot;</span><span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;：&quot;</span> <span class="token operator">+</span> fileList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 搜索指定目录范围下的目标文件</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">dir</span> 查找的目录范围（File文件）</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">fileName</span> 查找的目标文件名</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">fileList</span> 保存查找到的文件列表</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">searchFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">,</span> <span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fileList<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 判断输入的\`dir\`文件夹：</span></span>
<span class="line">        <span class="token comment">// - 是否不存在</span></span>
<span class="line">        <span class="token comment">// - 是否是一个文件</span></span>
<span class="line">        <span class="token comment">// - 是否是空目录</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> dir<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> dir <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取\`dir\`目录下的全部一级文件对象</span></span>
<span class="line">        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileArray <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 判断文件夹大小是否为“0字节”（用于判断是否拥有该文件夹的权限）</span></span>
<span class="line">        <span class="token comment">// 是否是空的“文件夹”</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileArray<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span>  <span class="token operator">&amp;&amp;</span> fileArray <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 获取该目录下的全部一级文件对象</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> fileArray<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 判断文件是否是文件</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// 判断文件是否是我们要找的</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 将当前文件对象的绝对路径保存到文件列表中</span></span>
<span class="line">                        fileList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token comment">// 当前文件是一个文件夹</span></span>
<span class="line">                    <span class="token comment">// 调用该方法进行重复查找过程，递归算法</span></span>
<span class="line">                    <span class="token function">searchFile</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> fileList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编码和解码" tabindex="-1"><a class="header-anchor" href="#编码和解码"><span>编码和解码</span></a></h2><blockquote><ul><li>需要写异常处理。</li><li>编码与解码使用的字符集必须一致，才不会出现乱码。</li></ul></blockquote><p>编码</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;String&gt;.getBytes()</code></td><td style="text-align:left;">使用平台的默认字符集将该String对象编码为一些列字节，返回<code>byte[]</code></td></tr><tr><td style="text-align:left;"><code>&lt;String&gt;.getBytes(String charsetName)</code></td><td style="text-align:left;">使用指定的字符集将该String对象编码为一些列字节，返回<code>byte[]</code></td></tr></tbody></table><p>解码</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>new String(byte[] bytes)</code></td><td style="text-align:left;">通过使用平台默认字符集解码指定的字节数组，返回新的<code>String</code></td></tr><tr><td style="text-align:left;"><code>new String(byte[] bytes, String charsetName)</code></td><td style="text-align:left;">通过指定的字符集解码指定的字节数组，返回新的<code>String</code></td></tr></tbody></table><h2 id="io流基础知识" tabindex="-1"><a class="header-anchor" href="#io流基础知识"><span>IO流基础知识</span></a></h2><blockquote><ul><li>I是Input，输入流，负责把数据读取到内存中。</li><li>O是Output，输出流，负责把数据写入到（硬盘/网络）中。</li><li>内存与存储设备之间传输数据的通道。</li><li>用于读写数据。</li></ul></blockquote><p><strong>框架图</strong><img src="`+p+`" alt="Java8-API-IO-框架图"></p><p><strong>IO流的分类</strong></p><blockquote><p><strong>按方向</strong></p><ul><li>输入流：将“存储设备/网络”中的内容读入到“内存/本地”中。</li><li>输出流：将“内存/本地”中的内容写入到“存储设备/网络”中。</li></ul><p><strong>按单位</strong></p><ul><li>字节流：以字节为单位，适合读写所有类型的文件。</li><li>字符流：以字符为单位，只适合读写文本类型的文件。</li></ul><p><strong>按功能</strong></p><ul><li>节点流：具有实际传输数据的读写功能，基础流（字节流、字符流）。</li><li>过滤流：在节点流的基础之上增强功能，高级流（缓存流、转换流、打印流、数据流、序列化流）。</li></ul></blockquote><h3 id="字节输入流" tabindex="-1"><a class="header-anchor" href="#字节输入流"><span>字节输入流</span></a></h3><blockquote><ul><li><p>以内存为基准，将磁盘上的数据以“字节”的形式“读取输入”到内存中。</p></li><li><p>使用完后需要关闭流。</p></li><li><p>包路径：<code>java.io.FileInputStream</code></p></li></ul></blockquote><p><strong>构造方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>new FileInputStream(File file)</code></td><td style="text-align:left;">将File文件对象作为参数进行传输</td></tr><tr><td style="text-align:left;"><code>new FileInputStream(String name)</code></td><td style="text-align:left;">将文件路径作为参数进行传输</td></tr><tr><td style="text-align:left;"><code>new FileInputStream(FileDescriptor fdObj)</code></td><td style="text-align:left;"></td></tr></tbody></table><p><strong>相关方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;FileInputStream&gt;.read()</code></td><td style="text-align:left;">从输入流中读取一个字节的数据，返回<code>int</code>，当没有数据时返回<code>-1</code></td></tr><tr><td style="text-align:left;"><code>&lt;FileInputStream&gt;.read(byte[] b)</code></td><td style="text-align:left;">从输入流中读取b个字节的长度，返回<code>int</code>，当没有数据时返回<code>-1</code></td></tr><tr><td style="text-align:left;"><code>&lt;FileInputStream&gt;.available()</code></td><td style="text-align:left;">将当前字节输入流对应的文件对象字节数据装到一个字节数组返回</td></tr></tbody></table><p><strong>案例</strong></p><blockquote><ul><li>设定固定大小的缓存区，进行多字节批量读取数据。</li><li>缺点：读取性能差，频繁与硬盘交互，无法解决乱码问题。</li></ul></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 实例化File对象，添加要操作的文件</span></span>
<span class="line">    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/abc.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 实例化字节输入流对象，传入需要读取的File文件对象</span></span>
<span class="line"> <span class="token class-name">FileInputStream</span> inputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// 类似缓存区，一批次能读取多少字节</span></span>
<span class="line"> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 记录当前批次读取了多少字节</span></span>
<span class="line"> <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 读取的内容是根据data读取多少字节，就输出到多少字节。</span></span>
<span class="line">        <span class="token comment">// 该步骤是正在“解码”操作，即将二进制文件转换为字符串数据</span></span>
<span class="line">        <span class="token class-name">String</span> fileData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>byteData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 在控制台输出显示</span></span>
<span class="line">        <span class="token class-name">String</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>fileData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"> <span class="token comment">// 释放输出流对象</span></span>
<span class="line"> inputFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件操作报错：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字节输出流" tabindex="-1"><a class="header-anchor" href="#字节输出流"><span>字节输出流</span></a></h3><blockquote><ul><li><p>以内存为基准，将内存上的数据以“字节”的形式“写入输出”到磁盘中。</p></li><li><p>使用完后需要关闭流。</p></li><li><p>包路径：<code>java.io.FileOutputStream</code></p></li></ul></blockquote><p><strong>构造方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>new FileOutputStream(File file)</code></td><td style="text-align:left;">（覆盖）创建字节输入流管道与源文件对象接通</td></tr><tr><td style="text-align:left;"><code>new FileOutputStream(String filepath)</code></td><td style="text-align:left;">（覆盖）创建字节输入流管道与源文件路径接通</td></tr><tr><td style="text-align:left;"><code>new FileOutputStream(File file, boolean append)</code></td><td style="text-align:left;">（追加）创建字节输入流管道与源文件对象接通,可追加数据</td></tr><tr><td style="text-align:left;"><code>new FileOutputStream(String filepath, boolean append)</code></td><td style="text-align:left;">（追加）创建字节输入流管道与源文件对象接通，可追加数据</td></tr></tbody></table><p><strong>相关方法</strong></p><blockquote><ul><li>提示：写入数据若文件不存在则自动创建。</li></ul></blockquote><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;FileOutputStream&gt;.write(int a)</code></td><td style="text-align:left;">写入一个字节到文件中</td></tr><tr><td style="text-align:left;"><code>&lt;FileOutputStream&gt;.write(byte[] buffer)</code></td><td style="text-align:left;">写入一个字节数组到文件中</td></tr><tr><td style="text-align:left;"><code>&lt;FileOutputStream&gt;.write(byte[] buffer, int pos, int len)</code></td><td style="text-align:left;">写入一个字节数组的一部分到文件中</td></tr><tr><td style="text-align:left;"><code>&lt;FileOutputStream&gt;.flush()</code></td><td style="text-align:left;">刷新，将缓冲区中的内容写入到文件中。</td></tr><tr><td style="text-align:left;"><code>&lt;FileOutputStream&gt;.close()</code></td><td style="text-align:left;">释放流，包含了刷新</td></tr></tbody></table><p><strong>案例</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 实例化File对象，添加要操作的文件</span></span>
<span class="line">    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/abc.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 实例化字节输出流对象，传入需要写入的File文件对象</span></span>
<span class="line"> <span class="token class-name">FileOutputStream</span> outputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// 需要写入文件的数据</span></span>
<span class="line">    <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">&quot;你好，世界。&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将数据进行“编码”操作，即将字符串数据转换为二进制文件</span></span>
<span class="line">    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将编码后的数据，通过字节输出流对象，写入到文件</span></span>
<span class="line">    outputFile<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 释放输出流对象</span></span>
<span class="line">    outputFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件复制失败：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符输入流" tabindex="-1"><a class="header-anchor" href="#字符输入流"><span>字符输入流</span></a></h3><blockquote><ul><li><p>以内存为基准，可以吧文件中的数据以“字符”的形式“读取输入”到内存中。</p></li><li><p>使用完后需要关闭流。</p></li><li><p>包路径：<code>java.io.FileReader</code></p></li></ul></blockquote><p><strong>构造方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>new FileReader(File file)</code></td><td style="text-align:left;">创建字符输入流管道与源文件接通</td></tr><tr><td style="text-align:left;"><code>new FileReader(String pathname)</code></td><td style="text-align:left;">创建字符输入流管道与源文件接通</td></tr></tbody></table><p><strong>相关方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;FileReader&gt;.read()</code></td><td style="text-align:left;">每次读取一个字符返回，若没有数据可读时返回<code>-1</code></td></tr><tr><td style="text-align:left;"><code>&lt;FileReader&gt;.read(char[] buffer)</code></td><td style="text-align:left;">每次用一个字符数组去读取数据，返回字符数组读取了多少字节，若没有数据可读时返回<code>-1</code></td></tr></tbody></table><p><strong>案例</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 实例化File对象，添加要操作的文件</span></span>
<span class="line"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/file.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token comment">// 实例化字符输入流，添加要读取的File对象</span></span>
<span class="line">        <span class="token class-name">FileReader</span> readerFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建临时存储空间，存储读取出的字符</span></span>
<span class="line">    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 记住当批次读取了多少字符</span></span>
<span class="line">    <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>readerFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>charArray<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 将字符列表“解码”成字符串</span></span>
<span class="line">        <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 将结果输出到控制台</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件复制失败：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符输出流" tabindex="-1"><a class="header-anchor" href="#字符输出流"><span>字符输出流</span></a></h3><blockquote><ul><li>以内存为基准，把内存中的数据以“字符”的形式“写入输出”到文件中。</li><li>使用完后需要关闭流。</li><li>包路径：<code>java.io.FileWriter</code></li></ul></blockquote><p><strong>构造方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>new FileWriter(File file)</code></td><td style="text-align:left;">（覆盖）创建字节输出流管道与源文件对象接通</td></tr><tr><td style="text-align:left;"><code>new FileWriter(String filepath)</code></td><td style="text-align:left;">（覆盖）创建字节输出流管道与源文件路径接通</td></tr><tr><td style="text-align:left;"><code>new FileWriter(File file, boolean append)</code></td><td style="text-align:left;">（追加）创建字节输出流管道与源文件对象接通，可追加数据</td></tr><tr><td style="text-align:left;"><code>new FileWriter(String filepath, boolean append)</code></td><td style="text-align:left;">（追加）创建字节输出流管道与源文件路径接通，可追加数据</td></tr></tbody></table><p><strong>相关方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;FileWriter&gt;.write(int a)</code></td><td style="text-align:left;">写入一个字符</td></tr><tr><td style="text-align:left;"><code>&lt;FileWriter&gt;.write(String str)</code></td><td style="text-align:left;">写入一个字符串</td></tr><tr><td style="text-align:left;"><code>&lt;FileWriter&gt;.write(String str, int off, int len)</code></td><td style="text-align:left;">写入一个字符串的一部分</td></tr><tr><td style="text-align:left;"><code>&lt;FileWriter&gt;.write(char[] cbuf)</code></td><td style="text-align:left;">写入一个字符数组</td></tr><tr><td style="text-align:left;"><code>&lt;FileWriter&gt;.write(char[] cbuf, int off, int len)</code></td><td style="text-align:left;">写入字符数组的一部分</td></tr><tr><td style="text-align:left;"><code>&lt;FileWriter&gt;.flush()</code></td><td style="text-align:left;">刷新，将缓冲区中的内容写入到文件中。</td></tr><tr><td style="text-align:left;"><code>&lt;FileWriter&gt;.close()</code></td><td style="text-align:left;">释放流，包含了刷新</td></tr></tbody></table><p><strong>案例</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 实例化File对象，添加要操作的文件</span></span>
<span class="line"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/file.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token comment">// 实例化字符输出流对象，传入需要写入的File文件对象</span></span>
<span class="line">        <span class="token class-name">FileWriter</span> fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 需要写入文件的数据</span></span>
<span class="line">    <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">&quot;你好，世界。&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将数据通过字符输出流对象，写入到File文件</span></span>
<span class="line">    fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件写入失败：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓冲流" tabindex="-1"><a class="header-anchor" href="#缓冲流"><span>缓冲流</span></a></h3><blockquote><ul><li>添加缓冲流，提高原始数据流读写数据的性能，减少与硬盘交互的次数。</li><li>缓冲流类似添加“字符数组”，分批次读取数据。</li></ul><p><strong>类别</strong></p><ul><li><code>BufferedInputStream</code>：缓冲字节输入流</li><li><code>BufferedOotputStream</code>：缓冲字节输出流</li><li><code>BufferedReader</code>：缓冲字符输入流</li><li><code>BufferedWriter</code>：缓冲字符输出流</li></ul><p><strong>提示</strong></p><ul><li>缓冲流需要传入输入流或输出流，因此需要先创建原始数据流。</li><li>缓冲流包装原始数据流。</li></ul></blockquote><p><strong>构造方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>new BufferedInputStream(InputStream is)</code></td><td style="text-align:left;">（缓冲字节输入流）默认<code>8192byte</code>缓冲区大小</td></tr><tr><td style="text-align:left;"><code>new BufferedInputStream(InputStream is, int size)</code></td><td style="text-align:left;">（缓冲字节输入流）指定缓冲区大小</td></tr><tr><td style="text-align:left;"><code>new BufferedOotputStream(OutputStream os)</code></td><td style="text-align:left;">（缓冲字节输出流）默认<code>8192byte</code>缓冲区大小</td></tr><tr><td style="text-align:left;"><code>new BufferedOotputStream(OutputStream os, int size)</code></td><td style="text-align:left;">（缓冲字节输出流）指定缓冲区大小</td></tr><tr><td style="text-align:left;"><code>new BufferedReader(Reader fr)</code></td><td style="text-align:left;">（缓冲字符输入流）默认<code>8192byte</code>缓冲区大小</td></tr><tr><td style="text-align:left;"><code>new BufferedReader(Reader fr, int sz)</code></td><td style="text-align:left;">（缓冲字符输入流）指定缓冲区大小</td></tr><tr><td style="text-align:left;"><code>new BufferedWriter(Writer fw)</code></td><td style="text-align:left;">（缓冲字符输出流）默认<code>8192byte</code>缓冲区大小</td></tr><tr><td style="text-align:left;"><code>new BufferedWriter(Writer fw, int sz)</code></td><td style="text-align:left;">（缓冲字符输出流）指定缓冲区大小</td></tr></tbody></table><p><strong>相关方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;BufferedReader&gt;.readLine()</code></td><td style="text-align:left;">缓冲字符输入流，读取一行数据，返回<code>String</code>，没有数据时返回<code>null</code></td></tr><tr><td style="text-align:left;"><code>&lt;BufferedWriter&gt;.newLine()</code></td><td style="text-align:left;">缓冲字符输出流，换行，没有返回值</td></tr></tbody></table><p><strong>案例 - 字节流操作</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>  <span class="token comment">// IO异常处理类</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>         <span class="token comment">// File文件对象</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>   <span class="token comment">// 文本字节输入流</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>  <span class="token comment">// 文本字节输出流</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedInputStream</span></span><span class="token punctuation">;</span>   <span class="token comment">// 文本字节缓冲输入流</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedOutputStream</span></span><span class="token punctuation">;</span>  <span class="token comment">// 文本字节缓冲输出流</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 实例化File对象，添加要读取的文件</span></span>
<span class="line">        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/file.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 实例化File对象，添加要复制写入的文件</span></span>
<span class="line">        <span class="token class-name">File</span> fileCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/fileCopy.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">(</span></span>
<span class="line">                <span class="token comment">// 实例化字节输入流对象，添加要读取的File对象</span></span>
<span class="line">                <span class="token class-name">FileInputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 实例化字节缓冲输入流对象，包装原始字节输入流，即添加缓冲区</span></span>
<span class="line">                <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// 实例化字节输出流对象，添加要写入的File对象</span></span>
<span class="line">                <span class="token class-name">FileOutputStream</span> of <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileCopy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 实例化字节缓冲输出流对象，包装原始字节输出流，即添加缓冲区</span></span>
<span class="line">                <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>of<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 创建临时存储空间，存储读取出的字节</span></span>
<span class="line">            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 记录当前批次存储了多少字节</span></span>
<span class="line">            <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 循环与硬盘交互</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 读取的内容是根据data读取多少字节，就输出到多少字节。</span></span>
<span class="line">                <span class="token comment">// 将当批次获得的字节数据，通过字节缓冲输出流，写入到另一个File文件</span></span>
<span class="line">                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件复制失败：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例 - 字符流操作</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>  <span class="token comment">// IO异常处理类</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>         <span class="token comment">// File文件对象</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>   <span class="token comment">// 文本字符输入流</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span>   <span class="token comment">// 文本字符输出流</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span>   <span class="token comment">// 文本字符缓冲输入流</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedWriter</span></span><span class="token punctuation">;</span>   <span class="token comment">// 文本字符缓冲输出流</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 实例化File对象，添加需要复制的源文件</span></span>
<span class="line">        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/file.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 实例化File对象，添加需要复制的新文件</span></span>
<span class="line">        <span class="token class-name">File</span> fileCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/fileCopy.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">(</span></span>
<span class="line">                <span class="token comment">// 实例化字符输入流，添加要读取的File对象</span></span>
<span class="line">                <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 实例化字符缓冲输入流，包装原始字符输入流，即添加缓冲区</span></span>
<span class="line">                <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// 实例化字符输出流，添加要写入的File对象</span></span>
<span class="line">                <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>fileCopy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 实例化字符缓冲输出流，包装原始字符输出流，即添加缓冲区</span></span>
<span class="line">                <span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 创建临时存储空间，存储读取出的字符</span></span>
<span class="line">            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 记录当前批次存储了多少字符</span></span>
<span class="line">            <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 循环与硬盘交互</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>charArray<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 将当批次获得的字符数据，通过字节缓冲输出流，写入到另一个File文件</span></span>
<span class="line">                bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>charArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转换流" tabindex="-1"><a class="header-anchor" href="#转换流"><span>转换流</span></a></h3><blockquote><ul><li>若代码编码和被读取的文本文件的编码不一致，则使用字符流读取文本文件时就会出现乱码。</li><li>解决不同编码时，字符流读取文本内容乱码的问题。</li><li>解决思路：先获取文件的原始字节流，再将其按真实的字符集编码转换成字符输入流，这样字符输入流中的字符就不会乱码。</li></ul><p><strong>类别</strong></p><ul><li><code>InputStreamReader</code>字符输入转换流：控制输入读取的文件用什么字符集解码。</li><li><code>OutputStreamWrite</code>字符输出转换流：控制输出写入的文件用什么字符集编码。</li></ul></blockquote><p><strong>构造方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>new InputStreamReader(InputStream is)</code></td><td style="text-align:left;">（字符输入转换流）把原始的字节输入流，按照代码默认编码转换成字符输入流（与直接使用FileReader的效果一样）</td></tr><tr><td style="text-align:left;"><code>new InputStreamReader(InputStream is, String charset)</code></td><td style="text-align:left;">（字符输入转换流）将原始字节输入流，按照指定字符集编码转成字符输入流</td></tr><tr><td style="text-align:left;"><code>new OutputStreamWrite(OutputStream is)</code></td><td style="text-align:left;">（字符输出转换流）将原始字节数据流，按照文件默认编码转换成字符输出流</td></tr><tr><td style="text-align:left;"><code>new OutputStreamWrite(OutputStream is, String charset)</code></td><td style="text-align:left;">（字符输出转换流）将原始字节数据流，按照指定编码转换成字符输出流</td></tr></tbody></table><h3 id="打印流" tabindex="-1"><a class="header-anchor" href="#打印流"><span>打印流</span></a></h3><blockquote><ul><li><code>PrintStream</code>：字节打印流</li><li><code>PrintWriter</code>：字符打印流</li></ul></blockquote><p><strong>构造方法</strong></p><table><thead><tr><th style="text-align:left;">字节打印流方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>new PrintStream(OutputStream fos)</code></td><td style="text-align:left;">打印流直接通向字节输出流对象</td></tr><tr><td style="text-align:left;"><code>new PrintStream(File file)</code></td><td style="text-align:left;">打印流直接通向File文件对象</td></tr><tr><td style="text-align:left;"><code>new PrintStream(String fileName)</code></td><td style="text-align:left;">打印流直接通向文件路径</td></tr><tr><td style="text-align:left;"><code>new PrintStream(String fileName, Charset charset)</code></td><td style="text-align:left;">指定写入的字符编码</td></tr><tr><td style="text-align:left;"><code>new PrintStream(OutputStream out, boolean autoFlush)</code></td><td style="text-align:left;">指定字节输出流，是否自动刷新</td></tr><tr><td style="text-align:left;"><code>new PrintStream(OutputStream out, boolean autoFlush, String encoding)</code></td><td style="text-align:left;">指定字节输出流，是否自动刷新，字符编码</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">字符打印流方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>new PrintWriter(OutputStream fos)</code></td><td style="text-align:left;">打印流直接通向字符输出流对象</td></tr><tr><td style="text-align:left;"><code>new PrintWriter(File file)</code></td><td style="text-align:left;">打印流直接通向File文件对象</td></tr><tr><td style="text-align:left;"><code>new PrintWriter(String fileName)</code></td><td style="text-align:left;">打印流直接通向文件路径</td></tr><tr><td style="text-align:left;"><code>new PrintWriter(String fileName, Charset charset)</code></td><td style="text-align:left;">指定写入的字符编码</td></tr><tr><td style="text-align:left;"><code>new PrintWriter(OutputStream out, boolean autoFlush)</code></td><td style="text-align:left;">指定字符输出流，是否自动刷新</td></tr><tr><td style="text-align:left;"><code>new PrintWriter(OutputStream out, boolean autoFlush, String encoding)</code></td><td style="text-align:left;">指定字符输出流，是否自动刷新，字符编码</td></tr></tbody></table><p><strong>相关方法</strong></p><table><thead><tr><th style="text-align:left;">字节打印流方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;PrintStream&gt;.println(&lt;任意数据&gt;)</code></td><td style="text-align:left;">打印任意数据，有换行</td></tr><tr><td style="text-align:left;"><code>&lt;PrintStream&gt;.print(&lt;任意数据&gt;)</code></td><td style="text-align:left;">打印任意数据，不会换行</td></tr><tr><td style="text-align:left;"><code>&lt;PrintStream&gt;.write(&lt;数据&gt;)</code></td><td style="text-align:left;">可以支持写字节数据</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">字符打印流方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;PrintWriter&gt;.println(&lt;任意数据&gt;)</code></td><td style="text-align:left;">打印任意数据，有换行</td></tr><tr><td style="text-align:left;"><code>&lt;PrintWriter&gt;.print(&lt;任意数据&gt;)</code></td><td style="text-align:left;">打印任意数据，不会换行</td></tr><tr><td style="text-align:left;"><code>&lt;PrintWriter&gt;.write(&lt;数据&gt;)</code></td><td style="text-align:left;">可以支持写字节数据</td></tr></tbody></table><h3 id="数据流" tabindex="-1"><a class="header-anchor" href="#数据流"><span>数据流</span></a></h3><blockquote><ul><li>允许把数据和其类型一并写出去。</li></ul><p><strong>类别</strong></p><ul><li><code>DataInputStream</code>：输入数据流</li><li><code>DataOutputStream</code>：输出数据流</li></ul></blockquote><p><strong>构造方法</strong></p><table><thead><tr><th style="text-align:left;">输入数据流方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>new DataInputStream(OutputStream out)</code></td><td style="text-align:left;">创建新数据输出流包基础的字节输入流</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">输出数据流方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>new DataOutputStream(OutputStream out)</code></td><td style="text-align:left;">创建新数据输出流包基础的字节输出流</td></tr></tbody></table><p><strong>相关方法</strong></p><table><thead><tr><th style="text-align:left;">输入数据流方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;DataInputStream&gt;.readerByte()</code></td><td style="text-align:left;">将<code>byte</code>类型数据写入基础的字节输出流</td></tr><tr><td style="text-align:left;"><code>&lt;DataInputStream&gt;.readerInt()</code></td><td style="text-align:left;">将<code>int</code>类型数据写入基础的字节输出流</td></tr><tr><td style="text-align:left;"><code>&lt;DataInputStream&gt;.readerDouble()</code></td><td style="text-align:left;">将<code>double</code>类型数据写入基础的字节输出流</td></tr><tr><td style="text-align:left;"><code>&lt;DataInputStream&gt;.readerUTF()</code></td><td style="text-align:left;">将字符串数据以UTF-8编码成字节写入基础的字节输出流</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">输出数据流方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;DataOutputStream&gt;.writeByte(int v)</code></td><td style="text-align:left;">将<code>byte</code>类型数据写入基础的字节输出流</td></tr><tr><td style="text-align:left;"><code>&lt;DataOutputStream&gt;.writeInt(int v)</code></td><td style="text-align:left;">将<code>int</code>类型数据写入基础的字节输出流</td></tr><tr><td style="text-align:left;"><code>&lt;DataOutputStream&gt;.writeDouble(Double v)</code></td><td style="text-align:left;">将<code>double</code>类型数据写入基础的字节输出流</td></tr><tr><td style="text-align:left;"><code>&lt;DataOutputStream&gt;.writeUTF(String str)</code></td><td style="text-align:left;">将字符串数据以UTF-8编码成字节写入基础的字节输出流</td></tr></tbody></table><h3 id="序列化流" tabindex="-1"><a class="header-anchor" href="#序列化流"><span>序列化流</span></a></h3><blockquote><p><strong>类别</strong></p><ul><li><code>ObjectInputStream</code>：（对象字节输入流）对象反序列化，把文件里的java对象读出来。</li><li><code>ObjectOutputStream</code>：（对象字节输出流）对象序列化，把java对象写入到文件中去。</li></ul><p>提示：</p><ul><li>对象如果需要参与序列化，则必须让该对象的类实现序列化接口<code>java.io.Serializable</code>，用于表示一个标记，通过获取对象是否有该方法来判断对象是否运行被序列化。</li></ul></blockquote><p><strong>构造方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>new ObjectInputStream(OutputStream fis)</code></td><td style="text-align:left;">创建对象字符输入流，包装基础的字节输入流</td></tr><tr><td style="text-align:left;"><code>new ObjectOutputStream(OutputStream fos)</code></td><td style="text-align:left;">创建对象字符输出流，包装基础的字节输出流</td></tr></tbody></table><p><strong>相关方法</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>&lt;ObjectOutputStream&gt;.readObject()</code></td><td style="text-align:left;">将对象输入读取出来，返回<code>Object</code></td></tr><tr><td style="text-align:left;"><code>&lt;ObjectOutputStream&gt;.writeObject(object o)</code></td><td style="text-align:left;">将对象输出写入到文件</td></tr></tbody></table><p><strong>案例 - 对象序列化</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 实例化File对象</span></span>
<span class="line">        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/file.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">(</span></span>
<span class="line">                <span class="token comment">// 实例化文件字节输出流，添加需要写入数据的File对象</span></span>
<span class="line">                <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 实例化对象字节输出流，添加文件字节输出流</span></span>
<span class="line">                <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 创建对象，该对象的类必须继承\`Serializable\`接口</span></span>
<span class="line">            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;姓名&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 通过对象通过对象字节输出流，将对象写入文件</span></span>
<span class="line">            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例 - 对象反序列化</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 实例化File对象</span></span>
<span class="line">        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/file.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">(</span></span>
<span class="line">                <span class="token comment">// 实例化文件字节输入流，添加需要读取数据的File对象</span></span>
<span class="line">                <span class="token class-name">FileInputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 实例化对象字节输入流，添加文件字节输入流</span></span>
<span class="line">                <span class="token class-name">ObjectIntputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectIntputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 通过对象通过对象字节输出流，将对象读取出来</span></span>
<span class="line">            <span class="token comment">// (重点)获得将对象文件后，需要手动强转成User对象数据类型</span></span>
<span class="line">            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="io流的资源释放操作" tabindex="-1"><a class="header-anchor" href="#io流的资源释放操作"><span>IO流的资源释放操作</span></a></h2><h3 id="try-catch-finally" tabindex="-1"><a class="header-anchor" href="#try-catch-finally"><span><code>try-catch-finally</code></span></a></h3><p><strong>案例</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 实例化File对象，添加要读取的文件</span></span>
<span class="line">        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/file.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 实例化File对象，添加要复制写入的文件</span></span>
<span class="line">        <span class="token class-name">File</span> fileCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/fileCopy.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 实例化字节输入流对象</span></span>
<span class="line">        <span class="token class-name">InputStream</span> inputFile <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 实例化字节输出流对象</span></span>
<span class="line">        <span class="token class-name">OutputStream</span> outputFile <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 传入需要读取的File文件对象</span></span>
<span class="line">            inputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 传入需要写入的File文件对象</span></span>
<span class="line">            outputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileCopy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 类似缓存区，一批次能读取多少字节</span></span>
<span class="line">            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 记录当前批次读取了多少字节</span></span>
<span class="line">            <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 读取的内容是根据data读取多少字节，就输出到多少字节。</span></span>
<span class="line">                <span class="token comment">// 将读取到的字节数据，通过字节输出流对象，写入到文件</span></span>
<span class="line">                outputFile<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件复制失败：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 释放输出流对象资源</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 判断输出流对象是否已经关闭</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>outputFile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// 释放输出流对象</span></span>
<span class="line">                    outputFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 释放输入流对象资源</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 判断输入流对象是否已经关闭</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// 释放输出流对象</span></span>
<span class="line">                    inputFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="try-with-resource" tabindex="-1"><a class="header-anchor" href="#try-with-resource"><span><code>try-with-resource</code></span></a></h3><p><strong>案例</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 实例化File对象，添加要读取的文件</span></span>
<span class="line">        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/file.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 实例化File对象，添加要复制写入的文件</span></span>
<span class="line">        <span class="token class-name">File</span> fileCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/home/fileCopy.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">(</span></span>
<span class="line">                <span class="token comment">// 实例化字节输入流对象，传入需要读取的File文件对象</span></span>
<span class="line">                <span class="token class-name">InputStream</span> inputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 实例化字节输出流对象，传入需要写入的File文件对象</span></span>
<span class="line">                <span class="token class-name">OutputStream</span> outputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileCopy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 类似缓存区，一批次能读取多少字节</span></span>
<span class="line">            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 记录当前批次读取了多少字节</span></span>
<span class="line">            <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 读取的内容是根据data读取多少字节，就输出到多少字节。</span></span>
<span class="line">                <span class="token comment">// 将读取到的字节数据，通过字节输出流对象，写入到文件</span></span>
<span class="line">                outputFile<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件复制失败：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,140)]))}const u=s(l,[["render",c]]),r=JSON.parse('{"path":"/software/Language-Java-JavaSE-API-%E3%80%8Cjava.io%E3%80%8D.html","title":"Language - Java - Java SE - API - 「java.io」","lang":"zh-CN","frontmatter":{"title":"Language - Java - Java SE - API - 「java.io」","author":"魔术桌","cover":"","category":["软件程序/语言"],"date":"2024-11-24T00:00:00.000Z","tag":["进度-待完善","知识总结"],"description":"文章摘要： Java 平台提供的一组输入/输出（I/O）相关的 API。 介绍 简要说明 通过数据流、序列化和文件系统提供系统输入和输出。 Java 平台提供的一组输入/输出（I/O）相关的 API。 用于处理数据流、文件操作以及其他与 I/O 相关的任务。 提供了丰富的类和接口，以支持不同类型的 I/O 操作。 主要功能 流操作：提供了字节流（Inp...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Language - Java - Java SE - API - 「java.io」\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-03T09:56:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔术桌\\"}]}"],["meta",{"property":"og:url","content":"https://blog.magictable.ha.cn/software/Language-Java-JavaSE-API-%E3%80%8Cjava.io%E3%80%8D.html"}],["meta",{"property":"og:site_name","content":"魔术桌"}],["meta",{"property":"og:title","content":"Language - Java - Java SE - API - 「java.io」"}],["meta",{"property":"og:description","content":"文章摘要： Java 平台提供的一组输入/输出（I/O）相关的 API。 介绍 简要说明 通过数据流、序列化和文件系统提供系统输入和输出。 Java 平台提供的一组输入/输出（I/O）相关的 API。 用于处理数据流、文件操作以及其他与 I/O 相关的任务。 提供了丰富的类和接口，以支持不同类型的 I/O 操作。 主要功能 流操作：提供了字节流（Inp..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T09:56:57.000Z"}],["meta",{"property":"article:author","content":"魔术桌"}],["meta",{"property":"article:tag","content":"知识总结"}],["meta",{"property":"article:tag","content":"进度-待完善"}],["meta",{"property":"article:published_time","content":"2024-11-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-03T09:56:57.000Z"}]]},"git":{"updatedTime":1759485417000,"contributors":[{"name":"MagicTable-RedmiNote12TPro-Android","username":"","email":"13459588094@163.com","commits":1},{"name":"MagicTable-HappinessHome-DebianLinux","username":"","email":"13459588094@163.com","commits":2}],"changelog":[{"hash":"2f64e32c6bfa04fdb137fc5247de26e5603a0eb3","time":1759485417000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"vault backup: 2025-10-03 17:56:57"},{"hash":"ea490d819f6b9c38b6faf647221faa9808862172","time":1759413290000,"email":"13459588094@163.com","author":"MagicTable-HappinessHome-DebianLinux","message":"更新博客文章数据"},{"hash":"bd68b5c596d6a0543e6461d26edd64a5440f6020","time":1758421995000,"email":"13459588094@163.com","author":"MagicTable-RedmiNote12TPro-Android","message":"初始化仓库版本"}]},"autoDesc":true,"filePathRelative":"software/Language-Java-JavaSE-API-「java.io」.md","excerpt":"<p><strong>文章摘要：</strong> Java 平台提供的一组输入/输出（I/O）相关的 API。</p>\\n"}');export{u as comp,r as data};
